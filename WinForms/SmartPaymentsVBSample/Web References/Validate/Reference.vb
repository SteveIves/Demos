'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
'
Namespace Validate
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="CreditCardValidatorSoap", [Namespace]:="http://localhost/SmartPayments/")>  _
    Partial Public Class CreditCardValidator
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetCardTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsCommercialCardOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidCardOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidCardLengthOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidExpDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidMod10OperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://demo.tpisoft.com/SmartPayments/Validate.asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetCardTypeCompleted As GetCardTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event IsCommercialCardCompleted As IsCommercialCardCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidCardCompleted As ValidCardCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidCardLengthCompleted As ValidCardLengthCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidExpDateCompleted As ValidExpDateCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidMod10Completed As ValidMod10CompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SmartPayments/GetCardType", RequestNamespace:="http://localhost/SmartPayments/", ResponseNamespace:="http://localhost/SmartPayments/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCardType(ByVal CardNumber As String) As String
            Dim results() As Object = Me.Invoke("GetCardType", New Object() {CardNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCardType(ByVal CardNumber As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCardType", New Object() {CardNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCardType(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCardTypeAsync(ByVal CardNumber As String)
            Me.GetCardTypeAsync(CardNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCardTypeAsync(ByVal CardNumber As String, ByVal userState As Object)
            If (Me.GetCardTypeOperationCompleted Is Nothing) Then
                Me.GetCardTypeOperationCompleted = AddressOf Me.OnGetCardTypeOperationCompleted
            End If
            Me.InvokeAsync("GetCardType", New Object() {CardNumber}, Me.GetCardTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCardTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCardTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCardTypeCompleted(Me, New GetCardTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SmartPayments/IsCommercialCard", RequestNamespace:="http://localhost/SmartPayments/", ResponseNamespace:="http://localhost/SmartPayments/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsCommercialCard(ByVal CardNumber As String) As Boolean
            Dim results() As Object = Me.Invoke("IsCommercialCard", New Object() {CardNumber})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginIsCommercialCard(ByVal CardNumber As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("IsCommercialCard", New Object() {CardNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndIsCommercialCard(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsCommercialCardAsync(ByVal CardNumber As String)
            Me.IsCommercialCardAsync(CardNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsCommercialCardAsync(ByVal CardNumber As String, ByVal userState As Object)
            If (Me.IsCommercialCardOperationCompleted Is Nothing) Then
                Me.IsCommercialCardOperationCompleted = AddressOf Me.OnIsCommercialCardOperationCompleted
            End If
            Me.InvokeAsync("IsCommercialCard", New Object() {CardNumber}, Me.IsCommercialCardOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsCommercialCardOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsCommercialCardCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsCommercialCardCompleted(Me, New IsCommercialCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SmartPayments/ValidCard", RequestNamespace:="http://localhost/SmartPayments/", ResponseNamespace:="http://localhost/SmartPayments/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidCard(ByVal CardNumber As String, ByVal ExpDate As String) As Integer
            Dim results() As Object = Me.Invoke("ValidCard", New Object() {CardNumber, ExpDate})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginValidCard(ByVal CardNumber As String, ByVal ExpDate As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ValidCard", New Object() {CardNumber, ExpDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndValidCard(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidCardAsync(ByVal CardNumber As String, ByVal ExpDate As String)
            Me.ValidCardAsync(CardNumber, ExpDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidCardAsync(ByVal CardNumber As String, ByVal ExpDate As String, ByVal userState As Object)
            If (Me.ValidCardOperationCompleted Is Nothing) Then
                Me.ValidCardOperationCompleted = AddressOf Me.OnValidCardOperationCompleted
            End If
            Me.InvokeAsync("ValidCard", New Object() {CardNumber, ExpDate}, Me.ValidCardOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidCardOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidCardCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidCardCompleted(Me, New ValidCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SmartPayments/ValidCardLength", RequestNamespace:="http://localhost/SmartPayments/", ResponseNamespace:="http://localhost/SmartPayments/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidCardLength(ByVal CardNumber As String) As Boolean
            Dim results() As Object = Me.Invoke("ValidCardLength", New Object() {CardNumber})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginValidCardLength(ByVal CardNumber As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ValidCardLength", New Object() {CardNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndValidCardLength(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidCardLengthAsync(ByVal CardNumber As String)
            Me.ValidCardLengthAsync(CardNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidCardLengthAsync(ByVal CardNumber As String, ByVal userState As Object)
            If (Me.ValidCardLengthOperationCompleted Is Nothing) Then
                Me.ValidCardLengthOperationCompleted = AddressOf Me.OnValidCardLengthOperationCompleted
            End If
            Me.InvokeAsync("ValidCardLength", New Object() {CardNumber}, Me.ValidCardLengthOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidCardLengthOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidCardLengthCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidCardLengthCompleted(Me, New ValidCardLengthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SmartPayments/ValidExpDate", RequestNamespace:="http://localhost/SmartPayments/", ResponseNamespace:="http://localhost/SmartPayments/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidExpDate(ByVal ExpDate As String) As Boolean
            Dim results() As Object = Me.Invoke("ValidExpDate", New Object() {ExpDate})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginValidExpDate(ByVal ExpDate As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ValidExpDate", New Object() {ExpDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndValidExpDate(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidExpDateAsync(ByVal ExpDate As String)
            Me.ValidExpDateAsync(ExpDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidExpDateAsync(ByVal ExpDate As String, ByVal userState As Object)
            If (Me.ValidExpDateOperationCompleted Is Nothing) Then
                Me.ValidExpDateOperationCompleted = AddressOf Me.OnValidExpDateOperationCompleted
            End If
            Me.InvokeAsync("ValidExpDate", New Object() {ExpDate}, Me.ValidExpDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidExpDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidExpDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidExpDateCompleted(Me, New ValidExpDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SmartPayments/ValidMod10", RequestNamespace:="http://localhost/SmartPayments/", ResponseNamespace:="http://localhost/SmartPayments/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidMod10(ByVal CardNumber As String) As Boolean
            Dim results() As Object = Me.Invoke("ValidMod10", New Object() {CardNumber})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginValidMod10(ByVal CardNumber As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ValidMod10", New Object() {CardNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndValidMod10(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidMod10Async(ByVal CardNumber As String)
            Me.ValidMod10Async(CardNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidMod10Async(ByVal CardNumber As String, ByVal userState As Object)
            If (Me.ValidMod10OperationCompleted Is Nothing) Then
                Me.ValidMod10OperationCompleted = AddressOf Me.OnValidMod10OperationCompleted
            End If
            Me.InvokeAsync("ValidMod10", New Object() {CardNumber}, Me.ValidMod10OperationCompleted, userState)
        End Sub
        
        Private Sub OnValidMod10OperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidMod10CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidMod10Completed(Me, New ValidMod10CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub GetCardTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetCardTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCardTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub IsCommercialCardCompletedEventHandler(ByVal sender As Object, ByVal e As IsCommercialCardCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsCommercialCardCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub ValidCardCompletedEventHandler(ByVal sender As Object, ByVal e As ValidCardCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidCardCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub ValidCardLengthCompletedEventHandler(ByVal sender As Object, ByVal e As ValidCardLengthCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidCardLengthCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub ValidExpDateCompletedEventHandler(ByVal sender As Object, ByVal e As ValidExpDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidExpDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub ValidMod10CompletedEventHandler(ByVal sender As Object, ByVal e As ValidMod10CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidMod10CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
