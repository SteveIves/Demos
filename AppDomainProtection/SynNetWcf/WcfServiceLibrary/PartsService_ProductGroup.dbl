;;******************************************************************************
;; WARNING: THIS FILE WAS CODE GENERATED. CHANGES MAY BE LOST IF REGENERATED
;;******************************************************************************

import System
import System.Collections.Generic
import System.Runtime.Serialization
import System.ServiceModel
import System.Threading.Tasks
import AppDomainProtection
import PartsSystem

namespace WcfServiceLibrary

    public partial class PartsService

        public method CreateProductGroup, @Task<PartsServiceResponse>
            required in aProductGroup, @ProductGroup
        proc
            data completionSource = new TaskCompletionSource<PartsServiceResponse>()
            lambda curryParams()
            begin
                data tmpErrorMessage, string
                data api = new PartsSystemAPI()
                completionSource.SetResult(new PartsServiceResponse() { Status = api.CreateProductGroup(aProductGroup,tmpErrorMessage), ErrorMessage = tmpErrorMessage } )
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            mreturn completionSource.Task
        endmethod

        public method ReadProductGroup, @Task<ProductGroupReadResponse>
            required in  aGroupId, string
            endparams
        proc
            data completionSource = new TaskCompletionSource<ProductGroupReadResponse>()
            lambda curryParams()
            begin
                data tmpProductGroup, @ProductGroup
                data tmpGrfa, [#]byte
                data tmpErrorMessage, string
                data api = new PartsSystemAPI()
                ;------
                ;TODO: Compiler Bug: Type mismatch between System.Byte and System.Byte!
                ;completionSource.SetResult(new ProductGroupReadResponse() { Status = api.ReadProductGroup(aGroupId,tmpProductGroup,tmpGrfa,tmpErrorMessage), ErrorMessage = tmpErrorMessage, Result = tmpProductGroup, Grfa = tmpGrfa } )
                ;------
                ;WORKAROUND:
                data r = new ProductGroupReadResponse()
                r.Status = api.ReadProductGroup(aGroupId,tmpProductGroup,tmpGrfa,tmpErrorMessage)
                r.ErrorMessage = tmpErrorMessage
                r.Result = tmpProductGroup
                r.Grfa = tmpGrfa
                completionSource.SetResult(r)
                ;------
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            mreturn completionSource.Task
        endmethod

        public method ReadAllProductGroups, @Task<ProductGroupReadAllResponse>
            endparams
        proc
            data completionSource = new TaskCompletionSource<ProductGroupReadAllResponse>()
            lambda curryParams()
            begin
                data tmpProductGroups, @List<ProductGroup>
                data tmpErrorMessage, string
                data api = new PartsSystemAPI()
                completionSource.SetResult(new ProductGroupReadAllResponse() { Status = api.ReadAllProductGroups(tmpProductGroups,tmpErrorMessage), ErrorMessage = tmpErrorMessage, Result = tmpProductGroups} )
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            mreturn completionSource.Task
        endmethod

        public method UpdateProductGroup, @Task<ProductGroupUpdateResponse>
            required in aProductGroup, @ProductGroup
            required in aGrfa, [#]byte
            endparams
        proc
            data completionSource = new TaskCompletionSource<ProductGroupUpdateResponse>()
            lambda curryParams()
            begin
                data tmpProductGroup, @ProductGroup, aProductGroup
                data tmpGrfa, [#]byte, aGrfa
                data tmpErrorMessage, string
                data api = new PartsSystemAPI()
                ;------
                ;TODO: Compiler Bug: Type mismatch between System.Byte and System.Byte!
                ;completionSource.SetResult(new ProductGroupUpdateResponse() { Status = api.UpdateProductGroup(tmpProductGroup,tmpGrfa,tmpErrorMessage), ErrorMessage = tmpErrorMessage, Result = tmpProductGroup, Grfa = tmpGrfa} )
                ;------
                ;WORKAROUND:
                data r = new ProductGroupUpdateResponse()
                r.Status = api.UpdateProductGroup(tmpProductGroup,tmpGrfa,tmpErrorMessage)
                r.ErrorMessage = tmpErrorMessage
                r.Result = tmpProductGroup
                r.Grfa = tmpGrfa
                completionSource.SetResult(r)
                ;------
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            mreturn completionSource.Task
        endmethod

        public method DeleteProductGroup, @Task<PartsServiceResponse>
            required in aGrfa, [#]byte
            endparams
        proc
            data completionSource = new TaskCompletionSource<PartsServiceResponse>()
            lambda curryParams()
            begin
                data tmpErrorMessage, string
                data api = new PartsSystemAPI()
                completionSource.SetResult(new PartsServiceResponse() { Status = api.DeleteProductGroup(aGrfa,tmpErrorMessage), ErrorMessage = tmpErrorMessage } )
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            mreturn completionSource.Task
        endmethod

        public method ProductGroupExists, @Task<PartsServiceResponse>
            required in aGroupId, string
            endparams
        proc
            data completionSource = new TaskCompletionSource<PartsServiceResponse>()
            lambda curryParams()
            begin
                data tmpErrorMessage, string
                data api = new PartsSystemAPI()
                completionSource.SetResult(new PartsServiceResponse() { Status = api.ProductGroupExists(aGroupId,tmpErrorMessage), ErrorMessage = tmpErrorMessage } )
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            mreturn completionSource.Task
        endmethod

    endclass

endnamespace
