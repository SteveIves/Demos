;;******************************************************************************
;; WARNING: THIS FILE WAS CODE GENERATED. CHANGES MAY BE LOST IF REGENERATED
;;******************************************************************************

import System
import System.Collections.Generic
import System.Runtime.Serialization
import System.ServiceModel
import System.Threading.Tasks
import AppDomainProtection
import PartsSystem

namespace WcfServiceLibrary

    public partial class PartsService

        public method CreateSupplier, @Task<MethodStatus>
            required in aSupplier, @Supplier
        proc
            data completionSource = new TaskCompletionSource<MethodStatus>()
            lambda curryParams()
            begin
                data api, @PartsSystemAPI, new PartsSystemAPI()
                completionSource.SetResult(api.CreateSupplier(aSupplier))
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            mreturn completionSource.Task
        endmethod

        public method ReadSupplier, @Task<SupplierReadResponse>
            required in  aSupplierId, string
            endparams
        proc
            data completionSource = new TaskCompletionSource<SupplierReadResponse>()
            lambda curryParams()
            begin
                data api, @PartsSystemAPI, new PartsSystemAPI()
                data tmpSupplier, @Supplier
                data tmpGrfa, String
                completionSource.SetResult(new SupplierReadResponse() { Status = api.ReadSupplier(aSupplierId,tmpSupplier,tmpGrfa), Result = tmpSupplier, Grfa = tmpGrfa } )
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            mreturn completionSource.Task
        endmethod

        public method ReadAllSuppliers, @Task<SupplierReadAllResponse>
            endparams
        proc
            data completionSource = new TaskCompletionSource<SupplierReadAllResponse>()
            lambda curryParams()
            begin
                data api, @PartsSystemAPI, new PartsSystemAPI()
                data tmpSuppliers, @List<Supplier>
                completionSource.SetResult(new SupplierReadAllResponse() {Status = api.ReadAllSuppliers(tmpSuppliers), Result = tmpSuppliers} )
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            mreturn completionSource.Task
        endmethod

        public method UpdateSupplier, @Task<SupplierUpdateResponse>
            required in aSupplier, @Supplier
            required in aGrfa, String
            endparams
        proc
            data completionSource = new TaskCompletionSource<SupplierUpdateResponse>()
            data tmpSupplier, @Supplier, aSupplier
            data tmpGrfa, String, aGrfa
            lambda curryParams()
            begin
                data api, @PartsSystemAPI, new PartsSystemAPI()
                completionSource.SetResult(new SupplierUpdateResponse() {Status = api.UpdateSupplier(tmpSupplier,tmpGrfa), Result = tmpSupplier, Grfa = tmpGrfa} )
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            mreturn completionSource.Task
        endmethod

        public method DeleteSupplier, @Task<MethodStatus>
            required in aGrfa, String
            endparams
        proc
            data completionSource = new TaskCompletionSource<MethodStatus>()
            lambda curryParams()
            begin
                data api, @PartsSystemAPI, new PartsSystemAPI()
                completionSource.SetResult(api.DeleteSupplier(aGrfa))
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            mreturn completionSource.Task
        endmethod

        public method SupplierExists, @Task<MethodStatus>
            required in aSupplierId, string
            endparams
        proc
            data completionSource = new TaskCompletionSource<MethodStatus>()
            lambda curryParams()
            begin
                data api, @PartsSystemAPI, new PartsSystemAPI()
                completionSource.SetResult(api.SupplierExists(aSupplierId))
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            mreturn completionSource.Task
        endmethod

    endclass

endnamespace
