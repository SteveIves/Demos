;;******************************************************************************
;; WARNING: THIS FILE WAS CODE GENERATED. CHANGES MAY BE LOST IF REGENERATED
;;******************************************************************************

import System
import System.Collections.Generic
import System.Runtime.Serialization
import System.ServiceModel
import System.Threading.Tasks
import AppDomainProtection
import PartsSystem

namespace WcfServiceLibrary

    public partial class PartsService

        public method CreateSupplier, @Task<PartsServiceResponse>
            required in aSupplier, @Supplier
        proc
            data completionSource = new TaskCompletionSource<PartsServiceResponse>()
            lambda curryParams()
            begin
                data tmpErrorMessage, string
                data api = new PartsSystemAPI()
                completionSource.SetResult(new PartsServiceResponse() { Status = api.CreateSupplier(aSupplier,tmpErrorMessage), ErrorMessage = tmpErrorMessage } )
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            mreturn completionSource.Task
        endmethod

        public method ReadSupplier, @Task<SupplierReadResponse>
            required in  aSupplierId, string
            endparams
        proc
            data completionSource = new TaskCompletionSource<SupplierReadResponse>()
            lambda curryParams()
            begin
                data tmpSupplier, @Supplier
                data tmpGrfa, [#]byte
                data tmpErrorMessage, string
                data api = new PartsSystemAPI()
                ;------
                ;TODO: Compiler Bug: Type mismatch between System.Byte and System.Byte!
                ;completionSource.SetResult(new SupplierReadResponse() { Status = api.ReadSupplier(aSupplierId,tmpSupplier,tmpGrfa,tmpErrorMessage), ErrorMessage = tmpErrorMessage, Result = tmpSupplier, Grfa = tmpGrfa } )
                ;------
                ;WORKAROUND:
                data r = new SupplierReadResponse()
                r.Status = api.ReadSupplier(aSupplierId,tmpSupplier,tmpGrfa,tmpErrorMessage)
                r.ErrorMessage = tmpErrorMessage
                r.Result = tmpSupplier
                r.Grfa = tmpGrfa
                completionSource.SetResult(r)
                ;------
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            mreturn completionSource.Task
        endmethod

        public method ReadAllSuppliers, @Task<SupplierReadAllResponse>
            endparams
        proc
            data completionSource = new TaskCompletionSource<SupplierReadAllResponse>()
            lambda curryParams()
            begin
                data tmpSuppliers, @List<Supplier>
                data tmpErrorMessage, string
                data api = new PartsSystemAPI()
                completionSource.SetResult(new SupplierReadAllResponse() { Status = api.ReadAllSuppliers(tmpSuppliers,tmpErrorMessage), ErrorMessage = tmpErrorMessage, Result = tmpSuppliers} )
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            mreturn completionSource.Task
        endmethod

        public method UpdateSupplier, @Task<SupplierUpdateResponse>
            required in aSupplier, @Supplier
            required in aGrfa, [#]byte
            endparams
        proc
            data completionSource = new TaskCompletionSource<SupplierUpdateResponse>()
            lambda curryParams()
            begin
                data tmpSupplier, @Supplier, aSupplier
                data tmpGrfa, [#]byte, aGrfa
                data tmpErrorMessage, string
                data api = new PartsSystemAPI()
                ;------
                ;TODO: Compiler Bug: Type mismatch between System.Byte and System.Byte!
                ;completionSource.SetResult(new SupplierUpdateResponse() { Status = api.UpdateSupplier(tmpSupplier,tmpGrfa,tmpErrorMessage), ErrorMessage = tmpErrorMessage, Result = tmpSupplier, Grfa = tmpGrfa} )
                ;------
                ;WORKAROUND:
                data r = new SupplierUpdateResponse()
                r.Status = api.UpdateSupplier(tmpSupplier,tmpGrfa,tmpErrorMessage)
                r.ErrorMessage = tmpErrorMessage
                r.Result = tmpSupplier
                r.Grfa = tmpGrfa
                completionSource.SetResult(r)
                ;------
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            mreturn completionSource.Task
        endmethod

        public method DeleteSupplier, @Task<PartsServiceResponse>
            required in aGrfa, [#]byte
            endparams
        proc
            data completionSource = new TaskCompletionSource<PartsServiceResponse>()
            lambda curryParams()
            begin
                data tmpErrorMessage, string
                data api = new PartsSystemAPI()
                completionSource.SetResult(new PartsServiceResponse() { Status = api.DeleteSupplier(aGrfa,tmpErrorMessage), ErrorMessage = tmpErrorMessage } )
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            mreturn completionSource.Task
        endmethod

        public method SupplierExists, @Task<PartsServiceResponse>
            required in aSupplierId, string
            endparams
        proc
            data completionSource = new TaskCompletionSource<PartsServiceResponse>()
            lambda curryParams()
            begin
                data tmpErrorMessage, string
                data api = new PartsSystemAPI()
                completionSource.SetResult(new PartsServiceResponse() { Status = api.SupplierExists(aSupplierId,tmpErrorMessage), ErrorMessage = tmpErrorMessage } )
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            mreturn completionSource.Task
        endmethod

    endclass

endnamespace
