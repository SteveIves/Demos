
import System
import System.Collections.ObjectModel
import System.ComponentModel
import System.Windows.Input

import ServiceStack
import BusinessLogic
import Services

namespace TestClient

	public class ViewModel implements INotifyPropertyChanged

		private servicesUrl, string

.region "Constructors"

		public method ViewModel
			endparams
		proc
			servicesUrl = String.Format("http://{0}:8088/", System.Net.Dns.GetHostName().ToLower())
			getProductGroups()
			getSuppliers()
		endmethod

.endregion

.region "Backing storage for properties"

		private mSuppliers,				@ObservableCollection<Supplier>
		private mSelectedSupplier,		@Supplier
		private mProductGroups,			@ObservableCollection<ProductGroup>
		private mSelectedProductGroup,	@ProductGroup
		private mParts,					@ObservableCollection<Part>
		private mSelectedPart,			@Part

.endregion

.region "Bindable Properties"

		public property ProductGroups, @ObservableCollection<ProductGroup>
			method get
			proc
				mreturn mProductGroups
			endmethod
			method set
			proc
				mProductGroups = value
				NotifyPropertyChanged("ProductGroups")
			endmethod
		endproperty
		
		public property SelectedProductGroup, @ProductGroup
			method get
			proc
				mreturn mSelectedProductGroup
			endmethod
			method set
			proc
				mSelectedProductGroup = value
				NotifyPropertyChanged("SelectedProductGroup")

				;;Update the selected part
				if (mSelectedPart != ^null)
				begin
					mSelectedPart.GroupId = mSelectedProductGroup.GroupId
				end

			endmethod
		endproperty
		
		public property Suppliers, @ObservableCollection<Supplier>
			method get
			proc
				mreturn mSuppliers
			endmethod
			method set
            proc
				mSuppliers = value
				NotifyPropertyChanged("Suppliers")
			endmethod
		endproperty
		
		public property SelectedSupplier, @Supplier
			method get
			proc
				mreturn mSelectedSupplier
			endmethod
			method set
			proc
				mSelectedSupplier = value
				NotifyPropertyChanged("SelectedSupplier")
				getSupplierParts()
			endmethod
		endproperty

		public property Parts, @ObservableCollection<Part>
			method get
			proc
				mreturn mParts
			endmethod
			method set
			proc
				mParts = value
				NotifyPropertyChanged("Parts")
			endmethod
		endproperty
		
		public property SelectedPart, @Part
			method get
			proc
				mreturn mSelectedPart
			endmethod
			method set
			proc
				mSelectedPart = value
				NotifyPropertyChanged("SelectedPart")

				;;Change the product group that is selected in the ComboBox
				if (mSelectedPart!=^null)
				begin
					data pg, @ProductGroup
					foreach pg in mProductGroups
					begin
						if (pg.GroupId.Equals(mSelectedPart.GroupId))
						begin
							SelectedProductGroup = pg
							exitloop
						end
					end
				end

			endmethod
		endproperty

.endregion

.region "Logic"

		private async method getProductGroups, void
			endparams
		proc
			ErrorMessage = ""
			disposable data client = new JsonServiceClient(servicesUrl)
			try
			begin
				data response, @ProductGroupReadAllResponse, client.Get<ProductGroupReadAllResponse>(new ProductGroupReadAll())
				ProductGroups = new ObservableCollection<ProductGroup>(response.ProductGroups)
			end
			catch (e, @Exception)
			begin
				ErrorMessage = e.Message
			end
			endtry
		endmethod
		
		private async method getSuppliers, void
			endparams
		proc
			ErrorMessage = ""
			disposable data client = new JsonServiceClient(servicesUrl)
			try
			begin
				data response, @SupplierReadAllResponse, client.Get<SupplierReadAllResponse>(new SupplierReadAll())
				Suppliers = new ObservableCollection<Supplier>(response.Suppliers)
				if (Suppliers.Count > 0)
					SelectedSupplier = Suppliers[0]
			end
			catch (e, @Exception)
			begin
				ErrorMessage = e.Message
			end
			endtry
		endmethod

		private async method getSupplierParts, void
			endparams
		proc
			ErrorMessage = ""
			disposable data client = new JsonServiceClient(servicesUrl)
			try
			begin
				data response, @PartReadSupplierPartsResponse, client.Get<PartReadSupplierPartsResponse>(new PartReadSupplierParts() { SupplierId = SelectedSupplier.SupplierId });
				Parts = new ObservableCollection<Part>(response.Parts)
				if (Parts.Count > 0)
					SelectedPart = Parts[0]
			end
			catch (e, @Exception)
			begin
				ErrorMessage = e.Message
			end
			endtry
		endmethod

.endregion

.region "ErrorMessage"

		private mErrorMessage, String

		public property ErrorMessage, String
			method get
			proc
				mreturn mErrorMessage
			endmethod
			method set
			proc
				mErrorMessage = value
				NotifyPropertyChanged("ErrorMessage")
			endmethod
		endproperty
		
.endregion

.region "INotifyPropertyChanged"
		
		public event PropertyChanged, @PropertyChangedEventHandler
		
		protected method NotifyPropertyChanged, void
			required in propertyName, String
			endparams
		proc
			if (PropertyChanged!=^null)
				raiseevent(PropertyChanged,this,new PropertyChangedEventArgs(propertyName))
		endmethod
		
.endregion
		
	endclass

endnamespace

