;;*****************************************************************************
;;
;; Title:       BusinessLogicFactory.dbl
;;
;; Type:        Class
;;
;; Description: Factory for the creation and release of AppDomain protected
;;              business logic objects
;;
;; Date:        27th December 2014
;;
;; Authors:     Steve Ives
;;              Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Reflection

namespace AppDomainProtection

    public class BusinessLogicFactory

        public static method GetInstance<T>, T
            endparams
        proc
            ;;Get an AppDomain to host a new business logic instance
            data domain, @AppDomain, AppDomainPoolManager.Allocate()

            ;;Get the type of the business logic class that we're loading
            data typ, @Type, ^typeof(T)

            ;;Load a new instance of the business logic object into the AppDomain
            data instance, T, (T)domain.CreateInstanceFromAndUnwrap(typ.Assembly.CodeBase, typ.FullName,true,BindingFlags.Default,^null,^null,^null,^null)

            ;;Return it for use
            mreturn instance

        endmethod

        public static method ReleaseInstance, void
            required in instance, @IProtectedClass
            endparams
        proc
            data domain, @AppDomain, instance.GetAppDomain()
            AppDomainPoolManager.Release(domain)
        endmethod

    endclass

endnamespace

