;;******************************************************************************
;; WARNING: THIS FILE WAS CODE GENERATED. CHANGES MAY BE LOST IF REGENERATED
;;******************************************************************************

import System
import System.Collections.Concurrent
import System.Collections.Generic
import System.Reflection
import System.Web
import ServiceStack
import BusinessLogic

namespace Services

.region "SuppliersService"

    public partial class SuppliersService extends Service

        private static appDomainQueue, @ConcurrentQueue<AppDomain>, new ConcurrentQueue<AppDomain>()

        private method getSuppliersLogic, @SuppliersLogic
            endparams
        proc
            ;;Get the type of the business logic class that we're loading
            data suppliersLogicType, @Type, ^typeof(SuppliersLogic)

            ;;Get an AppDomain to host a new business logic instance
            data suppliersServiceDomain, @AppDomain
            if (!appDomainQueue.TryDequeue(suppliersServiceDomain))
                suppliersServiceDomain = AppDomain.CreateDomain(Guid.NewGuid().ToString())

            ;;Load a new instance of the business logic object into the AppDomain
            data suppliersLogicInstance, @SuppliersLogic, (@SuppliersLogic)suppliersServiceDomain.CreateInstanceFromAndUnwrap(suppliersLogicType.Assembly.CodeBase, suppliersLogicType.FullName,true,BindingFlags.Default,^null,^null,^null,^null)

            ;;Return it for use
            mreturn suppliersLogicInstance

        endmethod

        public method Any, @SupplierCreateResponse
            required in request, @SupplierCreate
            endparams
        proc
            data api, @SuppliersLogic, getSuppliersLogic()
            data sts, MethodStatus, api.CreateSupplier(request.Supplier)
            appDomainQueue.Enqueue(api.GetAppDomain())
            mreturn new SupplierCreateResponse(sts)
        endmethod

        public method Any, @SupplierReadResponse
            required in request, @SupplierRead
            endparams
        proc
            data api, @SuppliersLogic, getSuppliersLogic()
            data supplier, @Supplier
            data grfa, string
            data sts, MethodStatus, api.ReadSupplier(request.SupplierId,supplier,grfa)
            data response, @SupplierReadResponse, new SupplierReadResponse(sts,supplier,grfa)
            appDomainQueue.Enqueue(api.GetAppDomain())
            mreturn response
        endmethod

        public method Any, @SupplierReadAllResponse
            required in request, @SupplierReadAll
            endparams
        proc
            data api, @SuppliersLogic, getSuppliersLogic()
            data suppliers, @List<Supplier>
            data sts, MethodStatus, api.ReadAllSuppliers(suppliers)
            data response, @SupplierReadAllResponse, new SupplierReadAllResponse(sts,suppliers)
            appDomainQueue.Enqueue(api.GetAppDomain())
            mreturn response
        endmethod

        public method Any, @SupplierUpdateResponse
            required in request, @SupplierUpdate
            endparams
        proc
            data api, @SuppliersLogic, getSuppliersLogic()
            data supplier, @Supplier, request.Supplier
            data grfa, string, request.grfa
            data sts, MethodStatus, api.UpdateSupplier(supplier,grfa)
            data response, @SupplierUpdateResponse, new SupplierUpdateResponse(sts,supplier,grfa)
            appDomainQueue.Enqueue(api.GetAppDomain())
            mreturn response
        endmethod

        public method Any, @SupplierDeleteResponse
            required in request, @SupplierDelete
            endparams
        proc
            data api, @SuppliersLogic, getSuppliersLogic()
            data sts, MethodStatus, api.DeleteSupplier(request.Grfa)
            appDomainQueue.Enqueue(api.GetAppDomain())
            mreturn new SupplierDeleteResponse(sts)
        endmethod

        public method Any, @SupplierExistsResponse
            required in request, @SupplierExists
            endparams
        proc
            data api, @SuppliersLogic, getSuppliersLogic()
            data sts, MethodStatus, api.SupplierExists(request.SupplierId)
            appDomainQueue.Enqueue(api.GetAppDomain())
            mreturn new SupplierExistsResponse(sts)
        endmethod

    endclass

.endregion

.region "SupplierCreate DTO's"

    {Route("/suppliers", "POST")}
    public class SupplierCreate implements IReturn<SupplierCreateResponse>

        public property Supplier, @Supplier
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

    public class SupplierCreateResponse

        public method SupplierCreateResponse
            required in aStatus, MethodStatus
            endparams
        proc
            Status = aStatus
        endmethod

        public property Status, MethodStatus
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

.endregion

.region "SupplierRead DTO's"

    {Route("/suppliers/{SupplierId}", "GET")}
    public class SupplierRead implements IReturn<SupplierReadResponse>

        public property SupplierId, String
            method get
            endmethod
            method set
            endmethod
        endproperty

      endclass

    public class SupplierReadResponse

        public method SupplierReadResponse
            required in aStatus, MethodStatus
            required in aSupplier, @Supplier
            required in aGrfa, String
            endparams
        proc
            Status = aStatus
            Supplier = aSupplier
            Grfa = aGrfa
        endmethod

        public property Status, MethodStatus
            method get
            endmethod
            method set
            endmethod
        endproperty

        public property Supplier, @Supplier
            method get
            endmethod
            method set
            endmethod
        endproperty

        public property Grfa, String
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

.endregion

.region "SupplierReadAll DTO's"

    {Route("/suppliers", "GET")}
    public class SupplierReadAll implements IReturn<SupplierReadAllResponse>

    endclass

    public class SupplierReadAllResponse

        public method SupplierReadAllResponse
            required in aStatus, MethodStatus
            required in aSuppliers, @List<Supplier> 
            endparams
        proc
            Status = aStatus
            Suppliers = aSuppliers
        endmethod

        public property Status, MethodStatus
            method get
            endmethod
            method set
            endmethod
        endproperty

        public property Suppliers, @List<Supplier>
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

.endregion

.region "SupplierUpdate DTO's"

    {Route("/suppliers", "PUT")}
    public class SupplierUpdate implements IReturn<SupplierUpdateResponse>

        public property Supplier, @Supplier
            method get
            endmethod
            method set
            endmethod
        endproperty

        public property Grfa, String
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

    public class SupplierUpdateResponse

        public method SupplierUpdateResponse
            required in aStatus, MethodStatus
            required in aSupplier, @Supplier
            required in aGrfa, String
            endparams
        proc
            Status = aStatus
            Supplier = aSupplier
            Grfa = aGrfa
        endmethod

        public property Status, MethodStatus
            method get
            endmethod
            method set
            endmethod
        endproperty

        public property Supplier, @Supplier
            method get
            endmethod
            method set
            endmethod
        endproperty

        public property Grfa, String
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

.endregion	

.region "SupplierDelete DTO's"

    {Route("/suppliers/{Grfa}", "DELETE")}
    public class SupplierDelete implements IReturn<SupplierDeleteResponse>

        public property Grfa, string
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

    public class SupplierDeleteResponse

        public method SupplierDeleteResponse
            required in aStatus, MethodStatus
            endparams
        proc
            Status = aStatus
        endmethod

        public property Status, MethodStatus
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

.endregion

.region "SupplierExists DTO's"

    {Route("/suppliers/exist/{SupplierId}", "GET")}
    public class SupplierExists implements IReturn<SupplierExistsResponse>

        public property SupplierId, String
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

    public class SupplierExistsResponse

        public method SupplierExistsResponse
            required in aStatus, MethodStatus
            endparams
        proc
            Status = aStatus
        endmethod

        public property Status, MethodStatus
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

.endregion

endnamespace
