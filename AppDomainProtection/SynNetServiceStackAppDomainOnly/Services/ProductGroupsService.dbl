;;******************************************************************************
;; WARNING: THIS FILE WAS CODE GENERATED. CHANGES MAY BE LOST IF REGENERATED
;;******************************************************************************

import System
import System.Collections.Concurrent
import System.Collections.Generic
import System.Reflection
import System.Web
import ServiceStack
import BusinessLogic

namespace Services

.region "ProductGroupsService"

    public partial class ProductGroupsService extends Service

        private static appDomainQueue, @ConcurrentQueue<AppDomain>, new ConcurrentQueue<AppDomain>()

        private method getProductGroupsLogic, @ProductGroupsLogic
            endparams
        proc
            ;;Get the type of the business logic class that we're loading
            data productGroupsLogicType, @Type, ^typeof(ProductGroupsLogic)

            ;;Get an AppDomain to host a new business logic instance
            data productGroupsServiceDomain, @AppDomain
            if (!appDomainQueue.TryDequeue(productGroupsServiceDomain))
                productGroupsServiceDomain = AppDomain.CreateDomain(Guid.NewGuid().ToString())

            ;;Load a new instance of the business logic object into the AppDomain
            data productGroupsLogicInstance, @ProductGroupsLogic, (@ProductGroupsLogic)productGroupsServiceDomain.CreateInstanceFromAndUnwrap(productGroupsLogicType.Assembly.CodeBase, productGroupsLogicType.FullName,true,BindingFlags.Default,^null,^null,^null,^null)

            ;;Return it for use
            mreturn productGroupsLogicInstance

        endmethod

        public method Any, @ProductGroupCreateResponse
            required in request, @ProductGroupCreate
            endparams
        proc
            data api, @ProductGroupsLogic, getProductGroupsLogic()
            data sts, MethodStatus, api.CreateProductGroup(request.ProductGroup)
            appDomainQueue.Enqueue(api.GetAppDomain())
            mreturn new ProductGroupCreateResponse(sts)
        endmethod

        public method Any, @ProductGroupReadResponse
            required in request, @ProductGroupRead
            endparams
        proc
            data api, @ProductGroupsLogic, getProductGroupsLogic()
            data productGroup, @ProductGroup
            data grfa, string
            data sts, MethodStatus, api.ReadProductGroup(request.GroupId,productGroup,grfa)
            data response, @ProductGroupReadResponse, new ProductGroupReadResponse(sts,productGroup,grfa)
            appDomainQueue.Enqueue(api.GetAppDomain())
            mreturn response
        endmethod

        public method Any, @ProductGroupReadAllResponse
            required in request, @ProductGroupReadAll
            endparams
        proc
            data api, @ProductGroupsLogic, getProductGroupsLogic()
            data productGroups, @List<ProductGroup>
            data sts, MethodStatus, api.ReadAllProductGroups(productGroups)
            data response, @ProductGroupReadAllResponse, new ProductGroupReadAllResponse(sts,productGroups)
            appDomainQueue.Enqueue(api.GetAppDomain())
            mreturn response
        endmethod

        public method Any, @ProductGroupUpdateResponse
            required in request, @ProductGroupUpdate
            endparams
        proc
            data api, @ProductGroupsLogic, getProductGroupsLogic()
            data productGroup, @ProductGroup, request.ProductGroup
            data grfa, string, request.grfa
            data sts, MethodStatus, api.UpdateProductGroup(productGroup,grfa)
            data response, @ProductGroupUpdateResponse, new ProductGroupUpdateResponse(sts,productGroup,grfa)
            appDomainQueue.Enqueue(api.GetAppDomain())
            mreturn response
        endmethod

        public method Any, @ProductGroupDeleteResponse
            required in request, @ProductGroupDelete
            endparams
        proc
            data api, @ProductGroupsLogic, getProductGroupsLogic()
            data sts, MethodStatus, api.DeleteProductGroup(request.Grfa)
            appDomainQueue.Enqueue(api.GetAppDomain())
            mreturn new ProductGroupDeleteResponse(sts)
        endmethod

        public method Any, @ProductGroupExistsResponse
            required in request, @ProductGroupExists
            endparams
        proc
            data api, @ProductGroupsLogic, getProductGroupsLogic()
            data sts, MethodStatus, api.ProductGroupExists(request.GroupId)
            appDomainQueue.Enqueue(api.GetAppDomain())
            mreturn new ProductGroupExistsResponse(sts)
        endmethod

    endclass

.endregion

.region "ProductGroupCreate DTO's"

    {Route("/productGroups", "POST")}
    public class ProductGroupCreate implements IReturn<ProductGroupCreateResponse>

        public property ProductGroup, @ProductGroup
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

    public class ProductGroupCreateResponse

        public method ProductGroupCreateResponse
            required in aStatus, MethodStatus
            endparams
        proc
            Status = aStatus
        endmethod

        public property Status, MethodStatus
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

.endregion

.region "ProductGroupRead DTO's"

    {Route("/productGroups/{GroupId}", "GET")}
    public class ProductGroupRead implements IReturn<ProductGroupReadResponse>

        public property GroupId, String
            method get
            endmethod
            method set
            endmethod
        endproperty

      endclass

    public class ProductGroupReadResponse

        public method ProductGroupReadResponse
            required in aStatus, MethodStatus
            required in aProductGroup, @ProductGroup
            required in aGrfa, String
            endparams
        proc
            Status = aStatus
            ProductGroup = aProductGroup
            Grfa = aGrfa
        endmethod

        public property Status, MethodStatus
            method get
            endmethod
            method set
            endmethod
        endproperty

        public property ProductGroup, @ProductGroup
            method get
            endmethod
            method set
            endmethod
        endproperty

        public property Grfa, String
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

.endregion

.region "ProductGroupReadAll DTO's"

    {Route("/productGroups", "GET")}
    public class ProductGroupReadAll implements IReturn<ProductGroupReadAllResponse>

    endclass

    public class ProductGroupReadAllResponse

        public method ProductGroupReadAllResponse
            required in aStatus, MethodStatus
            required in aProductGroups, @List<ProductGroup> 
            endparams
        proc
            Status = aStatus
            ProductGroups = aProductGroups
        endmethod

        public property Status, MethodStatus
            method get
            endmethod
            method set
            endmethod
        endproperty

        public property ProductGroups, @List<ProductGroup>
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

.endregion

.region "ProductGroupUpdate DTO's"

    {Route("/productGroups", "PUT")}
    public class ProductGroupUpdate implements IReturn<ProductGroupUpdateResponse>

        public property ProductGroup, @ProductGroup
            method get
            endmethod
            method set
            endmethod
        endproperty

        public property Grfa, String
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

    public class ProductGroupUpdateResponse

        public method ProductGroupUpdateResponse
            required in aStatus, MethodStatus
            required in aProductGroup, @ProductGroup
            required in aGrfa, String
            endparams
        proc
            Status = aStatus
            ProductGroup = aProductGroup
            Grfa = aGrfa
        endmethod

        public property Status, MethodStatus
            method get
            endmethod
            method set
            endmethod
        endproperty

        public property ProductGroup, @ProductGroup
            method get
            endmethod
            method set
            endmethod
        endproperty

        public property Grfa, String
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

.endregion	

.region "ProductGroupDelete DTO's"

    {Route("/productGroups/{Grfa}", "DELETE")}
    public class ProductGroupDelete implements IReturn<ProductGroupDeleteResponse>

        public property Grfa, string
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

    public class ProductGroupDeleteResponse

        public method ProductGroupDeleteResponse
            required in aStatus, MethodStatus
            endparams
        proc
            Status = aStatus
        endmethod

        public property Status, MethodStatus
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

.endregion

.region "ProductGroupExists DTO's"

    {Route("/productGroups/exist/{GroupId}", "GET")}
    public class ProductGroupExists implements IReturn<ProductGroupExistsResponse>

        public property GroupId, String
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

    public class ProductGroupExistsResponse

        public method ProductGroupExistsResponse
            required in aStatus, MethodStatus
            endparams
        proc
            Status = aStatus
        endmethod

        public property Status, MethodStatus
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

.endregion

endnamespace
