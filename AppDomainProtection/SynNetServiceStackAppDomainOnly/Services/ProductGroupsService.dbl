;;******************************************************************************
;; WARNING: THIS FILE WAS CODE GENERATED. CHANGES MAY BE LOST IF REGENERATED
;;******************************************************************************

import System
import System.Collections.Generic
import System.Reflection
import System.Runtime.Serialization
import System.Web
import ServiceStack
import AppDomainProtection
import BusinessLogic

namespace Services

.region "ProductGroupsService"

    public partial class ProductGroupsService extends Service

        public method Any, @ProductGroupCreateResponse
            required in request, @ProductGroupCreate
            endparams
        proc
            data api, @ProductGroupsLogic, BusinessLogicFactory.GetInstance<ProductGroupsLogic>()
            data sts, MethodStatus, api.CreateProductGroup(request.ProductGroup)
            BusinessLogicFactory.ReleaseInstance(api)
            mreturn new ProductGroupCreateResponse(sts)
        endmethod

        public method Any, @ProductGroupReadResponse
            required in request, @ProductGroupRead
            endparams
        proc
            data api, @ProductGroupsLogic, BusinessLogicFactory.GetInstance<ProductGroupsLogic>()
            data productGroup, @ProductGroup
            data grfa, string
            data sts, MethodStatus, api.ReadProductGroup(request.GroupId,productGroup,grfa)
            data response, @ProductGroupReadResponse, new ProductGroupReadResponse(sts,productGroup,grfa)
            BusinessLogicFactory.ReleaseInstance(api)
            mreturn response
        endmethod

        public method Any, @ProductGroupReadAllResponse
            required in request, @ProductGroupReadAll
            endparams
        proc
            data api, @ProductGroupsLogic, BusinessLogicFactory.GetInstance<ProductGroupsLogic>()
            data productGroups, @List<ProductGroup>
            data sts, MethodStatus, api.ReadAllProductGroups(productGroups)
            data response, @ProductGroupReadAllResponse, new ProductGroupReadAllResponse(sts,productGroups)
            BusinessLogicFactory.ReleaseInstance(api)
            mreturn response
        endmethod

        public method Any, @ProductGroupUpdateResponse
            required in request, @ProductGroupUpdate
            endparams
        proc
            data api, @ProductGroupsLogic, BusinessLogicFactory.GetInstance<ProductGroupsLogic>()
            data productGroup, @ProductGroup, request.ProductGroup
            data grfa, string, request.grfa
            data sts, MethodStatus, api.UpdateProductGroup(productGroup,grfa)
            data response, @ProductGroupUpdateResponse, new ProductGroupUpdateResponse(sts,productGroup,grfa)
            BusinessLogicFactory.ReleaseInstance(api)
            mreturn response
        endmethod

        public method Any, @ProductGroupDeleteResponse
            required in request, @ProductGroupDelete
            endparams
        proc
            data api, @ProductGroupsLogic, BusinessLogicFactory.GetInstance<ProductGroupsLogic>()
            data sts, MethodStatus, api.DeleteProductGroup(request.Grfa)
            BusinessLogicFactory.ReleaseInstance(api)
            mreturn new ProductGroupDeleteResponse(sts)
        endmethod

        public method Any, @ProductGroupExistsResponse
            required in request, @ProductGroupExists
            endparams
        proc
            data api, @ProductGroupsLogic, BusinessLogicFactory.GetInstance<ProductGroupsLogic>()
            data sts, MethodStatus, api.ProductGroupExists(request.GroupId)
            BusinessLogicFactory.ReleaseInstance(api)
            mreturn new ProductGroupExistsResponse(sts)
        endmethod

    endclass

.endregion

.region "ProductGroupCreate DTO's"

    {DataContract}
    {Route("/productGroup", "POST", Summary="",Notes="")}
    public class ProductGroupCreate implements IReturn<ProductGroupCreateResponse>

        {DataMember}
        public property ProductGroup, @ProductGroup
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

    {DataContract}
    public class ProductGroupCreateResponse

        public method ProductGroupCreateResponse
            required in aStatus, MethodStatus
            endparams
        proc
            Status = aStatus
        endmethod

        {DataMember}
        public property Status, MethodStatus
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

.endregion

.region "ProductGroupRead DTO's"

    {DataContract}
    {Route("/productGroup/{GroupId}", "GET")}
    public class ProductGroupRead implements IReturn<ProductGroupReadResponse>

        {DataMember}
        public property GroupId, String
            method get
            endmethod
            method set
            endmethod
        endproperty

      endclass

    {DataContract}
    public class ProductGroupReadResponse

        public method ProductGroupReadResponse
            required in aStatus, MethodStatus
            required in aProductGroup, @ProductGroup
            required in aGrfa, String
            endparams
        proc
            Status = aStatus
            ProductGroup = aProductGroup
            Grfa = aGrfa
        endmethod

        {DataMember}
        public property Status, MethodStatus
            method get
            endmethod
            method set
            endmethod
        endproperty

        {DataMember}
        public property ProductGroup, @ProductGroup
            method get
            endmethod
            method set
            endmethod
        endproperty

        {DataMember}
        public property Grfa, String
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

.endregion

.region "ProductGroupReadAll DTO's"

    {DataContract}
    {Route("/productGroup", "GET")}
    public class ProductGroupReadAll implements IReturn<ProductGroupReadAllResponse>

    endclass

    {DataContract}
    public class ProductGroupReadAllResponse

        public method ProductGroupReadAllResponse
            required in aStatus, MethodStatus
            required in aProductGroups, @List<ProductGroup> 
            endparams
        proc
            Status = aStatus
            ProductGroups = aProductGroups
        endmethod

        {DataMember}
        public property Status, MethodStatus
            method get
            endmethod
            method set
            endmethod
        endproperty

        {DataMember}
        public property ProductGroups, @List<ProductGroup>
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

.endregion

.region "ProductGroupUpdate DTO's"

    {DataContract}
    {Route("/productGroup", "PUT")}
    public class ProductGroupUpdate implements IReturn<ProductGroupUpdateResponse>

        {DataMember}
        public property ProductGroup, @ProductGroup
            method get
            endmethod
            method set
            endmethod
        endproperty

        {DataMember}
        public property Grfa, String
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

    {DataContract}
    public class ProductGroupUpdateResponse

        public method ProductGroupUpdateResponse
            required in aStatus, MethodStatus
            required in aProductGroup, @ProductGroup
            required in aGrfa, String
            endparams
        proc
            Status = aStatus
            ProductGroup = aProductGroup
            Grfa = aGrfa
        endmethod

        {DataMember}
        public property Status, MethodStatus
            method get
            endmethod
            method set
            endmethod
        endproperty

        {DataMember}
        public property ProductGroup, @ProductGroup
            method get
            endmethod
            method set
            endmethod
        endproperty

        {DataMember}
        public property Grfa, String
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

.endregion	

.region "ProductGroupDelete DTO's"

    {DataContract}
    {Route("/productGroup/{Grfa}", "DELETE")}
    public class ProductGroupDelete implements IReturn<ProductGroupDeleteResponse>

        public property Grfa, string
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

    {DataContract}
    public class ProductGroupDeleteResponse

        public method ProductGroupDeleteResponse
            required in aStatus, MethodStatus
            endparams
        proc
            Status = aStatus
        endmethod

        {DataMember}
        public property Status, MethodStatus
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

.endregion

.region "ProductGroupExists DTO's"

    {DataContract}
    {Route("/productGroup/exist/{GroupId}", "GET")}
    public class ProductGroupExists implements IReturn<ProductGroupExistsResponse>

        {DataMember}
        public property GroupId, String
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

    {DataContract}
    public class ProductGroupExistsResponse

        public method ProductGroupExistsResponse
            required in aStatus, MethodStatus
            endparams
        proc
            Status = aStatus
        endmethod

        {DataMember}
        public property Status, MethodStatus
            method get
            endmethod
            method set
            endmethod
        endproperty

    endclass

.endregion

endnamespace
