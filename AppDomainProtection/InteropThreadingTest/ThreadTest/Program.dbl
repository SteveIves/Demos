import System
import System.Collections.Generic
import System.Threading
import BusinessLogic

namespace ThreadTest
	
	main
		
	proc
		;data dataFiles, String	, "D:\Dev\Demos\AppDomainProtection\InteropThreadingTest\data@LOCALHOST"
		data dataFiles, String	, "DKA0:[USER.STEVEI]@SIVMS"
		data threadCount, int	, 50							;How many concurrent threas
		CallBacks.MaxRecords	= 5						;Number of records to real per iteration (1 - 5000)
		CallBacks.Iterations	= 10							;Number of iterations per thread
		CallBacks.DelayStart	= false						;Random delay before starting to read data?
		CallBacks.DelayBy		= 1000						;Milliseconds
		
		;;Configure the environment, one time only
		data settings, @Dictionary<String, String>, new Dictionary<String, String>()
		settings.Add("MYDATA",dataFiles)
		SynergyEnvironment.SetEnvironment(settings)

		data threads, [#]@Thread, new Thread[threadCount]

		Console.WriteLine("Preparing {0} threads",threadCount)
		data ix, int
		for ix from 1 thru threadCount
		begin
			threads[ix] = new Thread(CallBacks.DoSomeWork)
			threads[ix].Name = string.Format("Thread {0:000}",ix)
		end

		Console.WriteLine("Starting threads")
		for ix from 1 thru threadCount
			threads[ix].Start()

;		;;Wait for all threads to complete	
;		data thr, @Thread
;		foreach thr in threads
;			thr.Join()

		Console.ReadKey()

		GC.Collect()
		GC.WaitForFullGCComplete()
		GC.WaitForPendingFinalizers()
		
	endmain
	
	class CallBacks

		public static Iterations, int, 1
		public static MaxRecords, int, 1000
		public static DelayStart, boolean, false
		public static DelayBy, int, 5000
		
		public static method DoSomeWork, void
			endparams
		proc

			data ix, int
			for ix from 1 thru Iterations
			begin
				if (DelayStart)
				begin
					data rand, @Random, new Random()
					Thread.Sleep(rand.Next(0, 5000))
				end
				
				disposable data wrapper, @ServicesWrapper, new ServicesWrapper()
				data parts, @List<Part>, new List<PART>()
				data errmsg, String
				data status, Method_status
				
				;status = wrapper.MyServices.ReadAllParts(MaxRecords,parts,errmsg)
				;status = wrapper.MyServices.ReadAllPartsHandleBad(MaxRecords,parts,errmsg)
				status = wrapper.MyServices.ReadAllPartsHandleGood(MaxRecords,parts,errmsg)

				using status select

				(Method_status.Success),
				begin
					if (parts.Count==MaxRecords) then
						Console.WriteLine(String.Format("{0} {1:00}/{2:00} - SUCCESS:  {3} records",Thread.CurrentThread.Name,ix,Iterations,parts.Count))
					else
					begin
						Console.WriteLine(String.Format("{0} {1:00}/{2:00} - BAD DATA: {3} records",Thread.CurrentThread.Name,ix,Iterations,parts.Count))
						;Console.Write(".")
					end
				end

				(Method_status.Fail, Method_status.Fatal_error),
					Console.WriteLine(String.Format("{0} {1:00}/{2:00} - ERROR:    {3} ",Thread.CurrentThread.Name,ix,Iterations,errmsg))

				endusing

			end
		endmethod
		
	endclass
	
endnamespace
