;; Generated on 02-Oct-2014 09:19:08 by SynergyTasks, Version=1.0.0.0, Culture=neutral, PublicKeyToken=114c5dbb1312a8bc
;; 
;; The contents of this file are auto-generated. Only add modifications to the end of this file.
;; Any modifications will be lost when the file is re-generated.
;; 
import System
import System.Collections
import System.Collections.Generic
import System.Reflection
import System.Runtime.Serialization
import System.ServiceModel
namespace BusinessLogic

;;; <summary>
;;; Procedural Interface Class BusinessLogicTmp
;;; </summary>
	{ServiceContract()}
	public partial class Services
	
		;;; <summary>
		;;; constructor
		;;; </summary>
		public method Services
		endparams
		proc
		endmethod
		;;; <summary>
		;;; *** To Do ***
		;;; </summary>
		;;; <param name="aMax"></param>
		;;; <param name="aParts"></param>
		;;; <param name="aErrorMessage"></param>
		;;; <returns></returns>
		{OperationContract()}
		public method ReadAllParts   ,Method_status
			aMax    ,int
			inout  aParts    ,@List<BusinessLogic.part>
			inout  aErrorMessage    ,string
		endparams
		record
			s_aMax	,i4
			s_aParts	,@ArrayList
			s_aErrorMessage	,string
		proc
			data ret   ,Method_status
			s_aMax = aMax
			aParts.Clear()
			s_aParts = new ArrayList()
			ret = (Method_status) (int)%ReadAllParts(s_aMax,s_aParts,s_aErrorMessage)
			data i    ,int
			for i from 0 thru (s_aParts.Count - 1)
			begin
				data xfStr2    ,@BusinessLogic.part,new BusinessLogic.part()
				data tStr2     ,^Global.strPart
				tStr2 = (@^Global.strPart)s_aParts[i]
				xfStr2.SynergyToStruct(tStr2)
				aParts.Add(xfStr2)
			end
			aErrorMessage = s_aErrorMessage
			mreturn ret
		endmethod
		;;; <summary>
		;;; *** To Do ***
		;;; </summary>
		;;; <param name="aMax"></param>
		;;; <param name="aParts"></param>
		;;; <param name="aErrorMessage"></param>
		;;; <returns></returns>
		{OperationContract()}
		public method ReadAllPartsHandleBad   ,Method_status
			aMax    ,int
			inout  aParts    ,@List<BusinessLogic.part>
			inout  aErrorMessage    ,string
		endparams
		record
			s_aMax	,i4
			s_aParts	,D_HANDLE
			s_aErrorMessage	,string
		structure bdc
		    bdy      ,a1
		endstructure
		proc
			data ret   ,Method_status
			s_aMax = aMax
			aParts.Clear()
			s_aParts= %mem_proc(DM_ALLOC,700)
			ret = (Method_status) (int)%ReadAllPartsHandleBad(s_aMax,s_aParts,s_aErrorMessage)
			data t_elm, int
			data s_cur, int
			t_elm =(int) %mem_proc(DM_GETSIZE, s_aParts) / 700
			s_cur = 1
			data i    ,int
			for i from 1 thru t_elm
			begin
				data xfStr2    ,@BusinessLogic.part, new BusinessLogic.part()
				xfStr2.SynergyToStruct(^m(bdc.bdy(s_cur:700), s_aParts))
				s_cur +=700
				aParts.Add(xfStr2)
			end
			aErrorMessage = s_aErrorMessage
			mreturn ret
		endmethod
		;;; <summary>
		;;; *** To Do ***
		;;; </summary>
		;;; <param name="aMax"></param>
		;;; <param name="aParts"></param>
		;;; <param name="aErrorMessage"></param>
		;;; <returns></returns>
		{OperationContract()}
		public method ReadAllPartsHandleGood   ,Method_status
			aMax    ,int
			inout  aParts    ,@List<BusinessLogic.part>
			inout  aErrorMessage    ,string
		endparams
		record
			s_aMax	,i4
			s_aParts	,D_HANDLE
			s_aErrorMessage	,string
		structure bdc
		    bdy      ,a1
		endstructure
		proc
			data ret   ,Method_status
			s_aMax = aMax
			aParts.Clear()
			s_aParts= %mem_proc(DM_ALLOC,700)
			ret = (Method_status) (int)%ReadAllPartsHandleGood(s_aMax,s_aParts,s_aErrorMessage)
			data t_elm, int
			data s_cur, int
			t_elm =(int) %mem_proc(DM_GETSIZE, s_aParts) / 700
			s_cur = 1
			data i    ,int
			for i from 1 thru t_elm
			begin
				data xfStr2    ,@BusinessLogic.part, new BusinessLogic.part()
				xfStr2.SynergyToStruct(^m(bdc.bdy(s_cur:700), s_aParts))
				s_cur +=700
				aParts.Add(xfStr2)
			end
			aErrorMessage = s_aErrorMessage
			mreturn ret
		endmethod
		;  xfnlnet method stubs
		;;; <summary>
		;;; connect to xfServerPlus
		;;; </summary>
		public method connect   ,void
		endparams
		proc
		endmethod
		;;; <summary>
		;;; xfServerPlus four parameter connect
		;;; </summary>
		;;; <param name="hostIP">IP address</param>
		;;; <param name="hostPort">port number</param>
		;;; <param name="minPort">minport number</param>
		;;; <param name="maxPort">maxport number</param>
		public method connect   ,void
		  hostIP     ,string
		  hostPort   ,int
		  minPort    ,int
		  maxPort    ,int
		endparams
		proc
		endmethod
		;;; <summary>
		;;; xfServerPlus host and port connect
		;;; </summary>
		;;; <param name="hostIP">IP address</param>
		;;; <param name="hostPort">port number</param>
		public method connect   ,void
		  hostIP     ,string
		  hostPort   ,int
		endparams
		proc
		endmethod
		;;; <summary>
		;;; disconnect from xfServerPlus
		;;; </summary>
		public method disconnect   ,void
		endparams
		proc
		endmethod
		;;; <summary>
		;;; set the call timeout in seconds
		;;; </summary>
		;;; <param name="seconds">timeout in seconds</param>
		public method setCallTimeout   ,void
		  in seconds    ,int
		endparams
		proc
		endmethod
		;;; <summary>
		;;; set the user string
		;;; </summary>
		;;; <param name="userString">The user string</param>
		public method setUserString   ,void
		  in userString    ,string
		endparams
		proc
			xcall XFPL_LOG(userString)
		endmethod
		;;; <summary>
		;;; get the user string 
		;;; </summary>
		;;; <returns>User String</returns>
		public method getUserString   ,string
		  out userString    ,string
		endparams
		proc
			mreturn('')
		endmethod
	endclass
endnamespace
