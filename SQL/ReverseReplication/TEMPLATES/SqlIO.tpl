<CODEGEN_FILENAME><StructureName>Sql.dbl</CODEGEN_FILENAME>
;//****************************************************************************
;//
;// Title:
;//
;// Type:        CodeGen Template
;//
;// Description:
;//
;//
;// Date:
;//
;// Author:      Steve Ives, Synergex Professional Services Group
;//              http://www.synergex.com
;//
;//****************************************************************************
;//
;// Copyright (c) 2012, Synergex International, Inc.
;// All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;;*****************************************************************************
;;
;; Routine:     <StructureName>Exists
;;
;; Author:      <AUTHOR>
;;
;; Company:     <COMPANY>
;;
;; Created:     <DATE> at <TIME>
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by <CODEGEN_VERSION>.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;;*****************************************************************************
;;
;; Possible return values from this routine are:
;;
;;  true    Table exists
;;  false   Table does not exist, or an error occurred
;;
function <StructureName>Exists ,^val
    required in  a_dbchn    ,int    ;;Connected database channel
    optional out a_errtxt   ,a      ;;Error text
    endparams

    .include "CONNECTDIR:ssql.def"
    .include "<STRUCTURE_NOALIAS>" repository, stack record="<structure_name>"

    stack record local_data
        ok          ,boolean    ;;Return value
        dberror     ,int        ;;Database error number
        cursor      ,int        ;;Database cursor
        length      ,int        ;;Length of a string
        table_name  ,a128       ;;Retrieved table name
        errtxt      ,a512       ;;Error message text
    endrecord

proc

    init <structure_name>,local_data
    ok = true

    ;;-------------------------------------------------------------------------
    ;;Open a cursor for the SELECT statement
    ;;
    if (%ssc_open(a_dbchn,cursor,"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES "
    &   "WHERE TABLE_NAME='<STRUCTURE_NAME>'",SSQL_SELECT)==SSQL_FAILURE)
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to open cursor"
    end

    ;;-------------------------------------------------------------------------
    ;;Bind host variables to receive the data
    ;;
    if (ok)
    begin
        if (%ssc_define(a_dbchn,cursor,1,table_name)==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to bind variable"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Move data to host variables
    ;;
    if (ok)
    begin
        if (%ssc_move(a_dbchn,cursor,1)==SSQL_FAILURE)
            ok = false ; Table does not exist
    end

    ;;-------------------------------------------------------------------------
    ;;Close the database cursor
    ;;
    if (cursor)
        xcall ssc_close(a_dbchn,cursor)

    ;;-------------------------------------------------------------------------
    ;;If there was an error message, return it to the calling routine
    ;;
    if (^passed(a_errtxt))
    begin
        if (ok) then
            clear a_errtxt
        else
            a_errtxt=errtxt
    end

    freturn ok

endfunction

;;*****************************************************************************
;;
;; Routine:     <StructureName>SelectRow
;;
;; Author:      <AUTHOR>
;;
;; Company:     <COMPANY>
;;
;; Created:     <DATE> at <TIME>
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by <CODEGEN_VERSION>.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;;******************************************************************************
;;
;; Possible return values from this routine are:
;;
;;   true   Success, row returned
;;   false  Error, see a_errtxt
;;
function <StructureName>SelectRow ,^val

    required in  a_dbchn    ,int    ;Connected database channel
    required in  a_row_guid ,a      ;Unique row GUID
    required out a_data     ,a      ;Record
    optional out a_errtxt   ,a      ;Error text
    endparams

    .include "CONNECTDIR:ssql.def"
    .include "<STRUCTURE_NOALIAS>" repository, stack record="<structure_name>"

    stack record local_data
        ok      ,boolean    ;;OK to continue
        dberror ,int        ;;Database error number
        cursor  ,int        ;;Database cursor
        length  ,int        ;;Length of a string
        errtxt  ,a512       ;;Error message text
    endrecord

    static record
        sql     ,string     ;;SQL statement
    endrecord

proc

    init <structure_name>,local_data
    ok = true

    ;;-------------------------------------------------------------------------
    ;;Open a cursor for the SELECT statement
    ;;
    if (!(a)sql)
    begin
        sql = "SELECT "
        <FIELD_LOOP>
        <IF NOTDATE>
        &    "<FieldSqlName><,>"
        </IF>
        <IF DATE_YYYYMMDD>
        &    "CONVERT(VARCHAR(8),<FieldSqlName>,112) AS [YYYYMMDD]<,>"
        </IF>
        <IF DATE_YYMMDD>
        &    "CONVERT(VARCHAR(6),<FieldSqlName>,12) AS [YYMMDD]<,>"
        </IF>
        </FIELD_LOOP>
        &    " FROM <StructureName>"
        &    " WHERE RowGuid=CAST(:1 AS UNIQUEIDENTIFIER)"
    end

    if (%ssc_open(a_dbchn,cursor,(a)sql,SSQL_SELECT,,1,a_row_guid)==SSQL_FAILURE)
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to open cursor"
    end

    ;;-------------------------------------------------------------------------
    ;;Bind host variables to receive the data
    ;;
    if (ok)
    begin
        if (%ssc_define(a_dbchn,cursor,<STRUCTURE_FIELDS>,
        <FIELD_LOOP>
        <IF NOTDATE>
        &    <structure_name>.<field_name><,>
        </IF>
        <IF DATE>
        &    ^a(<structure_name>.<field_name>)<,>
        </IF>
        </FIELD_LOOP>
        &   )==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to bind variables"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Move data to host variables
    ;;
    if (ok)
    begin
        if (%ssc_move(a_dbchn,cursor,1)==SSQL_NORMAL) then
            a_data = <structure_name>
        else
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to execute SQL statement"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Close the database cursor
    ;;
    if (cursor)
    begin
        if (%ssc_close(a_dbchn,cursor)==SSQL_FAILURE)
        begin
            if (ok)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to close cursor"
            end
        end
    end

    ;;-------------------------------------------------------------------------
    ;;If there was an error message, return it to the calling routine
    ;;
    if (^passed(a_errtxt))
    begin
        if (ok) then
            clear a_errtxt
        else
            a_errtxt=errtxt
    end

    freturn ok

endfunction

