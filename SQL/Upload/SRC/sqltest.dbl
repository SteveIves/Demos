;*******************************************************************************
;
; Title:       sqltest.dbl
;
; Description: A Synergy program which connects to a SQL Server relational
;              database.  The program is intended to be used as a test
;              environment for routines generated from various SQL templates.
;
; Author:      Steve Ives
;
; Copyright:   ©Synergex International Inc.  All rights reserved.
;
; WARNING:     If you were given this code by a Synergex employee then you may
;              use and modify it freely.
;              However, you may not under any circumstances distribute this
;              code, or any modified version of this code, to any third party
;              without first obtaining written permission to do so from
;              Synergex.  In using this code you accept that it is provided
;              as is, and without support or warranty.  Neither Synergex or
;              the author accept any responsibility for any losses or damages
;              of any nature which may arise from the use of this code.  This
;              header information must remain, unaltered, in the code at all
;              times.  Posession of this code, or any modified version of this
;              code, indicates your acceptance of these terms.
;
;*******************************************************************************
;
.main sqltest
;
;*******************************************************************************
;Configure appropriate values for your database in this section
;
.define DB_CONSTR   "VTX12_SQLNATIVE://SqlUpload/.///Trusted_connection=yes"
;
;*******************************************************************************

.include "CONNECTDIR:ssql.def"

.align
record  ivars
    tt          ,i4             ;Terminal channel
    ok          ,i4 ,1          ;OK to continue?
    dbchn       ,i4             ;Database channel to use
    dbinit      ,i4             ;Is the database channel initialized?
    dbcursor    ,i4             ;A database cursor
    sts         ,i4             ;Return status
    len         ,i4             ;Length of a string
    log_ch      ,i4             ;Exceptions log file channel
    log_recsz   ,i4             ;Exceptions log record length

record avars
    errtxt      ,a256           ;Error text

.proc

    ;---------------------------------------------------------------------------
    ;Open the terminal

    open(tt=%syn_freechn,i,"tt:")
    xcall flags(7004020,1)

    ;---------------------------------------------------------------------------
    ;Initialize SQL Connection

    .ifdef OS_VMS
    xcall init_ssql
    .else
    sts=%option(48,1)
    .endc

    ;---------------------------------------------------------------------------
    ;Initialize a database channel

    display(tt,"Initializing database channel ... ")
    if (%ssc_init(dbchn=1)==SSQL_NORMAL) then
    begin
        dbinit=1
        writes(tt,"done")
    end
    else
    begin
        clear ok
        writes(tt,"Failed to initialize database channel!")
    end

    ;---------------------------------------------------------------------------
    ;Connect to the database

    if (ok)
    begin
        display(tt,"Connecting to database ... ")

        if (%ssc_connect(dbchn,DB_CONSTR)==SSQL_NORMAL) then
            writes(tt,"done")
        else
        begin
            clear ok
            xcall ssc_getemsg(dbchn,errtxt,len)
            writes(tt,"Failed to connect to database!")
            writes(tt,"Connect string was " + %atrim(DB_CONSTR))
            writes(tt,"Error was: " + errtxt(1:len))
        end
    end

    ;---------------------------------------------------------------------------
    ;Delete tables (if present)

    if (ok)
    begin
        writes(tt,"Checking for table CUSTOMER ... ")
        if (%customer_exists(dbchn))
        begin
            display(tt,"Deleting table CUSTOMER ... ")
            if (%customer_drop(dbchn,errtxt)) then
                writes(tt,"done")
            else
            begin
                writes(tt,%atrim(errtxt))
                clear ok
            end
        end
    end

    if (ok)
    begin
        writes(tt,"Checking for table PRODUCT_GROUP ... ")
        if (%product_group_exists(dbchn))
        begin
            display(tt,"Deleting table PRODUCT_GROUP ... ")
            if (%product_group_drop(dbchn,errtxt)) then
                writes(tt,"done")
            else
            begin
                writes(tt,%atrim(errtxt))
                clear ok
            end
        end
    end

    if (ok)
    begin
        writes(tt,"Checking for table PRODUCT ... ")
        if (%product_exists(dbchn))
        begin
            display(tt,"Deleting table PRODUCT ... ")
            if (%product_drop(dbchn,errtxt)) then
                writes(tt,"done")
            else
            begin
                writes(tt,%atrim(errtxt))
                clear ok
            end
        end
    end

    if (ok)
    begin
        writes(tt,"Checking for table ORDER_HEADER ... ")
        if (%order_header_exists(dbchn))
        begin
            display(tt,"Deleting table ORDER_HEADER ... ")
            if (%order_header_drop(dbchn,errtxt)) then
                writes(tt,"done")
            else
            begin
                writes(tt,%atrim(errtxt))
                clear ok
            end
        end
    end

    if (ok)
    begin
        writes(tt,"Checking for table ORDER_LINE ... ")
        if (%order_line_exists(dbchn))
        begin
            display(tt,"Deleting table ORDER_LINE ... ")
            if (%order_line_drop(dbchn,errtxt)) then
                writes(tt,"done")
            else
            begin
                writes(tt,%atrim(errtxt))
                clear ok
            end
        end
    end

    ;---------------------------------------------------------------------------
    ;Create new tables

    if (ok)
    begin
        display(tt,"Creating table CUSTOMER ... ")
        if (%customer_create(dbchn,errtxt)) then
            writes(tt,"done")
        else
        begin
            writes(tt,%atrim(errtxt))
            clear ok
        end
    end

    if (ok)
    begin
        display(tt,"Creating table PRODUCT_GROUP ... ")
        if (%product_group_create(dbchn,errtxt)) then
            writes(tt,"done")
        else
        begin
            writes(tt,%atrim(errtxt))
            clear ok
        end
    end

    if (ok)
    begin
        display(tt,"Creating table PRODUCT ... ")
        if (%product_create(dbchn,errtxt)) then
            writes(tt,"done")
        else
        begin
            writes(tt,%atrim(errtxt))
            clear ok
        end
    end

    if (ok)
    begin
        display(tt,"Creating table ORDER_HEADER ... ")
        if (%order_header_create(dbchn,errtxt)) then
            writes(tt,"done")
        else
        begin
            writes(tt,%atrim(errtxt))
            clear ok
        end
    end

    if (ok)
    begin
        display(tt,"Creating table ORDER_LINE ... ")
        if (%order_line_create(dbchn,errtxt)) then
            writes(tt,"done")
        else
        begin
            writes(tt,%atrim(errtxt))
            clear ok
        end
    end

    ;---------------------------------------------------------------------------
    ;Load data into tables

    if (ok)
    begin
        display(tt,"Loading table CUSTOMER ... ")
        ;if (%customer_load(dbchn,errtxt,1,tt)) then
		if (%customer_load_bulk(dbchn,len,errtxt)) then
            writes(tt,"done ... " + %string(len) + " rows inserted")
        else
        begin
            writes(tt,%atrim(errtxt))
            clear ok
        end
    end

    if (ok)
    begin
        display(tt,"Loading table PRODUCT_GROUP ... ")
        ;if (%product_group_load(dbchn,errtxt,1,tt)) then
		if (%product_group_load_bulk(dbchn,len,errtxt)) then
			writes(tt,"done ... " + %string(len) + " rows inserted")
        else
        begin
            writes(tt,%atrim(errtxt))
            clear ok
        end
    end

    if (ok)
    begin
        display(tt,"Loading table PRODUCT ... ")
        ;if (%product_load_bulk(dbchn,errtxt,1,tt)) then
		if (%product_load_bulk(dbchn,len,errtxt)) then
			writes(tt,"done ... " + %string(len) + " rows inserted")
        else
        begin
            writes(tt,%atrim(errtxt))
            clear ok
        end
    end

    if (ok)
    begin
        display(tt,"Loading table ORDER_HEADER ... ")
        ;if (%order_header_load_bulk(dbchn,errtxt,1,tt)) then
		if (%order_header_load_bulk(dbchn,len,errtxt)) then
			writes(tt,"done ... " + %string(len) + " rows inserted")
        else
        begin
            writes(tt,%atrim(errtxt))
            clear ok
        end
    end

    if (ok)
    begin
        display(tt,"Loading table ORDER_LINE ... ")
        ;if (%order_line_load_bulk(dbchn,errtxt,1,tt)) then
		if (%order_line_load_bulk(dbchn,len,errtxt)) then
			writes(tt,"done ... " + %string(len) + " rows inserted")
        else
        begin
            writes(tt,%atrim(errtxt))
            clear ok
        end
    end

    ;---------------------------------------------------------------------------
    ; Disconnect from the database

    if (dbinit)
    begin
        display(tt,"Disconnecting from database ... ")
        if (%ssc_release(dbchn)==SSQL_FAILURE) then
        begin
            clear ok
            if (%ssc_getemsg(dbchn,errtxt,len)==SSQL_FAILURE) then
                writes(tt,"Failed to release database channel!")
            else
            begin
                writes(tt,"Failed to release database channel!\n")
                writes(tt,errtxt(1:len))
            end
        end
        else
            writes(tt,"done")
    end

    ;---------------------------------------------------------------------------
    ;All done

    display(tt,"Press a key: ")
    accept(tt,errtxt)

    close tt
    stop

.end

