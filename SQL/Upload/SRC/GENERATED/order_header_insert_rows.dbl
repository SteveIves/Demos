;;*****************************************************************************
;;
;; Routine:     order_header_insert_rows
;;
;; Author:      Steve Ives
;;
;; Company:     Synergex Professional Services Group
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen V4.3.5.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code. This text
;; must remain unaltered in this file at all times. Possession or use of this
;; code, or any modified version of this code, indicates your acceptance of
;; these conditions.
;;
;;*****************************************************************************
;;
;; Possible return values from this routine are:
;;
;;  true    Rows inserted
;;  false   Error (see a_errtxt)
;;
function order_header_insert_rows ,^val

    required in  a_dbchn    ,int    ;;Connected database channel
    required in  a_data     ,int    ;;Memory handle with records to insert
    optional out a_errtxt   ,a      ;;Error text
    optional out a_exception,int    ;;Handle to return exception records
    optional in  a_terminal ,int    ;;Terminal number channel to log errors on
    endparams

    .include "CONNECTDIR:ssql.def"
    .include "ORDER_HEADER" repository, stack record="order_header"
    .include "ORDER_HEADER" repository, structure="inpbuf", nofields

    external function
        IsNumeric   ,^val
    endexternal

    .define EXCEPTION_BUFSZ 100

    stack record local_data
        ok          ,boolean    ;;Return status
        dberror     ,int        ;;Database error number
        rows        ,int        ;;Number of rows to insert
        cursor      ,int        ;;Database cursor
        cnt         ,int        ;;Generic counter
        transaction ,int        ;;Transaction in progress
        length      ,int        ;;Length of a string
        ex_ms       ,int        ;;Size of exception array
        ex_mc       ,int        ;;Items in exception array
        continue    ,int        ;;Continue after an error
        errtxt      ,a255       ;;Error message text
    endrecord

    static record
        sql         ,string     ;;SQL statement
    endrecord

proc

    init local_data
    ok = true

    if (^passed(a_exception)&&a_exception)
        clear a_exception

    ;;-------------------------------------------------------------------------
    ;;Figure out how many rows to insert
    ;;
    rows = (%mem_proc(DM_GETSIZE,a_data)/^size(order_header))

    ;;-------------------------------------------------------------------------
    ;;Start a database transaction
    ;;
    if (%ssc_commit(a_dbchn,SSQL_TXON)==SSQL_NORMAL) then
        transaction=1
    else
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to start transaction"
    end

    ;;-------------------------------------------------------------------------
    ;;Open a cursor for the INSERT statement
    ;;
    if (ok)
    begin
        if (!(a)sql)
        begin
            sql = "INSERT INTO ORDER_HEADER ("
            & + "ORDER_NUMBER,"
            & + "ORDER_DATE,"
            & + "STATUS,"
            & + "SHIP_DATE,"
            & + "CUSTOMER,"
            & + "DELIVERY_DATE,"
            & + "CUSTOMER_ORDER_REF,"
            & + "GOODS_VALUE,"
            & + "TAX_VALUE,"
            & + "SHIPPING_VALUE,"
            & + "GIFT_WRAP,"
            & + "GIFT_MESSAGE"
            & + ") VALUES(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12)"
        end

        if (%ssc_open(a_dbchn,cursor,(a)sql,SSQL_NONSEL,SSQL_STANDARD)==SSQL_FAILURE)
        begin
            ok = true
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to open cursor"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Bind the host variables for data to be inserted
    ;;
    if (ok)
    begin
        if (%ssc_bind(a_dbchn,cursor,12,
		&    order_header.order_number,
		&    ^a(order_header.order_date),
		&    order_header.status,
		&    ^a(order_header.ship_date),
		&    order_header.customer,
		&    ^a(order_header.delivery_date),
		&    order_header.customer_order_ref,
		&    order_header.goods_value,
		&    order_header.tax_value,
		&    order_header.shipping_value,
		&    order_header.gift_wrap,
		&    order_header.gift_message
        &   )==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to bind variables"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Insert the rows into the database
    ;;
    if (ok)
    begin
        for cnt from 1 thru rows
        begin
            ;;Load data into bound record
            order_header = ^m(inpbuf[cnt],a_data)

            ;;Clean up the data
            if ((!order_header.order_number)||(!%IsNumeric(^a(order_header.order_number))))
                clear order_header.order_number
            if ((!order_header.order_date)||(!%IsNumeric(^a(order_header.order_date))))
                ^a(order_header.order_date(1:1))=%char(0)
            order_header.status=%atrim(order_header.status)+%char(0)
            if ((!order_header.ship_date)||(!%IsNumeric(^a(order_header.ship_date))))
                ^a(order_header.ship_date(1:1))=%char(0)
            order_header.customer=%atrim(order_header.customer)+%char(0)
            if ((!order_header.delivery_date)||(!%IsNumeric(^a(order_header.delivery_date))))
                ^a(order_header.delivery_date(1:1))=%char(0)
            order_header.customer_order_ref=%atrim(order_header.customer_order_ref)+%char(0)
            if ((!order_header.goods_value)||(!%IsNumeric(^a(order_header.goods_value))))
                clear order_header.goods_value
            if ((!order_header.tax_value)||(!%IsNumeric(^a(order_header.tax_value))))
                clear order_header.tax_value
            if ((!order_header.shipping_value)||(!%IsNumeric(^a(order_header.shipping_value))))
                clear order_header.shipping_value
            if ((!order_header.gift_wrap)||(!%IsNumeric(^a(order_header.gift_wrap))))
                clear order_header.gift_wrap
            order_header.gift_message=%atrim(order_header.gift_message)+%char(0)

            ;;Execute the statement
            if (%ssc_execute(a_dbchn,cursor,SSQL_STANDARD)==SSQL_FAILURE)
            begin
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to execute SQL statement"

                clear continue

                ;;Are we logging errors?
                if (^passed(a_terminal)&&(a_terminal))
                begin
                    writes(a_terminal,errtxt(1:length))
                    continue=1
                end

                ;;Are we processing exceptions?
                if (^passed(a_exception))
                begin
                    if (ex_mc==ex_ms)
                    begin
                        if (!a_exception) then
                            a_exception = %mem_proc(DM_ALLOC|DM_STATIC,^size(inpbuf)*(ex_ms=EXCEPTION_BUFSZ))
                        else
                            a_exception = %mem_proc(DM_RESIZ,^size(inpbuf)*(ex_ms+=EXCEPTION_BUFSZ),a_exception)
                    end
                    ^m(inpbuf[ex_mc+=1],a_exception)=order_header
                    continue=1
                end

                if (continue) then
                    nextloop
                else
                begin
                    ok = false
                    exitloop
                end
            end
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Close the database cursor
    ;;
    if (cursor)
    begin
        if (%ssc_close(a_dbchn,cursor)==SSQL_FAILURE)
        begin
            if (ok)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to close cursor"
            end
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Commit or rollback the transaction
    ;;
    if (transaction)
    begin
        if (ok) then
        begin
            ;;Success, commit the transaction
            if (%ssc_commit(a_dbchn,SSQL_TXOFF)==SSQL_FAILURE)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to commit transaction"
            end
        end
        else
        begin
            ;;There was an error, rollback the transaction
            xcall ssc_rollback(a_dbchn,SSQL_TXOFF)
        end
    end

    ;;-------------------------------------------------------------------------
    ;;If we're returning exceptions then resize the buffer to the correct size
    ;;
    if (^passed(a_exception)&&a_exception)
        a_exception = %mem_proc(DM_RESIZ,^size(inpbuf)*ex_mc,a_exception)

    ;;-------------------------------------------------------------------------
    ;;If there was an error message, return it to the calling routine
    ;;
    if (^passed(a_errtxt))
    begin
        if (ok) then
            clear a_errtxt
        else
            a_errtxt=%atrim(errtxt)+" [Database error "+%string(dberror)+"]"
    end

    freturn ok

endfunction
