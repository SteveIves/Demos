;;*****************************************************************************
;;
;; Routine:     customer_create
;;
;; Author:      "Steve Ives"
;;
;; Company:     "Synergex Professional Services Group"
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen. Any changes that you make
;;              to this file will be lost if the code is regenerated.
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code. This text
;; must remain unaltered in this file at all times. Possession or use of this
;; code, or any modified version of this code, indicates your acceptance of
;; these conditions.
;;
;;*****************************************************************************
;;
;; Possible return values from this routine are:
;;
;;   true   Table created
;;   false  Error (see a_errtxt)
;;
function customer_create ,^val

    required in  a_dbchn    ,int    ;;Connected database channel
    optional out a_errtxt   ,a      ;;Error text
    endparams

    .include "CONNECTDIR:ssql.def"

    stack record local_data
        ok          ,boolean    ;;Return status
        dberror     ,int        ;;Database error number
        cursor      ,int        ;;Database cursor
        length      ,int        ;;Length of a string
        transaction ,int        ;;Transaction in process
        errtxt      ,a256       ;;Returned error message text
    endrecord

	literal 
		sql_create, a*, "CREATE TABLE CUSTOMER ("
		& "ACCOUNT VARCHAR(8) NOT NULL,"
		& "COMPANY VARCHAR(40) NOT NULL,"
		& "STREET VARCHAR(40) NOT NULL,"
		& "CITY VARCHAR(25) NOT NULL,"
		& "STATE VARCHAR(2) NOT NULL,"
		& "ZIP DECIMAL(5) NOT NULL,"
		& "PHONE_NUMBER DECIMAL(10),"
		& "FAX_NUMBER DECIMAL(10),"
		& "MOBILE_NUMBER DECIMAL(10),"
		& "PAGER_NUMBER DECIMAL(10),"
		& "EMAIL1 VARCHAR(80),"
		& "EMAIL2 VARCHAR(80),"
		& "DATE_OPENED DATE NOT NULL,"
		& "DATE_HOLD DATE,"
		& "DATE_CLOSED DATE,"
		& "STATUS DECIMAL(1) NOT NULL,"
		& "LIMIT DECIMAL(10,2) NOT NULL,"
		& "BALANCE DECIMAL(10,2),"
		& "CARD_NUMBER VARCHAR(16),"
		& "CARD_EXPIRY DECIMAL(4),"
		& "CARD_NAME VARCHAR(25),"
		& "TIMESTAMP,"
		& "CONSTRAINT PK_CUSTOMER PRIMARY KEY CLUSTERED (ACCOUNT ASC))"
		sql_index1, a*, "CREATE  INDEX IX_CUSTOMER_COMPANY ON CUSTOMER(COMPANY ASC)"
		sql_index2, a*, "CREATE  INDEX IX_CUSTOMER_STATE ON CUSTOMER(STATE ASC)"
		sql_index3, a*, "CREATE  INDEX IX_CUSTOMER_ZIP ON CUSTOMER(ZIP ASC)"
		sql_index4, a*, "CREATE  INDEX IX_CUSTOMER_STATUS ON CUSTOMER(STATUS ASC)"
	endliteral
	
proc

    init local_data
    ok = true

    ;;-------------------------------------------------------------------------
    ;;Start a database transaction
    ;;
    if (%ssc_commit(a_dbchn,SSQL_TXON)==SSQL_NORMAL) then
        transaction=1
    else
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to start transaction"
    end

    ;;-------------------------------------------------------------------------
    ;;Create the database table and primary key
    ;;
    if (ok)
    begin
		if (%ssc_open(a_dbchn,cursor,sql_create,SSQL_NONSEL)==SSQL_NORMAL) then 
		begin
			call execute_cursor
			call close_cursor
		end
		else
			call open_cursor_error
    end

    ;;-------------------------------------------------------------------------
    ;;Create index 1 (Company name)
    ;;
    if (ok)
    begin
		if (%ssc_open(a_dbchn,cursor,sql_index1,SSQL_NONSEL)==SSQL_NORMAL) then 
		begin
			call execute_cursor
			call close_cursor
		end
		else
			call open_cursor_error
    end

    ;;-------------------------------------------------------------------------
    ;;Create index 2 (State)
    ;;
    if (ok)
    begin
		if (%ssc_open(a_dbchn,cursor,sql_index2,SSQL_NONSEL)==SSQL_NORMAL) then 
		begin
			call execute_cursor
			call close_cursor
		end
		else
			call open_cursor_error
    end

    ;;-------------------------------------------------------------------------
    ;;Create index 3 (Zip code)
    ;;
    if (ok)
    begin
		if (%ssc_open(a_dbchn,cursor,sql_index3,SSQL_NONSEL)==SSQL_NORMAL) then 
		begin
			call execute_cursor
			call close_cursor
		end
		else
			call open_cursor_error
    end

    ;;-------------------------------------------------------------------------
    ;;Create index 4 (Account status)
    ;;
    if (ok)
    begin
		if (%ssc_open(a_dbchn,cursor,sql_index4,SSQL_NONSEL)==SSQL_NORMAL) then 
		begin
			call execute_cursor
			call close_cursor
		end
		else
			call open_cursor_error
    end

    ;;-------------------------------------------------------------------------
    ;;Grant access permissions
    ;;
    if (ok)
    begin
		if (%ssc_open(a_dbchn,cursor,"GRANT ALL ON CUSTOMER TO PUBLIC",SSQL_NONSEL)==SSQL_NORMAL) then
		begin
			call execute_cursor
			call close_cursor
		end
		else
			call open_cursor_error
    end

    ;;-------------------------------------------------------------------------
    ;;Commit or rollback the transaction
    ;;
    if (transaction)
    begin
        if (ok) then
        begin
            ;;Success, commit the transaction
            if (%ssc_commit(a_dbchn,SSQL_TXOFF)==SSQL_FAILURE)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to commit transaction"
            end
        end
        else
        begin
            ;;There was an error, rollback the transaction
            xcall ssc_rollback(a_dbchn,SSQL_TXOFF)
        end
    end

    ;;-------------------------------------------------------------------------
    ;;If there was an error message, return it to the calling routine
    ;;
    if (^passed(a_errtxt))
    begin
        if (ok) then
            clear a_errtxt
        else
            a_errtxt=errtxt
    end

    freturn ok

;;-----------------------------------------------------------------------------
;;Execute a cursor
;;
execute_cursor,

    if (%ssc_execute(a_dbchn,cursor,SSQL_STANDARD)==SSQL_FAILURE)
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to execute SQL statement"
    end

    return

;;-----------------------------------------------------------------------------
;;Close a cursor
;;
close_cursor,

    if (cursor)
    begin
        if (%ssc_close(a_dbchn,cursor)==SSQL_FAILURE)
        begin
            if (ok)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to close cursor"
            end
        end
        clear cursor
    end

    return

;------------------------------------------------------------------------------
;;Process an error
;;
open_cursor_error,

	ok = false
	if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
		errtxt="Failed to open cursor"

    return

endfunction
