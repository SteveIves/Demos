;;*****************************************************************************
;;
;; Routine:     order_header_create
;;
;; Author:      "Steve Ives" (stevei)
;;
;; Company:     "Synergex"
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen V4.2.12.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code. This text
;; must remain unaltered in this file at all times. Possession or use of this
;; code, or any modified version of this code, indicates your acceptance of
;; these conditions.
;;
;;*****************************************************************************
;;
;; Possible return values from this routine are:
;;
;;   true   Table created
;;   false  Error (see a_errtxt)
;;
function order_header_create ,^val

    required in  a_dbchn    ,int    ;;Connected database channel
    optional out a_errtxt   ,a      ;;Error text
    endparams

    .include "CONNECTDIR:ssql.def"

    stack record local_data
        ok          ,boolean    ;;Return status
        dberror     ,int        ;;Database error number
        cursor      ,int        ;;Database cursor
        length      ,int        ;;Length of a string
        transaction ,int        ;;Transaction in process
        errtxt      ,a256       ;;Returned error message text
        sql         ,string     ;;SQL statement
    endrecord

proc

    init local_data
    ok = true

    ;;-------------------------------------------------------------------------
    ;;Start a database transaction
    ;;
    if (%ssc_commit(a_dbchn,SSQL_TXON)==SSQL_NORMAL) then
        transaction=1
    else
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to start transaction"
    end

    ;;-------------------------------------------------------------------------
    ;;Create the database table and primary key
    ;;
    if (ok)
    begin
        sql = "CREATE TABLE ORDER_HEADER ("
        & + "ORDER_NUMBER DECIMAL(8) NOT NULL,"
        & + "ORDER_DATE DATE NOT NULL,"
        & + "STATUS VARCHAR(1),"
        & + "SHIP_DATE DATE,"
        & + "CUSTOMER VARCHAR(8) NOT NULL,"
        & + "DELIVERY_DATE DATE,"
        & + "CUSTOMER_ORDER_REF VARCHAR(20),"
        & + "GOODS_VALUE DECIMAL(8,2),"
        & + "TAX_VALUE DECIMAL(8,2),"
        & + "SHIPPING_VALUE DECIMAL(8,2),"
        & + "GIFT_WRAP DECIMAL(1),"
        & + "GIFT_MESSAGE VARCHAR(60),"
        & + "TIMESTAMP,"
        & + "CONSTRAINT PK_ORDER_HEADER PRIMARY KEY CLUSTERED"
        & + " (ORDER_NUMBER ASC))"

        call open_cursor

        if (ok)
        begin
            call execute_cursor
            call close_cursor
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Create index 1 (Customer ID)
    ;;
    if (ok)
    begin
        sql = "CREATE INDEX IX_ORDER_HEADER_CUSTOMER "
        &     "ON ORDER_HEADER(CUSTOMER ASC)"

        call open_cursor

        if (ok)
        begin
            call execute_cursor
            call close_cursor
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Create index 2 (Status)
    ;;
    if (ok)
    begin
        sql = "CREATE INDEX IX_ORDER_HEADER_STATUS "
        &     "ON ORDER_HEADER(STATUS ASC)"

        call open_cursor

        if (ok)
        begin
            call execute_cursor
            call close_cursor
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Create index 3 (Customer reference)
    ;;
    if (ok)
    begin
        sql = "CREATE INDEX IX_ORDER_HEADER_CUSREF "
        &     "ON ORDER_HEADER(CUSTOMER_ORDER_REF ASC)"

        call open_cursor

        if (ok)
        begin
            call execute_cursor
            call close_cursor
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Grant access permissions
    ;;
    if (ok)
    begin
        sql = "GRANT ALL ON ORDER_HEADER TO PUBLIC"

        call open_cursor

        if (ok)
        begin
            call execute_cursor
            call close_cursor
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Commit or rollback the transaction
    ;;
    if (transaction)
    begin
        if (ok) then
        begin
            ;;Success, commit the transaction
            if (%ssc_commit(a_dbchn,SSQL_TXOFF)==SSQL_FAILURE)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to commit transaction"
            end
        end
        else
        begin
            ;;There was an error, rollback the transaction
            xcall ssc_rollback(a_dbchn,SSQL_TXOFF)
        end
    end

    ;;-------------------------------------------------------------------------
    ;;If there was an error message, return it to the calling routine
    ;;
    if (^passed(a_errtxt))
    begin
        if (ok) then
            clear a_errtxt
        else
            a_errtxt=errtxt
    end

    freturn ok

;------------------------------------------------------------------------------
;;Open a cursor
;;
open_cursor,

    if (%ssc_open(a_dbchn,cursor,(a)sql,SSQL_NONSEL)==SSQL_FAILURE)
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to open cursor"
    end

    return

;;-----------------------------------------------------------------------------
;;Execute a cursor
;;
execute_cursor,

    if (%ssc_execute(a_dbchn,cursor,SSQL_STANDARD)==SSQL_FAILURE)
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to execute SQL statement"
    end

    return

;;-----------------------------------------------------------------------------
;;Close a cursor
;;
close_cursor,

    if (cursor)
    begin
        if (%ssc_close(a_dbchn,cursor)==SSQL_FAILURE)
        begin
            if (ok)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to close cursor"
            end
        end
        clear cursor
    end

    return

endfunction
