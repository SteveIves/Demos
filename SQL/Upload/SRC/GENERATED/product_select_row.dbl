;;*****************************************************************************
;;
;; Routine:     product_select_row
;;
;; Author:      "Steve Ives"
;;
;; Company:     "Synergex Professional Services Group"
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen. Any changes that you make
;;              to this file will be lost if the code is regenerated.
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code. This text
;; must remain unaltered in this file at all times. Possession or use of this
;; code, or any modified version of this code, indicates your acceptance of
;; these conditions.
;;
;;******************************************************************************
;;
;; Possible return values from this routine are:
;;
;;   true   Success, row returned
;;   false  Error, see a_errtxt
;;
function product_select_row ,^val

    required in  a_dbchn    ,int    ;Connected database channel
	optional in  a_sku ,a
    required out a_data     ,a      ;Record
    optional out a_errtxt   ,a      ;Error text
    endparams

    .include "CONNECTDIR:ssql.def"
    .include "PRODUCT" repository, stack record="product"

    stack record local_data
        ok      ,boolean    ;;OK to continue
        dberror ,int        ;;Database error number
        cursor  ,int        ;;Database cursor
        length  ,int        ;;Length of a string
        errtxt  ,a256       ;;Error message text
    endrecord

    literal 
        sql, a*, "SELECT "
        & "SKU,"
        & "PRODUCT_GROUP,"
        & "DESCRIPTION,"
        & "PRICE_GROUP,"
        & "SELLING_PRICE,"
        & "LAST_SALE,"
        & "LAST_COST_PRICE,"
        & "AVERAGE_COST_PRICE,"
        & "QTY_IN_STOCK,"
        & "QTY_ALLOCATED,"
        & "QTY_IN_TRANSIT,"
        & "QTY_ON_ORDER,"
        & "REFERENCE,"
        & "PUBLISHER,"
        & "AUTHOR,"
        & "TYPE,"
        & "RELEASE_DATE,"
        & "RATING"
        & " FROM PRODUCT"
        & " WHERE  SKU=:1 "
    endliteral

proc

    init product,local_data
    ok = true

    ;;-------------------------------------------------------------------------
    ;;Open a cursor for the SELECT statement
    ;;
    if (%ssc_open(a_dbchn,cursor,sql,SSQL_SELECT,,1,a_sku)==SSQL_FAILURE)
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to open cursor"
    end

    ;;-------------------------------------------------------------------------
    ;;Bind host variables to receive the data
    ;;
    if (ok)
    begin
        if (%ssc_define(a_dbchn,cursor,18,
		&    product.sku,
		&    product.product_group,
		&    product.description,
		&    product.price_group,
		&    product.selling_price,
		&    ^a(product.last_sale),
		&    product.last_cost_price,
		&    product.average_cost_price,
		&    product.qty_in_stock,
		&    product.qty_allocated,
		&    product.qty_in_transit,
		&    product.qty_on_order,
		&    product.reference,
		&    product.publisher,
		&    product.author,
		&    product.type,
		&    ^a(product.release_date),
		&    product.rating
        &   )==SSQL_FAILURE)
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to bind variables"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Move data to host variables
    ;;
    if (ok)
    begin
        if (%ssc_move(a_dbchn,cursor,1)==SSQL_NORMAL) then
            a_data = product
        else
        begin
            ok = false
            if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                errtxt="Failed to execute SQL statement"
        end
    end

    ;;-------------------------------------------------------------------------
    ;;Close the database cursor
    ;;
    if (cursor)
    begin
        if (%ssc_close(a_dbchn,cursor)==SSQL_FAILURE)
        begin
            if (ok)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to close cursor"
            end
        end
    end

    ;;-------------------------------------------------------------------------
    ;;If there was an error message, return it to the calling routine
    ;;
    if (^passed(a_errtxt))
    begin
        if (ok) then
            clear a_errtxt
        else
            a_errtxt=errtxt
    end

    freturn ok

endfunction
