;;*****************************************************************************
;;
;; Routine:     product_create
;;
;; Author:      "Steve Ives"
;;
;; Company:     "Synergex Professional Services Group"
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen. Any changes that you make
;;              to this file will be lost if the code is regenerated.
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code. This text
;; must remain unaltered in this file at all times. Possession or use of this
;; code, or any modified version of this code, indicates your acceptance of
;; these conditions.
;;
;;*****************************************************************************
;;
;; Possible return values from this routine are:
;;
;;   true   Table created
;;   false  Error (see a_errtxt)
;;
function product_create ,^val

    required in  a_dbchn    ,int    ;;Connected database channel
    optional out a_errtxt   ,a      ;;Error text
    endparams

    .include "CONNECTDIR:ssql.def"

    stack record local_data
        ok          ,boolean    ;;Return status
        dberror     ,int        ;;Database error number
        cursor      ,int        ;;Database cursor
        length      ,int        ;;Length of a string
        transaction ,int        ;;Transaction in process
        errtxt      ,a256       ;;Returned error message text
    endrecord

	literal 
		sql_create, a*, "CREATE TABLE PRODUCT ("
		& "SKU VARCHAR(10) NOT NULL,"
		& "PRODUCT_GROUP VARCHAR(10) NOT NULL,"
		& "DESCRIPTION VARCHAR(80) NOT NULL,"
		& "PRICE_GROUP VARCHAR(10),"
		& "SELLING_PRICE DECIMAL(6,2),"
		& "LAST_SALE DATE,"
		& "LAST_COST_PRICE DECIMAL(10,4),"
		& "AVERAGE_COST_PRICE DECIMAL(10,4),"
		& "QTY_IN_STOCK DECIMAL(6),"
		& "QTY_ALLOCATED DECIMAL(6),"
		& "QTY_IN_TRANSIT DECIMAL(6),"
		& "QTY_ON_ORDER DECIMAL(6),"
		& "REFERENCE VARCHAR(20),"
		& "PUBLISHER VARCHAR(50),"
		& "AUTHOR VARCHAR(50),"
		& "TYPE VARCHAR(20),"
		& "RELEASE_DATE DATE NOT NULL,"
		& "RATING VARCHAR(6),"
		& "TIMESTAMP,"
		& "CONSTRAINT PK_PRODUCT PRIMARY KEY CLUSTERED (SKU ASC))"
		sql_index1, a*, "CREATE  INDEX IX_PRODUCT_PRODUCT_GROUP ON PRODUCT(PRODUCT_GROUP ASC)"
		sql_index2, a*, "CREATE  INDEX IX_PRODUCT_DESCRIPTION ON PRODUCT(DESCRIPTION ASC)"
		sql_index3, a*, "CREATE  INDEX IX_PRODUCT_PRICE_GROUP ON PRODUCT(PRICE_GROUP ASC)"
		sql_index4, a*, "CREATE  INDEX IX_PRODUCT_AUTHOR ON PRODUCT(AUTHOR ASC)"
		sql_index5, a*, "CREATE  INDEX IX_PRODUCT_PUBLISHER ON PRODUCT(PUBLISHER ASC)"
		sql_index6, a*, "CREATE  INDEX IX_PRODUCT_REFERENCE ON PRODUCT(REFERENCE ASC)"
	endliteral
	
proc

    init local_data
    ok = true

    ;;-------------------------------------------------------------------------
    ;;Start a database transaction
    ;;
    if (%ssc_commit(a_dbchn,SSQL_TXON)==SSQL_NORMAL) then
        transaction=1
    else
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to start transaction"
    end

    ;;-------------------------------------------------------------------------
    ;;Create the database table and primary key
    ;;
    if (ok)
    begin
		if (%ssc_open(a_dbchn,cursor,sql_create,SSQL_NONSEL)==SSQL_NORMAL) then 
		begin
			call execute_cursor
			call close_cursor
		end
		else
			call open_cursor_error
    end

    ;;-------------------------------------------------------------------------
    ;;Create index 1 (Group/product)
    ;;
    if (ok)
    begin
		if (%ssc_open(a_dbchn,cursor,sql_index1,SSQL_NONSEL)==SSQL_NORMAL) then 
		begin
			call execute_cursor
			call close_cursor
		end
		else
			call open_cursor_error
    end

    ;;-------------------------------------------------------------------------
    ;;Create index 2 (Description)
    ;;
    if (ok)
    begin
		if (%ssc_open(a_dbchn,cursor,sql_index2,SSQL_NONSEL)==SSQL_NORMAL) then 
		begin
			call execute_cursor
			call close_cursor
		end
		else
			call open_cursor_error
    end

    ;;-------------------------------------------------------------------------
    ;;Create index 3 (Price group)
    ;;
    if (ok)
    begin
		if (%ssc_open(a_dbchn,cursor,sql_index3,SSQL_NONSEL)==SSQL_NORMAL) then 
		begin
			call execute_cursor
			call close_cursor
		end
		else
			call open_cursor_error
    end

    ;;-------------------------------------------------------------------------
    ;;Create index 4 (Author)
    ;;
    if (ok)
    begin
		if (%ssc_open(a_dbchn,cursor,sql_index4,SSQL_NONSEL)==SSQL_NORMAL) then 
		begin
			call execute_cursor
			call close_cursor
		end
		else
			call open_cursor_error
    end

    ;;-------------------------------------------------------------------------
    ;;Create index 5 (Publisher)
    ;;
    if (ok)
    begin
		if (%ssc_open(a_dbchn,cursor,sql_index5,SSQL_NONSEL)==SSQL_NORMAL) then 
		begin
			call execute_cursor
			call close_cursor
		end
		else
			call open_cursor_error
    end

    ;;-------------------------------------------------------------------------
    ;;Create index 6 (Reference)
    ;;
    if (ok)
    begin
		if (%ssc_open(a_dbchn,cursor,sql_index6,SSQL_NONSEL)==SSQL_NORMAL) then 
		begin
			call execute_cursor
			call close_cursor
		end
		else
			call open_cursor_error
    end

    ;;-------------------------------------------------------------------------
    ;;Grant access permissions
    ;;
    if (ok)
    begin
		if (%ssc_open(a_dbchn,cursor,"GRANT ALL ON PRODUCT TO PUBLIC",SSQL_NONSEL)==SSQL_NORMAL) then
		begin
			call execute_cursor
			call close_cursor
		end
		else
			call open_cursor_error
    end

    ;;-------------------------------------------------------------------------
    ;;Commit or rollback the transaction
    ;;
    if (transaction)
    begin
        if (ok) then
        begin
            ;;Success, commit the transaction
            if (%ssc_commit(a_dbchn,SSQL_TXOFF)==SSQL_FAILURE)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to commit transaction"
            end
        end
        else
        begin
            ;;There was an error, rollback the transaction
            xcall ssc_rollback(a_dbchn,SSQL_TXOFF)
        end
    end

    ;;-------------------------------------------------------------------------
    ;;If there was an error message, return it to the calling routine
    ;;
    if (^passed(a_errtxt))
    begin
        if (ok) then
            clear a_errtxt
        else
            a_errtxt=errtxt
    end

    freturn ok

;;-----------------------------------------------------------------------------
;;Execute a cursor
;;
execute_cursor,

    if (%ssc_execute(a_dbchn,cursor,SSQL_STANDARD)==SSQL_FAILURE)
    begin
        ok = false
        if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
            errtxt="Failed to execute SQL statement"
    end

    return

;;-----------------------------------------------------------------------------
;;Close a cursor
;;
close_cursor,

    if (cursor)
    begin
        if (%ssc_close(a_dbchn,cursor)==SSQL_FAILURE)
        begin
            if (ok)
            begin
                ok = false
                if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
                    errtxt="Failed to close cursor"
            end
        end
        clear cursor
    end

    return

;------------------------------------------------------------------------------
;;Process an error
;;
open_cursor_error,

	ok = false
	if (%ssc_getemsg(a_dbchn,errtxt,length,,dberror)==SSQL_FAILURE)
		errtxt="Failed to open cursor"

    return

endfunction
