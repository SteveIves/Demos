import Synergex.SynergyDE.IOExtensions
import Synergex.SynergyDE.Select

namespace SynPSG.ReplicationDemo

    .include "EMPLOYEE" repository, structure="strEmployee", end

    ;;-------------------------------------------------------------------------
    ;;I/O hooks class for DAT:EMPLOYEE.ISM
    ;;
    public sealed class EmployeeHooks extends IOHooks

        private mActive, boolean
        private mChannel, int, 0
        private employee, strEmployee

        ;;---------------------------------------------------------------------
        ;;Constructor

        public method EmployeeHooks
            required in          aChannel, n
            endparams
            parent(aChannel)
            record
                openMode, a3
            endrecord
        proc
            ;;Make sure the channel is to an indexed file and open in update mode
            xcall getfa(aChannel,"OMD",openMode)
            if (mActive = (openMode=="U:I"))
            begin
                ;;Record the channel number
                mChannel = aChannel
                ;;Initialize the last record cache for the channel
                LastRecordCache.Init(mChannel)
            end
        endmethod

        ;;---------------------------------------------------------------------
        ;;CLOSE hooks

        public override method close_pre_operation_hook, void
            required in          aFlags,  IOFlags
            endparams
        proc
            if (mActive)
                LastRecordCache.Clear(mChannel)
        endmethod

        ;;---------------------------------------------------------------------
        ;;DELETE hooks

        public override method delete_post_operation_hook, void
            required inout       aError,  int
            endparams
        proc
            if (mActive && !aError)
            begin
                ;;A record was just deleted. Replicate the change.
                employee = LastRecordCache.Retrieve(mChannel)
                xcall replicate(REPLICATION_INSTRUCTION.DELETE_ROW,"EMPLOYEE",employee.replication_key)
            end
        endmethod

        ;;---------------------------------------------------------------------
        ;;READ hooks

        public override method read_post_operation_hook, void
            required inout       aEmployee, a
            optional in mismatch aKey,    n
            optional in          aRfa,    a
            optional in          aKeynum, n
            required in          aFlags,  IOFlags
            required inout       aError,  int
            endparams
        proc
            if (mActive && !aError)
            begin
                ;;Record the record that was just read (to support delete)
                LastRecordCache.Update(mChannel,aEmployee)
            end
        endmethod

        ;;---------------------------------------------------------------------
        ;;READS hooks

        public override method reads_post_operation_hook ,void
            required inout       aEmployee, a
            optional in          aRfa,    a
            required in          aFlags,  IOFlags
            required inout       aError,  int
            endparams
        proc
            if (mActive && !aError)
            begin
                ;;Record the record that was just read (to support delete)
                LastRecordCache.Update(mChannel,aEmployee)
            end
        endmethod

        ;;---------------------------------------------------------------------
        ;;STORE hooks

        public override method store_pre_operation_hook, void
            required inout aEmployee, a
            required in          aFlags,  IOFlags
            endparams
        proc
            if (mActive)
            begin
                ;;Populate replication key with a %DATETIME value
                employee = aEmployee
                employee.replication_key = %datetime
                aEmployee = employee
            end
        endmethod

        public override method store_post_operation_hook, void
            required inout       aEmployee, a
            optional in          aRfa,    a
            required in          aFlags,  IOFlags
            required inout       aError,  int
            endparams
        proc
            if (mActive && !aError)
            begin
                ;;A new record was just created. Replicate the change.
                employee = aEmployee
                xcall replicate(REPLICATION_INSTRUCTION.CREATE_ROW,"EMPLOYEE",employee.replication_key)
            end
        endmethod

        ;;---------------------------------------------------------------------
        ;;WRITE hooks

        public override method write_post_operation_hook, void
            required inout       aEmployee, a
            optional in          aRecnum, n
            optional in          aRfa,    a
            required in          aFlags,  IOFlags
            required inout       aError,  int
            endparams
        proc
            if (mActive && !aError)
            begin
                ;;A record was just updated. If it changed then replicate the change.
                if (LastRecordCache.HasChanged(mChannel,aEmployee))
                begin
                    employee = aEmployee
                    xcall replicate(REPLICATION_INSTRUCTION.UPDATE_ROW,"EMPLOYEE",employee.replication_key)
                end
            end
        endmethod

    endclass

endnamespace
