<CODEGEN_FILENAME>DatabaseConnection.dbl</CODEGEN_FILENAME>
;//****************************************************************************
;//
;// Title:       DatabaseTableConnection.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: This template generates a class which can be used to create
;//              a connection to a SQL Server database. The resulting class
;//              is used by the classes generated from the DatabaseTable
;//              and DatabaseTableMapped templates.
;//
;// Date:        12th May 2012
;//
;// Author:      Steve Ives, Synergex Professional Services Group
;//              http://www.synergex.com
;//
;//****************************************************************************
;//
;// Copyright (c) 2012, Synergex International, Inc.
;// All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;;*****************************************************************************
;;
;; Title:       DatabaseConnection.dbl
;;
;; Type:        Class
;;
;; Description: Provides the ability to connect to, and represents a connection
;;              to a SQL Server database.
;;
;; Author:      <AUTHOR>
;;
;; Company:     <COMPANY>
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by <CODEGEN_VERSION>.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;;*****************************************************************************
;;
.include "CONNECTDIR:ssql.def"

namespace <NAMESPACE>

    public class DatabaseConnection

        private mConnectString, string
        private mConnected, boolean, false
        private mChannel, int

        public method DatabaseConnection
            required in aChannel, int
            required in aConnectString, string
            optional in aMaxCursors, int
            optional in aMaxColumns, int
            optional in aBufferSize, int
            optional in aDbCursors, int
            endparams
            record
                maxCursors, int
                maxColumns, int
                bufferSize, int
                dbCursors, int
            endrecord
        proc

            mChannel = aChannel
            mConnectString = aConnectString

            if (^passed(aMaxCursors)&&aMaxCursors) then
                maxCursors = aMaxCursors
            else
                maxCursors = 128

            if (^passed(aMaxColumns)&&aMaxColumns) then
                maxColumns = aMaxColumns
            else
                maxColumns = 254

            if (^passed(aBufferSize)&&aBufferSize) then
                bufferSize = aBufferSize
            else
                bufferSize = 32768

            if (^passed(aDbCursors)&&aDbCursors) then
                dbCursors = aDbCursors
            else
                dbCursors = maxCursors

            ;Initialize SQL Connection
            begin
                data sts, int
                .ifdef OS_VMS
                xcall init_ssql
                .else
                sts=%option(48,1)
                .endc
            end

            ;Initialize a database channel
            if (ssc_init(mChannel,maxCursors,maxColumns,bufferSize,dbCursors)==SSQL_FAILURE)
                throw new Exception("Failed to initialize database channel")

            ;Connect to the database
            if (ssc_connect(mChannel,mConnectString)==SSQL_FAILURE)
            begin
                data errtxt, a512
                data tmpLen, int
                ssc_getemsg(mChannel,errtxt,tmpLen)
                throw new Exception("Failed to connect to database. Error was: "+errtxt(1:tmpLen))
            end

            mConnected = true

        endmethod

        method ~DatabaseConnection
            endparams
        proc
            if (mConnected)
                this.Disconnect()
        endmethod

        public property ConnectString, string
            method get
            proc
                mreturn mConnectString
            endmethod
        endproperty

        public method Disconnect, void
            endparams
        proc
            if (mConnected)
                ssc_release(mChannel)
        endmethod

        public property Channel, int
            method get
            proc
                mreturn mChannel
            endmethod
        endproperty

    endclass

endnamespace
