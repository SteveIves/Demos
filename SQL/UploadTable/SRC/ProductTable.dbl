;;*****************************************************************************
;;
;; Title:       ProductTable.dbl
;;
;; Type:        Class
;;
;; Description: This class provides the ability to interact with a SQL Server
;;              database table named Product using records defined
;;              by the repository structure PRODUCT, with underlying
;;              (mapped) records defined by the structure INVMAS
;;              and data stored in the file DAT:invmas.ism.
;;
;; Author:      CodeGen V4.2.10
;;
;; Company:     Synergex
;;
;; Created:     04/18/2013 at 17:36
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen V4.2.10.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;;*****************************************************************************
;;
.include "CONNECTDIR:ssql.def"

import System.Collections

namespace SqlUploadDemo

    .ifndef strProduct
    .include "PRODUCT" repository, public structure="strProduct", end
    .endc

    .ifndef strINVMAS
    .include "INVMAS" repository, public structure="strINVMAS", end
    .endc

    ;;; <summary>
    ;;; Class used to interact with the database table Product
    ;;; </summary>
    public class ProductTable extends DatabaseTableBase

        ;;SQL Statements
        private static mCreateTableStatement    ,string
        private static mInsertStatement         ,string
        private static mSelectByKeyStatement    ,string
        private static mSelectAllStatement      ,string
        private static mSelectWhereStatement    ,string
        private static mDeleteByKeyStatement    ,string

        ;;Defines the layout of the synergy record used to transfer data
        ;;to and from the database. Used with %ssc_strdef() and populated
        ;;by the loadRecordSpec() method which is called from the constructor
        private record recordSpec
            fieldCount          ,d3
            group fields        ,[18]a
                fieldType       ,a1         ;Field type (A/D/I)
                fieldSize       ,d5         ;Field length
                fieldDecimals   ,d2         ;Implied decimal places (for D)
            endgroup
        endrecord

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>
        ;;; <param name="aDb">DatabaseConnection object</returns>
        public method ProductTable
            required in aDb, @DatabaseConnection
            endparams
            parent(aDb)
        proc
            loadRecordSpec()
            loadSqlStatements()
        endmethod

        ;;; <summary>
        ;;; Create a Product table in the database
        ;;; </summary>
        ;;; <returns>True for success, false for failure</returns>
        public method Create, boolean
            endparams
            stack record local_data
                ok          ,boolean    ;;Return status
                cursor      ,int        ;;Database cursor
                transaction ,boolean    ;;Transaction in process
            endrecord
        proc
            init local_data
            ok = true

            ;;Start a new transaction
            if (ok = startTransaction())
                transaction = true

            ;;Create the database table and primary key
            if (ok)
            begin
                if (ok=openNonSelectCursor(mCreateTableStatement,cursor))
                begin
                    ok = executeNonSelectCursor(cursor)
                    closeCursor(cursor,ok)
                end
            end

            ;;Create index 1 (Group/product)
            if (ok)
            begin
                if (ok=openNonSelectCursor("CREATE INDEX IX_Product_ProductGroup ON Product(ProductGroup ASC)",cursor))
                begin
                    ok = executeNonSelectCursor(cursor)
                    closeCursor(cursor,ok)
                end
            end

            ;;Create index 2 (Description)
            if (ok)
            begin
                if (ok=openNonSelectCursor("CREATE INDEX IX_Product_Description ON Product(Description ASC)",cursor))
                begin
                    ok = executeNonSelectCursor(cursor)
                    closeCursor(cursor,ok)
                end
            end

            ;;Create index 3 (Price group)
            if (ok)
            begin
                if (ok=openNonSelectCursor("CREATE INDEX IX_Product_PriceGroup ON Product(PriceGroup ASC)",cursor))
                begin
                    ok = executeNonSelectCursor(cursor)
                    closeCursor(cursor,ok)
                end
            end

            ;;Create index 4 (Author)
            if (ok)
            begin
                if (ok=openNonSelectCursor("CREATE INDEX IX_Product_Author ON Product(Author ASC)",cursor))
                begin
                    ok = executeNonSelectCursor(cursor)
                    closeCursor(cursor,ok)
                end
            end

            ;;Create index 5 (Publisher)
            if (ok)
            begin
                if (ok=openNonSelectCursor("CREATE INDEX IX_Product_Publisher ON Product(Publisher ASC)",cursor))
                begin
                    ok = executeNonSelectCursor(cursor)
                    closeCursor(cursor,ok)
                end
            end

            ;;Create index 6 (Reference)
            if (ok)
            begin
                if (ok=openNonSelectCursor("CREATE INDEX IX_Product_Reference ON Product(Reference ASC)",cursor))
                begin
                    ok = executeNonSelectCursor(cursor)
                    closeCursor(cursor,ok)
                end
            end

            ;;Grant access permissions
            if (ok&&(ok=openNonSelectCursor("GRANT ALL ON Product TO PUBLIC",cursor)))
            begin
                ok = executeNonSelectCursor(cursor)
                closeCursor(cursor,ok)
            end

            ;;Commit or rollback the transaction
            if (transaction)
                ok = commitOrRollback(ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Deletes the Product table from the database
        ;;; </summary>
        ;;; <returns>True for success, false for failure</returns>
        public method Drop, boolean
            endparams
            stack record local_data
                ok          ,boolean    ;;Return status
                cursor      ,int        ;;Database cursor
                transaction ,boolean    ;;Transaction in progress
            endrecord
        proc

            init local_data
            ok = true

            ;;Start a database transaction
            if (ok = startTransaction())
                transaction = true

            ;;Open cursor for DROP TABLE statement
            ;;
            if (ok)
                ok=openNonSelectCursor("DROP TABLE Product",cursor)

            ;;Execute DROP TABLE statement
            ;;
            if (ok)
            begin
                if (!(ok = executeNonSelectCursor(cursor)))
                begin
                    data dbErrText, a1024
                    data length, int
                    if (%ssc_getemsg(mDb.Channel,dbErrText,length,,mErrorNumber)==SSQL_NORMAL)
                    begin
                        ;;Check if the error was that the table did not exist
                        if (mErrorNumber==-3701) then
                        begin
                            clear mErrorMessage
                            ok = true
                        end
                        else
                            mErrorMessage = atrim(dbErrText)
                    end
                end
            end

            ;;Close the cursor
            closeCursor(cursor,ok)

            ;;Commit or rollback the transaction
            if (transaction)
                ok = commitOrRollback(ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Deletes all data from the Product table in the database
        ;;; </summary>
        ;;; <returns>True for success, false for failure</returns>
        public method Clear, boolean
            endparams
            stack record local_data
                ok          ,boolean    ;;Return status
                cursor      ,int        ;;Database cursor
                transaction ,boolean    ;;Transaction in process
            endrecord
        proc

            init local_data
            ok = true

            ;;Start a database transaction
            if (ok = startTransaction())
                transaction = true

            ;;Open cursor for the SQL statement
            if (ok)
                ok = openNonSelectCursor("TRUNCATE TABLE Product",cursor)

            ;;Execute SQL statement
            if (ok)
                ok = executeNonSelectCursor(cursor)

            ;;Close the cursor
            closeCursor(cursor,ok)

            ;;Commit or rollback the transaction
            if (transaction)
                ok = commitOrRollback(ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Checks if the Product table exists in the database
        ;;; </summary>
        ;;; <returns>True if the table exists, false if not (or an error occurred)</returns>
        public method Exists, boolean
            endparams
            .include "PRODUCT" repository, stack record="product"
            stack record local_data
                ok          ,boolean    ;;Return value
                cursor      ,int        ;;Database cursor
                table_name  ,a128       ;;Retrieved table name
            endrecord
        proc

            init product,local_data

            ;;Open a cursor for the SELECT statement
            ;;
            ok = openSelectCursor("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='Product'",cursor)

            ;;Bind host variables to receive the data
            if (ok)
                if (%ssc_define(mDb.Channel,cursor,1,table_name)==SSQL_FAILURE)
                    ok = getDatabaseError("Failed to bind variable")

            ;;Move data to host variables
            if (ok)
                if (%ssc_move(mDb.Channel,cursor,1)==SSQL_FAILURE)
                    ok = false

            ;;Close the cursor
            closeCursor(cursor,ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Inserts a new row into the Product table in the database
        ;;; </summary>
        ;;; <param name="argProduct">Record containing data to insert</param>
        ;;; <returns>True for success, false for failure</returns>
        public method InsertRow, boolean
            required in argProduct, strProduct
            endparams
            stack record local_data
                ok              ,boolean    ;;Return status
                cursor          ,int        ;;Database cursor
                transaction     ,boolean    ;;Transaction in progress
                recProduct, strProduct
            endrecord
        proc

            init local_data
            ok = true

            ;;Start a database transaction
            if (ok = startTransaction())
                transaction = true

            ;;Open a cursor for the INSERT statement
            if (ok)
                ok = openNonSelectCursor(mInsertStatement,cursor)

            ;;Prepare a structure definition to define where the data for each column
            ;;comes from within the record
            ;;
            if (ok)
                ok = defineStructure(cursor,1,recordSpec,recProduct)

            ;;Insert the row into the database
            if (ok)
            begin
                ;;Load the data into our local buffer
                recProduct = argProduct

                ;;If requested, clean the data
                if (mCleanData)
                    cleanProductData(recProduct)

                ;;If requested, null terminate empty alpha fields
                if (mEmptyAlphaNull)
                    nullTerminateEmptyAlphas(recProduct)

                ;;Execute the INSERT statement
                ok = executeNonSelectCursor(cursor)
            end

            ;;Close the cursor
            closeCursor(cursor,ok)

            ;;Commit or rollback the transaction
            if (transaction)
                ok = commitOrRollback(ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Inserts multiple new rows into the Product table in the database
        ;;; </summary>
        ;;; <param name="argRecords">Collection of any number of boxed Product records to insert</param>
        ;;; <param name="argExceptions">Collection of records that failed to be inserted</param>
        ;;; <param name="argLogCh">Channel to log error messages on</param>
        ;;; <returns>True for success, false for failure</returns>
        public method InsertRows, boolean
            required in  argRecords     ,@ArrayList
            optional out argExceptions  ,@ArrayList
            optional in  argLogCh       ,int
            endparams
            stack record local_data
                ok          ,boolean    ;;Return status
                cursor      ,int        ;;Database cursor
                transaction ,boolean    ;;Transaction in progress
                continue    ,int        ;;Continue after an error
                recProduct, strProduct
                objProduct, @strProduct
            endrecord
        proc

            init local_data
            ok = true

            ;;Create the exceptions collection
            if (^passed(argExceptions))
                argExceptions = new ArrayList()

            ;;Start a database transaction
            if (ok = startTransaction())
                transaction = true

            ;;Open a cursor for the INSERT statement
            if (ok)
                ok = openNonSelectCursor(mInsertStatement,cursor)

            ;;Prepare a structure definition to define where the data for each column
            ;;comes from within the record
            if (ok)
                ok = defineStructure(cursor,1,recordSpec,recProduct)

            ;;Insert the rows into the database
            if (ok)
            begin
                data cnt, int
                foreach objProduct in argRecords
                begin
                    ;;Load data into the bound record
                    recProduct = (strProduct)objProduct

                    ;;If requested, clean the data
                    if (mCleanData)
                        cleanProductData(recProduct)

                    ;;If requested, null terminate empty alpha fields
                    if (mEmptyAlphaNull)
                        nullTerminateEmptyAlphas(recProduct)

                    ;;Execute the INSERT statement
                    if (!(ok = executeNonSelectCursor(cursor)))
                    begin
                        ;;We got an error, lets decide what to do with it
                        clear continue

                        ;;Are we logging errors?
                        if (^passed(argLogCh)&&(argLogCh))
                        begin
                            writes(argLogCh,mErrorMessage)
                            continue=1
                        end

                        ;;Are we processing exceptions?
                        if (^passed(argExceptions))
                        begin
                            argExceptions.Add((@strProduct)recProduct)
                            continue=1
                        end

                        if (continue)
                        begin
                            ok = true
                            nextloop
                        end

                        exitloop
                    end
                end
            end

            ;;Close the cursor
            closeCursor(cursor,ok)

            ;;Commit or rollback the transaction
            if (transaction)
                ok = commitOrRollback(ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Retrieves a row from the Product table in the database
        ;;; </summary>
        ;;; <param name="argSku">Primary key segment sku</param>
        ;;; <param name="argProduct">Product record to return data in</param>
        ;;; <returns>True for success, false for failure</returns>
        public method SelectRow, boolean
            required in  argSku, a
            required out argProduct, strProduct
            endparams
            stack record local_data
                ok              ,boolean    ;;OK to continue
                cursor          ,int        ;;Database cursor
            endrecord
        proc

            ok = true

            ;;Open a cursor for the SELECT statement
            if (%ssc_open(mDb.Channel,cursor,mSelectByKeyStatement,SSQL_SELECT,,1,argSku)==SSQL_FAILURE)
                ok = getDatabaseError("Failed to open cursor")

            ;;Prepare a structure definition to define where the data for each column
            ;;goes to within the record
            if (ok)
                ok = defineStructure(cursor,1,recordSpec,argProduct)

            ;;Move data to host variables
            if (ok)
                if (%ssc_move(mDb.Channel,cursor,1)==SSQL_FAILURE)
                    ok = getDatabaseError("Failed to execute SQL statement")

            ;;Close the cursor
            closeCursor(cursor,ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Retrieves multiple rows from the Product table in the database
        ;;; </summary>
        ;;; <param name="argWhere">WHERE clause to identify the rows to retrieve (don't include the WHERE keyword)</param>
        ;;; <param name="argRows">Collectio of returned rows</param>
        ;;; <returns>True for success, false for failure</returns>
        public method SelectRows, boolean
            required in  argWhere, string
            required out argRows,  @ArrayList
            endparams
            stack record local_data
                ok, boolean                             ;;OK to continue
                cursor, int                             ;;Database cursor
                recProduct, strProduct  ;;IO buffer
            endrecord
        proc

            argRows = new ArrayList()

            ;;Open a cursor for the SELECT statement
            if (^passed(argWhere) && argWhere.Length>0) then
                ok = openSelectCursor(mSelectAllStatement+" WHERE "+argWhere,cursor)
            else
                ok = openSelectCursor(mSelectAllStatement,cursor)

            ;;Prepare a structure definition to define where the data for each column
            ;;goes to within the record
            if (ok)
                ok = defineStructure(cursor,1,recordSpec,recProduct)

            ;;Move data to host variables
            if (ok)
            begin
                repeat
                begin
                    using (%ssc_move(mDb.Channel,cursor,1)) select
                    (SSQL_NORMAL),
                        argRows.Add((@strProduct)recProduct)
                    (SSQL_NOMORE),
                        exitloop
                    (SSQL_FAILURE),
                    begin
                        ok = getDatabaseError("Failed to execute SQL statement")
                        exitloop
                    end
                    endusing
                end
            end

            ;;Close the cursor
            closeCursor(cursor,ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Deletes a row from the Product table in the database
        ;;; </summary>
        ;;; <param name="argSku">Primary key segment Sku</param>
        ;;; <returns>True for success, false for failure</returns>
        public method DeleteRow, boolean
            required in  argSku ,a
            endparams
            stack record local_data
                ok          ,boolean    ;;Return status
                transaction ,boolean    ;;Transaction in progress
                cursor      ,int        ;;Database cursor
            endrecord
        proc

            init local_data
            ok = true

            ;;Start a database transaction
            if (ok = startTransaction())
                transaction = true

            ;;Open a cursor for the DELETE statement
            if (ok)
                if (%ssc_open(mDb.Channel,cursor,mDeleteByKeyStatement,SSQL_NONSEL,,1,argSku)==SSQL_FAILURE)
                    ok = getDatabaseError("Failed to open cursor")

            ;;Execute the query
            if (ok)
                ok = executeNonSelectCursor(cursor)

            ;;Close the cursor
            closeCursor(cursor,ok)

            ;;Commit or rollback the transaction
            if (transaction)
                ok = commitOrRollback(ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Deletes one or more rows from the Product table in the
        ;;; database based on a WHERE clause expression.
        ;;; </summary>
        ;;; <param name="argWhere">
        ;;; WHERE clause to identify the rows to be deleted (don't include the
        ;;; WHERE keyword)
        ;;; </param>
        ;;; <returns>True for success, false for failure</returns>
        public method DeleteRows, boolean
            required in argWhere, string
            endparams
            stack record local_data
                ok          ,boolean    ;;Return status
                transaction ,boolean    ;;Transaction in progress
                cursor      ,int        ;;Database cursor
            endrecord
        proc

            init local_data
            ok = true

            ;;Start a database transaction
            if (ok = startTransaction())
                transaction = true

            ;;Open a cursor for the DELETE statement
            if (ok)
                ok = openNonSelectCursor("DELETE FROM Product WHERE "+argWhere,cursor)

            ;;Execute the query
            if (ok)
                ok = executeNonSelectCursor(cursor)

            ;;Close the cursor
            closeCursor(cursor,ok)

            ;;Commit or rollback the transaction
            if (transaction)
                ok = commitOrRollback(ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Updates a row in the Product in the database
        ;;; </summary>
        ;;; <param name="a_data">Record containing data to be updated</param>
        ;;; <returns>True if the row is updated, otherwise false</returns>
        public method UpdateRow, boolean
            required in  argProduct, strProduct
            endparams
            stack record local_data
                ok              ,boolean    ;;OK to continue
                transaction     ,boolean    ;;Transaction in progress
                cursor          ,int        ;;Database cursor
                sql             ,string     ;;SQL statement
                recProduct, strProduct
            endrecord
        proc

            init local_data
            ok = true

            ;;Load the data into the bound record
            recProduct = argProduct

            ;;Start a database transaction
            if (ok = startTransaction())
                transaction = true

            ;;Open a cursor for the UPDATE statement
            if (ok)
            begin
                sql = "UPDATE Product SET "
                & "Sku=:1,"
                & "ProductGroup=:2,"
                & "Description=:3,"
                & "PriceGroup=:4,"
                & "SellingPrice=:5,"
                & "LastSale=:6,"
                & "LastCostPrice=:7,"
                & "AverageCostPrice=:8,"
                & "QtyInStock=:9,"
                & "QtyAllocated=:10,"
                & "QtyInTransit=:11,"
                & "QtyOnOrder=:12,"
                & "Reference=:13,"
                & "Publisher=:14,"
                & "Author=:15,"
                & "Type=:16,"
                & "ReleaseDate=:17,"
                & "Rating=:18"
                & " WHERE"
                & " Sku='" + %atrim(^a(recProduct.sku)) + "'"

                ok = openNonSelectCursor(sql,cursor)
            end

            ;;Prepare a structure definition to define where the data for each column
            ;;comes from within the record
            if (ok)
                ok = defineStructure(cursor,1,recordSpec,recProduct)

            ;;Update the row in the database
            if (ok)
                ok = executeNonSelectCursor(cursor)

            ;;Close the cursor
            closeCursor(cursor,ok)

            ;;Commit or rollback the transaction
            if (transaction)
                ok = commitOrRollback(ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Loads data from the file DAT:invmas.ism into the Product
        ;;; table in the database.
        ;;; </summary>
        ;;; <param name="a_logex">Whether to log exception records to a file</param>
        ;;; <param name="a_logchan">Open channel to log error messages to</param>
        ;;; <param name="a_rows">Passed maximum number of rows to load, and returned number of rows successfully loaded</param>
        ;;; <param name="a_failrows">Returned number of rows that failed to be inserted</param>
        ;;; <returns>True on successful load or false if an error occurred. If exceptions are encountered but logged to a file then the return status will be true.</returns>
        public method Load, boolean
            optional in    a_logex      ,boolean
            optional in    a_logchan    ,int
            optional inout a_rows       ,int
            optional out   a_failrows   ,int
            endparams
            .define BUFFER_ROWS 1000        ;;How manr rows load at once
            stack record local_data
                ok              ,boolean    ;;Return status
                filechn         ,int        ;;Data file channel
                ex_ch           ,int        ;;Exception log file channel
                maxrows         ,int        ;;Max rows to load (for testing)
                goodrows        ,int        ;;Rows successfully inserted
                failrows        ,int        ;;Rows that failed to insert
                rowData         ,@ArrayList ;;Row data to load
                exceptionRows   ,@ArrayList ;;Rows that failed to load
                recINVMAS   , strINVMAS
                recProduct      , strProduct
                objProduct      , @strProduct
            endrecord
        proc

            init local_data
            ok = true

            if (^passed(a_rows)&&a_rows) then
                maxrows = a_rows
            else
                maxrows = 0

            ;;Open the data file associated with the mapped structure
            try
            begin
                open(filechn=%syn_freechn,i:i,"DAT:invmas.ism")
            end
            catch (ex)
            begin
                ok = false
                mErrorMessage = "Failed to open file DAT:invmas.ism. " + ex.Message
                clear filechn
            end
            endtry

            if (ok)
            begin
                data rowsLoaded, int, 0

                rowData = new ArrayList()

                ;;Read records from the input file
                repeat
                begin
                    ;;Get the next record from the input file
                    try
                    begin
                        reads(filechn,recINVMAS)
                    end
                    catch (ex, @EndOfFileException)
                    begin
                        exitloop
                    end
                    endtry

                    ;;Map the data into the next database record
                    this.Map(recINVMAS,recProduct)
                    rowData.Add((@strProduct)recProduct)

                    if ((maxrows)&&((rowsLoaded+=1)>=maxRows))
                        exitloop

                    ;;If the buffer is full, write it to the database
                    if (rowData.Count==BUFFER_ROWS)
                        call insert_data

                    if (!ok)
                        exitloop
                end

                ;;So we have any remaining records to insert?
                if (rowData.Count>0)
                    call insert_data

                rowData = ^null

            end

            ;;Close the file
            if (filechn)
                close filechn

            ;;Close the exceptions log file
            if (ex_ch)
                close ex_ch

            ;;Return number of rows inserted
            if (^passed(a_rows))
                a_rows = goodrows

            ;;Return number of failed rows
            if (^passed(a_failrows))
                a_failrows = failrows

            mreturn ok

        insert_data,

            if (this.InsertRows(rowData,exceptionRows,a_logchan))
            begin
                if (exceptionRows.Count==0) then
                    goodrows += rowData.Count
                else
                begin
                    ;;Are we logging exceptions?
                    if (^passed(a_logex)&&a_logex) then
                    begin
                        ;;Open the log file and log the exceptions
                        if (!ex_ch)
                            open(ex_ch=0,o:s,"Exceptions_Product.log")
                        foreach objProduct in exceptionRows
                            writes(ex_ch,(strProduct)objProduct)
                        if (^passed(a_logchan)&&a_logchan)
                            writes(a_logchan,"Exceptions were logged to Exceptions_Product.log")
                        ;;Update the lobal counters
                        goodrows += (rowData.Count-exceptionRows.Count)
                        failrows += exceptionRows.Count
                    end
                    else
                    begin
                        ;;No logging, report and error
                        ok = false
                    end
                end
            end

            exceptionRows = ^null
            rowData = new ArrayList()

            return

        endmethod

        ;;; <summary>
        ;;; Cleans the data in a Product record before it is inserted
        ;;; into the database.
        ;;; </summary>
        ;;; <param name="argProduct">Product record to be cleaned</param>
        private method cleanProductData, void
            required inout argProduct, strProduct
            endparams
        proc
            if ((!argProduct.selling_price)||(!this.IsNumeric(^a(argProduct.selling_price))))
                clear argProduct.selling_price
            if ((!argProduct.last_sale)||(!this.IsDate(argProduct.last_sale)))
                ^a(argProduct.last_sale(1:1))=%char(0)
            if ((!argProduct.last_cost_price)||(!this.IsNumeric(^a(argProduct.last_cost_price))))
                clear argProduct.last_cost_price
            if ((!argProduct.average_cost_price)||(!this.IsNumeric(^a(argProduct.average_cost_price))))
                clear argProduct.average_cost_price
            if ((!argProduct.qty_in_stock)||(!this.IsNumeric(^a(argProduct.qty_in_stock))))
                clear argProduct.qty_in_stock
            if ((!argProduct.qty_allocated)||(!this.IsNumeric(^a(argProduct.qty_allocated))))
                clear argProduct.qty_allocated
            if ((!argProduct.qty_in_transit)||(!this.IsNumeric(^a(argProduct.qty_in_transit))))
                clear argProduct.qty_in_transit
            if ((!argProduct.qty_on_order)||(!this.IsNumeric(^a(argProduct.qty_on_order))))
                clear argProduct.qty_on_order
            if ((!argProduct.release_date)||(!this.IsDate(argProduct.release_date)))
                ^a(argProduct.release_date(1:1))=%char(0)
        endmethod

        ;;; <summary>
        ;;; Null terminate any empty alpha fields so that they show up as <NULL>
        ;;; in the database. By default SQL Connection inserts a single space.
        ;;; </summary>
        ;;; <param name="argProduct">Product record to be cleaned</param>
        private method nullTerminateEmptyAlphas, void
            required inout argProduct, strProduct
            endparams
        proc
            if(!argProduct.sku)
                argProduct.sku(1:1)=%char(0)
            if(!argProduct.product_group)
                argProduct.product_group(1:1)=%char(0)
            if(!argProduct.description)
                argProduct.description(1:1)=%char(0)
            if(!argProduct.price_group)
                argProduct.price_group(1:1)=%char(0)
            if(!argProduct.reference)
                argProduct.reference(1:1)=%char(0)
            if(!argProduct.publisher)
                argProduct.publisher(1:1)=%char(0)
            if(!argProduct.author)
                argProduct.author(1:1)=%char(0)
            if(!argProduct.type)
                argProduct.type(1:1)=%char(0)
            if(!argProduct.rating)
                argProduct.rating(1:1)=%char(0)
        endmethod

        ;;; <summary>
        ;;; Maps a INVMAS record into a PRODUCT record
        ;;; </summary>
        ;;; <param name="ctmst">Passed INVMAS record</param>
        ;;; <param name="customer">Returned PRODUCT record</param>
        public method Map, void
            required in  invmas, strINVMAS
            required out product, strProduct
            endparams
        proc
            product.sku = invmas.invpcd
            product.product_group = invmas.invgrp
            product.description = invmas.invdes
            product.price_group = invmas.invpgp
            product.selling_price = invmas.invspr
            product.last_sale = invmas.invdls
            product.last_cost_price = invmas.invlcp
            product.average_cost_price = invmas.invacp
            product.qty_in_stock = invmas.invqis
            product.qty_allocated = invmas.invqal
            product.qty_in_transit = invmas.invqit
            product.qty_on_order = invmas.invqoo
            product.reference = invmas.invref
            product.publisher = invmas.invpub
            product.author = invmas.invaut
            product.type = invmas.invtyp
            product.release_date = invmas.invrdt
            product.rating = invmas.invrat
        endmethod

        ;;; <summary>
        ;;; Maps a PRODUCT record into a INVMAS record
        ;;; </summary>
        ;;; <param name="ctmst">Passed PRODUCT record</param>
        ;;; <param name="customer">Returned INVMAS record</param>
        public method Unmap, void
            required in  product, strProduct
            required out invmas, strINVMAS
            endparams
        proc
            invmas.invpcd = product.sku
            invmas.invgrp = product.product_group
            invmas.invdes = product.description
            invmas.invpgp = product.price_group
            invmas.invspr = product.selling_price
            invmas.invdls = product.last_sale
            invmas.invlcp = product.last_cost_price
            invmas.invacp = product.average_cost_price
            invmas.invqis = product.qty_in_stock
            invmas.invqal = product.qty_allocated
            invmas.invqit = product.qty_in_transit
            invmas.invqoo = product.qty_on_order
            invmas.invref = product.reference
            invmas.invpub = product.publisher
            invmas.invaut = product.author
            invmas.invtyp = product.type
            invmas.invrdt = product.release_date
            invmas.invrat = product.rating
        endmethod

        ;;; <summary>
        ;;; Loads field details into the recordSpec record
        ;;; </summary>
        private method loadRecordSpec, void
            endparams
        proc
            recordSpec.fieldCount = 18
            recordSpec.fields[1].fieldType     = "A" ;;Sku
            recordSpec.fields[1].fieldSize     = 10
            recordSpec.fields[1].fieldDecimals = 0
            recordSpec.fields[2].fieldType     = "A" ;;ProductGroup
            recordSpec.fields[2].fieldSize     = 10
            recordSpec.fields[2].fieldDecimals = 0
            recordSpec.fields[3].fieldType     = "A" ;;Description
            recordSpec.fields[3].fieldSize     = 80
            recordSpec.fields[3].fieldDecimals = 0
            recordSpec.fields[4].fieldType     = "A" ;;PriceGroup
            recordSpec.fields[4].fieldSize     = 10
            recordSpec.fields[4].fieldDecimals = 0
            recordSpec.fields[5].fieldType     = "D" ;;SellingPrice
            recordSpec.fields[5].fieldSize     = 6
            recordSpec.fields[5].fieldDecimals = 2
            recordSpec.fields[6].fieldType     = "A" ;;LastSale
            recordSpec.fields[6].fieldSize     = 8
            recordSpec.fields[6].fieldDecimals = 0
            recordSpec.fields[7].fieldType     = "D" ;;LastCostPrice
            recordSpec.fields[7].fieldSize     = 10
            recordSpec.fields[7].fieldDecimals = 4
            recordSpec.fields[8].fieldType     = "D" ;;AverageCostPrice
            recordSpec.fields[8].fieldSize     = 10
            recordSpec.fields[8].fieldDecimals = 4
            recordSpec.fields[9].fieldType     = "D" ;;QtyInStock
            recordSpec.fields[9].fieldSize     = 6
            recordSpec.fields[9].fieldDecimals = 0
            recordSpec.fields[10].fieldType     = "D" ;;QtyAllocated
            recordSpec.fields[10].fieldSize     = 6
            recordSpec.fields[10].fieldDecimals = 0
            recordSpec.fields[11].fieldType     = "D" ;;QtyInTransit
            recordSpec.fields[11].fieldSize     = 6
            recordSpec.fields[11].fieldDecimals = 0
            recordSpec.fields[12].fieldType     = "D" ;;QtyOnOrder
            recordSpec.fields[12].fieldSize     = 6
            recordSpec.fields[12].fieldDecimals = 0
            recordSpec.fields[13].fieldType     = "A" ;;Reference
            recordSpec.fields[13].fieldSize     = 20
            recordSpec.fields[13].fieldDecimals = 0
            recordSpec.fields[14].fieldType     = "A" ;;Publisher
            recordSpec.fields[14].fieldSize     = 50
            recordSpec.fields[14].fieldDecimals = 0
            recordSpec.fields[15].fieldType     = "A" ;;Author
            recordSpec.fields[15].fieldSize     = 50
            recordSpec.fields[15].fieldDecimals = 0
            recordSpec.fields[16].fieldType     = "A" ;;Type
            recordSpec.fields[16].fieldSize     = 20
            recordSpec.fields[16].fieldDecimals = 0
            recordSpec.fields[17].fieldType     = "A" ;;ReleaseDate
            recordSpec.fields[17].fieldSize     = 8
            recordSpec.fields[17].fieldDecimals = 0
            recordSpec.fields[18].fieldType     = "A" ;;Rating
            recordSpec.fields[18].fieldSize     = 6
            recordSpec.fields[18].fieldDecimals = 0
        endmethod

        ;;; <summary>
        ;;; Loads various SQL statements into "shared" static variables
        ;;; </summary>
        private method loadSqlStatements, void
            endparams
        proc

            if (mCreateTableStatement==^null)
                mCreateTableStatement = "CREATE TABLE Product ("
                & "Sku VARCHAR(10) NOT NULL,"
                & "ProductGroup VARCHAR(10) NOT NULL,"
                & "Description VARCHAR(80) NOT NULL,"
                & "PriceGroup VARCHAR(10),"
                & "SellingPrice DECIMAL(6,2),"
                & "LastSale DATE,"
                & "LastCostPrice DECIMAL(10,4),"
                & "AverageCostPrice DECIMAL(10,4),"
                & "QtyInStock DECIMAL(6),"
                & "QtyAllocated DECIMAL(6),"
                & "QtyInTransit DECIMAL(6),"
                & "QtyOnOrder DECIMAL(6),"
                & "Reference VARCHAR(20),"
                & "Publisher VARCHAR(50),"
                & "Author VARCHAR(50),"
                & "Type VARCHAR(20),"
                & "ReleaseDate DATE NOT NULL,"
                & "Rating VARCHAR(6),"
                & "CONSTRAINT PK_Product PRIMARY KEY CLUSTERED (Sku ASC))"

            if (mInsertStatement==^null)
                mInsertStatement = "INSERT INTO Product ("
                & "Sku,"
                & "ProductGroup,"
                & "Description,"
                & "PriceGroup,"
                & "SellingPrice,"
                & "LastSale,"
                & "LastCostPrice,"
                & "AverageCostPrice,"
                & "QtyInStock,"
                & "QtyAllocated,"
                & "QtyInTransit,"
                & "QtyOnOrder,"
                & "Reference,"
                & "Publisher,"
                & "Author,"
                & "Type,"
                & "ReleaseDate,"
                & "Rating"
                & ") VALUES(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16,:17,:18)"

            if (mSelectByKeyStatement==^null)
                mSelectByKeyStatement = "SELECT "
                & "Sku,"
                & "ProductGroup,"
                & "Description,"
                & "PriceGroup,"
                & "SellingPrice,"
                & "LastSale,"
                & "LastCostPrice,"
                & "AverageCostPrice,"
                & "QtyInStock,"
                & "QtyAllocated,"
                & "QtyInTransit,"
                & "QtyOnOrder,"
                & "Reference,"
                & "Publisher,"
                & "Author,"
                & "Type,"
                & "ReleaseDate,"
                & "Rating"
                & " FROM Product"
                & " WHERE Sku=:1"

            if (mSelectAllStatement==^null)
                mSelectAllStatement = "SELECT "
                & "Sku,"
                & "ProductGroup,"
                & "Description,"
                & "PriceGroup,"
                & "SellingPrice,"
                & "LastSale,"
                & "LastCostPrice,"
                & "AverageCostPrice,"
                & "QtyInStock,"
                & "QtyAllocated,"
                & "QtyInTransit,"
                & "QtyOnOrder,"
                & "Reference,"
                & "Publisher,"
                & "Author,"
                & "Type,"
                & "ReleaseDate,"
                & "Rating"
                & " FROM Product"

            if (mDeleteByKeyStatement==^null)
                mDeleteByKeyStatement = "DELETE FROM Product WHERE Sku=:1"

        endmethod

    endclass

endnamespace
