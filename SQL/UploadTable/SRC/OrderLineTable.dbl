;;*****************************************************************************
;;
;; Title:       OrderLineTable.dbl
;;
;; Type:        Class
;;
;; Description: This class provides the ability to interact with a SQL Server
;;              database table named OrderLine using records defined
;;              by the repository structure ORDER_LINE, with underlying
;;              (mapped) records defined by the structure ORDLIN
;;              and data stored in the file DAT:ordlin.ism.
;;
;; Author:      CodeGen V4.2.10
;;
;; Company:     Synergex
;;
;; Created:     04/18/2013 at 17:36
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen V4.2.10.  Any changes that
;;              you make to this file will be lost if the code is regenerated.
;;
;;*****************************************************************************
;;
.include "CONNECTDIR:ssql.def"

import System.Collections

namespace SqlUploadDemo

    .ifndef strOrderLine
    .include "ORDER_LINE" repository, public structure="strOrderLine", end
    .endc

    .ifndef strORDLIN
    .include "ORDLIN" repository, public structure="strORDLIN", end
    .endc

    ;;; <summary>
    ;;; Class used to interact with the database table OrderLine
    ;;; </summary>
    public class OrderLineTable extends DatabaseTableBase

        ;;SQL Statements
        private static mCreateTableStatement    ,string
        private static mInsertStatement         ,string
        private static mSelectByKeyStatement    ,string
        private static mSelectAllStatement      ,string
        private static mSelectWhereStatement    ,string
        private static mDeleteByKeyStatement    ,string

        ;;Defines the layout of the synergy record used to transfer data
        ;;to and from the database. Used with %ssc_strdef() and populated
        ;;by the loadRecordSpec() method which is called from the constructor
        private record recordSpec
            fieldCount          ,d3
            group fields        ,[9]a
                fieldType       ,a1         ;Field type (A/D/I)
                fieldSize       ,d5         ;Field length
                fieldDecimals   ,d2         ;Implied decimal places (for D)
            endgroup
        endrecord

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>
        ;;; <param name="aDb">DatabaseConnection object</returns>
        public method OrderLineTable
            required in aDb, @DatabaseConnection
            endparams
            parent(aDb)
        proc
            loadRecordSpec()
            loadSqlStatements()
        endmethod

        ;;; <summary>
        ;;; Create a OrderLine table in the database
        ;;; </summary>
        ;;; <returns>True for success, false for failure</returns>
        public method Create, boolean
            endparams
            stack record local_data
                ok          ,boolean    ;;Return status
                cursor      ,int        ;;Database cursor
                transaction ,boolean    ;;Transaction in process
            endrecord
        proc
            init local_data
            ok = true

            ;;Start a new transaction
            if (ok = startTransaction())
                transaction = true

            ;;Create the database table and primary key
            if (ok)
            begin
                if (ok=openNonSelectCursor(mCreateTableStatement,cursor))
                begin
                    ok = executeNonSelectCursor(cursor)
                    closeCursor(cursor,ok)
                end
            end

            ;;Create index 1 (Sku)
            if (ok)
            begin
                if (ok=openNonSelectCursor("CREATE INDEX IX_OrderLine_Sku ON OrderLine(Sku ASC)",cursor))
                begin
                    ok = executeNonSelectCursor(cursor)
                    closeCursor(cursor,ok)
                end
            end

            ;;Grant access permissions
            if (ok&&(ok=openNonSelectCursor("GRANT ALL ON OrderLine TO PUBLIC",cursor)))
            begin
                ok = executeNonSelectCursor(cursor)
                closeCursor(cursor,ok)
            end

            ;;Commit or rollback the transaction
            if (transaction)
                ok = commitOrRollback(ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Deletes the OrderLine table from the database
        ;;; </summary>
        ;;; <returns>True for success, false for failure</returns>
        public method Drop, boolean
            endparams
            stack record local_data
                ok          ,boolean    ;;Return status
                cursor      ,int        ;;Database cursor
                transaction ,boolean    ;;Transaction in progress
            endrecord
        proc

            init local_data
            ok = true

            ;;Start a database transaction
            if (ok = startTransaction())
                transaction = true

            ;;Open cursor for DROP TABLE statement
            ;;
            if (ok)
                ok=openNonSelectCursor("DROP TABLE OrderLine",cursor)

            ;;Execute DROP TABLE statement
            ;;
            if (ok)
            begin
                if (!(ok = executeNonSelectCursor(cursor)))
                begin
                    data dbErrText, a1024
                    data length, int
                    if (%ssc_getemsg(mDb.Channel,dbErrText,length,,mErrorNumber)==SSQL_NORMAL)
                    begin
                        ;;Check if the error was that the table did not exist
                        if (mErrorNumber==-3701) then
                        begin
                            clear mErrorMessage
                            ok = true
                        end
                        else
                            mErrorMessage = atrim(dbErrText)
                    end
                end
            end

            ;;Close the cursor
            closeCursor(cursor,ok)

            ;;Commit or rollback the transaction
            if (transaction)
                ok = commitOrRollback(ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Deletes all data from the OrderLine table in the database
        ;;; </summary>
        ;;; <returns>True for success, false for failure</returns>
        public method Clear, boolean
            endparams
            stack record local_data
                ok          ,boolean    ;;Return status
                cursor      ,int        ;;Database cursor
                transaction ,boolean    ;;Transaction in process
            endrecord
        proc

            init local_data
            ok = true

            ;;Start a database transaction
            if (ok = startTransaction())
                transaction = true

            ;;Open cursor for the SQL statement
            if (ok)
                ok = openNonSelectCursor("TRUNCATE TABLE OrderLine",cursor)

            ;;Execute SQL statement
            if (ok)
                ok = executeNonSelectCursor(cursor)

            ;;Close the cursor
            closeCursor(cursor,ok)

            ;;Commit or rollback the transaction
            if (transaction)
                ok = commitOrRollback(ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Checks if the OrderLine table exists in the database
        ;;; </summary>
        ;;; <returns>True if the table exists, false if not (or an error occurred)</returns>
        public method Exists, boolean
            endparams
            .include "ORDER_LINE" repository, stack record="order_line"
            stack record local_data
                ok          ,boolean    ;;Return value
                cursor      ,int        ;;Database cursor
                table_name  ,a128       ;;Retrieved table name
            endrecord
        proc

            init order_line,local_data

            ;;Open a cursor for the SELECT statement
            ;;
            ok = openSelectCursor("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='OrderLine'",cursor)

            ;;Bind host variables to receive the data
            if (ok)
                if (%ssc_define(mDb.Channel,cursor,1,table_name)==SSQL_FAILURE)
                    ok = getDatabaseError("Failed to bind variable")

            ;;Move data to host variables
            if (ok)
                if (%ssc_move(mDb.Channel,cursor,1)==SSQL_FAILURE)
                    ok = false

            ;;Close the cursor
            closeCursor(cursor,ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Inserts a new row into the OrderLine table in the database
        ;;; </summary>
        ;;; <param name="argOrderLine">Record containing data to insert</param>
        ;;; <returns>True for success, false for failure</returns>
        public method InsertRow, boolean
            required in argOrderLine, strOrderLine
            endparams
            stack record local_data
                ok              ,boolean    ;;Return status
                cursor          ,int        ;;Database cursor
                transaction     ,boolean    ;;Transaction in progress
                recOrderLine, strOrderLine
            endrecord
        proc

            init local_data
            ok = true

            ;;Start a database transaction
            if (ok = startTransaction())
                transaction = true

            ;;Open a cursor for the INSERT statement
            if (ok)
                ok = openNonSelectCursor(mInsertStatement,cursor)

            ;;Prepare a structure definition to define where the data for each column
            ;;comes from within the record
            ;;
            if (ok)
                ok = defineStructure(cursor,1,recordSpec,recOrderLine)

            ;;Insert the row into the database
            if (ok)
            begin
                ;;Load the data into our local buffer
                recOrderLine = argOrderLine

                ;;If requested, clean the data
                if (mCleanData)
                    cleanOrderLineData(recOrderLine)

                ;;If requested, null terminate empty alpha fields
                if (mEmptyAlphaNull)
                    nullTerminateEmptyAlphas(recOrderLine)

                ;;Execute the INSERT statement
                ok = executeNonSelectCursor(cursor)
            end

            ;;Close the cursor
            closeCursor(cursor,ok)

            ;;Commit or rollback the transaction
            if (transaction)
                ok = commitOrRollback(ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Inserts multiple new rows into the OrderLine table in the database
        ;;; </summary>
        ;;; <param name="argRecords">Collection of any number of boxed OrderLine records to insert</param>
        ;;; <param name="argExceptions">Collection of records that failed to be inserted</param>
        ;;; <param name="argLogCh">Channel to log error messages on</param>
        ;;; <returns>True for success, false for failure</returns>
        public method InsertRows, boolean
            required in  argRecords     ,@ArrayList
            optional out argExceptions  ,@ArrayList
            optional in  argLogCh       ,int
            endparams
            stack record local_data
                ok          ,boolean    ;;Return status
                cursor      ,int        ;;Database cursor
                transaction ,boolean    ;;Transaction in progress
                continue    ,int        ;;Continue after an error
                recOrderLine, strOrderLine
                objOrderLine, @strOrderLine
            endrecord
        proc

            init local_data
            ok = true

            ;;Create the exceptions collection
            if (^passed(argExceptions))
                argExceptions = new ArrayList()

            ;;Start a database transaction
            if (ok = startTransaction())
                transaction = true

            ;;Open a cursor for the INSERT statement
            if (ok)
                ok = openNonSelectCursor(mInsertStatement,cursor)

            ;;Prepare a structure definition to define where the data for each column
            ;;comes from within the record
            if (ok)
                ok = defineStructure(cursor,1,recordSpec,recOrderLine)

            ;;Insert the rows into the database
            if (ok)
            begin
                data cnt, int
                foreach objOrderLine in argRecords
                begin
                    ;;Load data into the bound record
                    recOrderLine = (strOrderLine)objOrderLine

                    ;;If requested, clean the data
                    if (mCleanData)
                        cleanOrderLineData(recOrderLine)

                    ;;If requested, null terminate empty alpha fields
                    if (mEmptyAlphaNull)
                        nullTerminateEmptyAlphas(recOrderLine)

                    ;;Execute the INSERT statement
                    if (!(ok = executeNonSelectCursor(cursor)))
                    begin
                        ;;We got an error, lets decide what to do with it
                        clear continue

                        ;;Are we logging errors?
                        if (^passed(argLogCh)&&(argLogCh))
                        begin
                            writes(argLogCh,mErrorMessage)
                            continue=1
                        end

                        ;;Are we processing exceptions?
                        if (^passed(argExceptions))
                        begin
                            argExceptions.Add((@strOrderLine)recOrderLine)
                            continue=1
                        end

                        if (continue)
                        begin
                            ok = true
                            nextloop
                        end

                        exitloop
                    end
                end
            end

            ;;Close the cursor
            closeCursor(cursor,ok)

            ;;Commit or rollback the transaction
            if (transaction)
                ok = commitOrRollback(ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Retrieves a row from the OrderLine table in the database
        ;;; </summary>
        ;;; <param name="argOrderNumber">Primary key segment order_number</param>
        ;;; <param name="argLineNumber">Primary key segment line_number</param>
        ;;; <param name="argOrderLine">OrderLine record to return data in</param>
        ;;; <returns>True for success, false for failure</returns>
        public method SelectRow, boolean
            required in  argOrderNumber, a
            required in  argLineNumber, a
            required out argOrderLine, strOrderLine
            endparams
            stack record local_data
                ok              ,boolean    ;;OK to continue
                cursor          ,int        ;;Database cursor
            endrecord
        proc

            ok = true

            ;;Open a cursor for the SELECT statement
            if (%ssc_open(mDb.Channel,cursor,mSelectByKeyStatement,SSQL_SELECT,,2,argOrderNumber,argLineNumber)==SSQL_FAILURE)
                ok = getDatabaseError("Failed to open cursor")

            ;;Prepare a structure definition to define where the data for each column
            ;;goes to within the record
            if (ok)
                ok = defineStructure(cursor,1,recordSpec,argOrderLine)

            ;;Move data to host variables
            if (ok)
                if (%ssc_move(mDb.Channel,cursor,1)==SSQL_FAILURE)
                    ok = getDatabaseError("Failed to execute SQL statement")

            ;;Close the cursor
            closeCursor(cursor,ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Retrieves multiple rows from the OrderLine table in the database
        ;;; </summary>
        ;;; <param name="argWhere">WHERE clause to identify the rows to retrieve (don't include the WHERE keyword)</param>
        ;;; <param name="argRows">Collectio of returned rows</param>
        ;;; <returns>True for success, false for failure</returns>
        public method SelectRows, boolean
            required in  argWhere, string
            required out argRows,  @ArrayList
            endparams
            stack record local_data
                ok, boolean                             ;;OK to continue
                cursor, int                             ;;Database cursor
                recOrderLine, strOrderLine  ;;IO buffer
            endrecord
        proc

            argRows = new ArrayList()

            ;;Open a cursor for the SELECT statement
            if (^passed(argWhere) && argWhere.Length>0) then
                ok = openSelectCursor(mSelectAllStatement+" WHERE "+argWhere,cursor)
            else
                ok = openSelectCursor(mSelectAllStatement,cursor)

            ;;Prepare a structure definition to define where the data for each column
            ;;goes to within the record
            if (ok)
                ok = defineStructure(cursor,1,recordSpec,recOrderLine)

            ;;Move data to host variables
            if (ok)
            begin
                repeat
                begin
                    using (%ssc_move(mDb.Channel,cursor,1)) select
                    (SSQL_NORMAL),
                        argRows.Add((@strOrderLine)recOrderLine)
                    (SSQL_NOMORE),
                        exitloop
                    (SSQL_FAILURE),
                    begin
                        ok = getDatabaseError("Failed to execute SQL statement")
                        exitloop
                    end
                    endusing
                end
            end

            ;;Close the cursor
            closeCursor(cursor,ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Deletes a row from the OrderLine table in the database
        ;;; </summary>
        ;;; <param name="argOrderNumber">Primary key segment OrderNumber</param>
        ;;; <param name="argLineNumber">Primary key segment LineNumber</param>
        ;;; <returns>True for success, false for failure</returns>
        public method DeleteRow, boolean
            required in  argOrderNumber ,a
            required in  argLineNumber ,a
            endparams
            stack record local_data
                ok          ,boolean    ;;Return status
                transaction ,boolean    ;;Transaction in progress
                cursor      ,int        ;;Database cursor
            endrecord
        proc

            init local_data
            ok = true

            ;;Start a database transaction
            if (ok = startTransaction())
                transaction = true

            ;;Open a cursor for the DELETE statement
            if (ok)
                if (%ssc_open(mDb.Channel,cursor,mDeleteByKeyStatement,SSQL_NONSEL,,2,argOrderNumber,argLineNumber)==SSQL_FAILURE)
                    ok = getDatabaseError("Failed to open cursor")

            ;;Execute the query
            if (ok)
                ok = executeNonSelectCursor(cursor)

            ;;Close the cursor
            closeCursor(cursor,ok)

            ;;Commit or rollback the transaction
            if (transaction)
                ok = commitOrRollback(ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Deletes one or more rows from the OrderLine table in the
        ;;; database based on a WHERE clause expression.
        ;;; </summary>
        ;;; <param name="argWhere">
        ;;; WHERE clause to identify the rows to be deleted (don't include the
        ;;; WHERE keyword)
        ;;; </param>
        ;;; <returns>True for success, false for failure</returns>
        public method DeleteRows, boolean
            required in argWhere, string
            endparams
            stack record local_data
                ok          ,boolean    ;;Return status
                transaction ,boolean    ;;Transaction in progress
                cursor      ,int        ;;Database cursor
            endrecord
        proc

            init local_data
            ok = true

            ;;Start a database transaction
            if (ok = startTransaction())
                transaction = true

            ;;Open a cursor for the DELETE statement
            if (ok)
                ok = openNonSelectCursor("DELETE FROM OrderLine WHERE "+argWhere,cursor)

            ;;Execute the query
            if (ok)
                ok = executeNonSelectCursor(cursor)

            ;;Close the cursor
            closeCursor(cursor,ok)

            ;;Commit or rollback the transaction
            if (transaction)
                ok = commitOrRollback(ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Updates a row in the OrderLine in the database
        ;;; </summary>
        ;;; <param name="a_data">Record containing data to be updated</param>
        ;;; <returns>True if the row is updated, otherwise false</returns>
        public method UpdateRow, boolean
            required in  argOrderLine, strOrderLine
            endparams
            stack record local_data
                ok              ,boolean    ;;OK to continue
                transaction     ,boolean    ;;Transaction in progress
                cursor          ,int        ;;Database cursor
                sql             ,string     ;;SQL statement
                recOrderLine, strOrderLine
            endrecord
        proc

            init local_data
            ok = true

            ;;Load the data into the bound record
            recOrderLine = argOrderLine

            ;;Start a database transaction
            if (ok = startTransaction())
                transaction = true

            ;;Open a cursor for the UPDATE statement
            if (ok)
            begin
                sql = "UPDATE OrderLine SET "
                & "OrderNumber=:1,"
                & "LineNumber=:2,"
                & "Sku=:3,"
                & "Description=:4,"
                & "QtyOrdered=:5,"
                & "QtyAllocated=:6,"
                & "Price=:7,"
                & "LineValue=:8,"
                & "Tax=:9"
                & " WHERE"
                & " OrderNumber='" + %atrim(^a(recOrderLine.order_number)) + "' AND"
                & " LineNumber='" + %atrim(^a(recOrderLine.line_number)) + "'"

                ok = openNonSelectCursor(sql,cursor)
            end

            ;;Prepare a structure definition to define where the data for each column
            ;;comes from within the record
            if (ok)
                ok = defineStructure(cursor,1,recordSpec,recOrderLine)

            ;;Update the row in the database
            if (ok)
                ok = executeNonSelectCursor(cursor)

            ;;Close the cursor
            closeCursor(cursor,ok)

            ;;Commit or rollback the transaction
            if (transaction)
                ok = commitOrRollback(ok)

            mreturn ok

        endmethod

        ;;; <summary>
        ;;; Loads data from the file DAT:ordlin.ism into the OrderLine
        ;;; table in the database.
        ;;; </summary>
        ;;; <param name="a_logex">Whether to log exception records to a file</param>
        ;;; <param name="a_logchan">Open channel to log error messages to</param>
        ;;; <param name="a_rows">Passed maximum number of rows to load, and returned number of rows successfully loaded</param>
        ;;; <param name="a_failrows">Returned number of rows that failed to be inserted</param>
        ;;; <returns>True on successful load or false if an error occurred. If exceptions are encountered but logged to a file then the return status will be true.</returns>
        public method Load, boolean
            optional in    a_logex      ,boolean
            optional in    a_logchan    ,int
            optional inout a_rows       ,int
            optional out   a_failrows   ,int
            endparams
            .define BUFFER_ROWS 1000        ;;How manr rows load at once
            stack record local_data
                ok              ,boolean    ;;Return status
                filechn         ,int        ;;Data file channel
                ex_ch           ,int        ;;Exception log file channel
                maxrows         ,int        ;;Max rows to load (for testing)
                goodrows        ,int        ;;Rows successfully inserted
                failrows        ,int        ;;Rows that failed to insert
                rowData         ,@ArrayList ;;Row data to load
                exceptionRows   ,@ArrayList ;;Rows that failed to load
                recORDLIN   , strORDLIN
                recOrderLine      , strOrderLine
                objOrderLine      , @strOrderLine
            endrecord
        proc

            init local_data
            ok = true

            if (^passed(a_rows)&&a_rows) then
                maxrows = a_rows
            else
                maxrows = 0

            ;;Open the data file associated with the mapped structure
            try
            begin
                open(filechn=%syn_freechn,i:i,"DAT:ordlin.ism")
            end
            catch (ex)
            begin
                ok = false
                mErrorMessage = "Failed to open file DAT:ordlin.ism. " + ex.Message
                clear filechn
            end
            endtry

            if (ok)
            begin
                data rowsLoaded, int, 0

                rowData = new ArrayList()

                ;;Read records from the input file
                repeat
                begin
                    ;;Get the next record from the input file
                    try
                    begin
                        reads(filechn,recORDLIN)
                    end
                    catch (ex, @EndOfFileException)
                    begin
                        exitloop
                    end
                    endtry

                    ;;Map the data into the next database record
                    this.Map(recORDLIN,recOrderLine)
                    rowData.Add((@strOrderLine)recOrderLine)

                    if ((maxrows)&&((rowsLoaded+=1)>=maxRows))
                        exitloop

                    ;;If the buffer is full, write it to the database
                    if (rowData.Count==BUFFER_ROWS)
                        call insert_data

                    if (!ok)
                        exitloop
                end

                ;;So we have any remaining records to insert?
                if (rowData.Count>0)
                    call insert_data

                rowData = ^null

            end

            ;;Close the file
            if (filechn)
                close filechn

            ;;Close the exceptions log file
            if (ex_ch)
                close ex_ch

            ;;Return number of rows inserted
            if (^passed(a_rows))
                a_rows = goodrows

            ;;Return number of failed rows
            if (^passed(a_failrows))
                a_failrows = failrows

            mreturn ok

        insert_data,

            if (this.InsertRows(rowData,exceptionRows,a_logchan))
            begin
                if (exceptionRows.Count==0) then
                    goodrows += rowData.Count
                else
                begin
                    ;;Are we logging exceptions?
                    if (^passed(a_logex)&&a_logex) then
                    begin
                        ;;Open the log file and log the exceptions
                        if (!ex_ch)
                            open(ex_ch=0,o:s,"Exceptions_OrderLine.log")
                        foreach objOrderLine in exceptionRows
                            writes(ex_ch,(strOrderLine)objOrderLine)
                        if (^passed(a_logchan)&&a_logchan)
                            writes(a_logchan,"Exceptions were logged to Exceptions_OrderLine.log")
                        ;;Update the lobal counters
                        goodrows += (rowData.Count-exceptionRows.Count)
                        failrows += exceptionRows.Count
                    end
                    else
                    begin
                        ;;No logging, report and error
                        ok = false
                    end
                end
            end

            exceptionRows = ^null
            rowData = new ArrayList()

            return

        endmethod

        ;;; <summary>
        ;;; Cleans the data in a OrderLine record before it is inserted
        ;;; into the database.
        ;;; </summary>
        ;;; <param name="argOrderLine">OrderLine record to be cleaned</param>
        private method cleanOrderLineData, void
            required inout argOrderLine, strOrderLine
            endparams
        proc
            if ((!argOrderLine.order_number)||(!this.IsNumeric(^a(argOrderLine.order_number))))
                clear argOrderLine.order_number
            if ((!argOrderLine.line_number)||(!this.IsNumeric(^a(argOrderLine.line_number))))
                clear argOrderLine.line_number
            if ((!argOrderLine.qty_ordered)||(!this.IsNumeric(^a(argOrderLine.qty_ordered))))
                clear argOrderLine.qty_ordered
            if ((!argOrderLine.qty_allocated)||(!this.IsNumeric(^a(argOrderLine.qty_allocated))))
                clear argOrderLine.qty_allocated
            if ((!argOrderLine.price)||(!this.IsNumeric(^a(argOrderLine.price))))
                clear argOrderLine.price
            if ((!argOrderLine.line_value)||(!this.IsNumeric(^a(argOrderLine.line_value))))
                clear argOrderLine.line_value
            if ((!argOrderLine.tax)||(!this.IsNumeric(^a(argOrderLine.tax))))
                clear argOrderLine.tax
        endmethod

        ;;; <summary>
        ;;; Null terminate any empty alpha fields so that they show up as <NULL>
        ;;; in the database. By default SQL Connection inserts a single space.
        ;;; </summary>
        ;;; <param name="argOrderLine">OrderLine record to be cleaned</param>
        private method nullTerminateEmptyAlphas, void
            required inout argOrderLine, strOrderLine
            endparams
        proc
            if(!argOrderLine.sku)
                argOrderLine.sku(1:1)=%char(0)
            if(!argOrderLine.description)
                argOrderLine.description(1:1)=%char(0)
        endmethod

        ;;; <summary>
        ;;; Maps a ORDLIN record into a ORDER_LINE record
        ;;; </summary>
        ;;; <param name="ctmst">Passed ORDLIN record</param>
        ;;; <param name="customer">Returned ORDER_LINE record</param>
        public method Map, void
            required in  ordlin, strORDLIN
            required out order_line, strOrderLine
            endparams
        proc
            order_line.order_number = ordlin.olnonm
            order_line.line_number = ordlin.olnlin
            order_line.sku = ordlin.olnpcd
            order_line.description = ordlin.olndes
            order_line.qty_ordered = ordlin.olnqty
            order_line.qty_allocated = ordlin.olnqta
            order_line.price = ordlin.olnpea
            order_line.line_value = ordlin.olntot
            order_line.tax = ordlin.olntax
        endmethod

        ;;; <summary>
        ;;; Maps a ORDER_LINE record into a ORDLIN record
        ;;; </summary>
        ;;; <param name="ctmst">Passed ORDER_LINE record</param>
        ;;; <param name="customer">Returned ORDLIN record</param>
        public method Unmap, void
            required in  order_line, strOrderLine
            required out ordlin, strORDLIN
            endparams
        proc
            ordlin.olnonm = order_line.order_number
            ordlin.olnlin = order_line.line_number
            ordlin.olnpcd = order_line.sku
            ordlin.olndes = order_line.description
            ordlin.olnqty = order_line.qty_ordered
            ordlin.olnqta = order_line.qty_allocated
            ordlin.olnpea = order_line.price
            ordlin.olntot = order_line.line_value
            ordlin.olntax = order_line.tax
        endmethod

        ;;; <summary>
        ;;; Loads field details into the recordSpec record
        ;;; </summary>
        private method loadRecordSpec, void
            endparams
        proc
            recordSpec.fieldCount = 9
            recordSpec.fields[1].fieldType     = "D" ;;OrderNumber
            recordSpec.fields[1].fieldSize     = 8
            recordSpec.fields[1].fieldDecimals = 0
            recordSpec.fields[2].fieldType     = "D" ;;LineNumber
            recordSpec.fields[2].fieldSize     = 3
            recordSpec.fields[2].fieldDecimals = 0
            recordSpec.fields[3].fieldType     = "A" ;;Sku
            recordSpec.fields[3].fieldSize     = 10
            recordSpec.fields[3].fieldDecimals = 0
            recordSpec.fields[4].fieldType     = "A" ;;Description
            recordSpec.fields[4].fieldSize     = 80
            recordSpec.fields[4].fieldDecimals = 0
            recordSpec.fields[5].fieldType     = "D" ;;QtyOrdered
            recordSpec.fields[5].fieldSize     = 6
            recordSpec.fields[5].fieldDecimals = 0
            recordSpec.fields[6].fieldType     = "D" ;;QtyAllocated
            recordSpec.fields[6].fieldSize     = 6
            recordSpec.fields[6].fieldDecimals = 0
            recordSpec.fields[7].fieldType     = "D" ;;Price
            recordSpec.fields[7].fieldSize     = 6
            recordSpec.fields[7].fieldDecimals = 2
            recordSpec.fields[8].fieldType     = "D" ;;LineValue
            recordSpec.fields[8].fieldSize     = 6
            recordSpec.fields[8].fieldDecimals = 2
            recordSpec.fields[9].fieldType     = "D" ;;Tax
            recordSpec.fields[9].fieldSize     = 6
            recordSpec.fields[9].fieldDecimals = 2
        endmethod

        ;;; <summary>
        ;;; Loads various SQL statements into "shared" static variables
        ;;; </summary>
        private method loadSqlStatements, void
            endparams
        proc

            if (mCreateTableStatement==^null)
                mCreateTableStatement = "CREATE TABLE OrderLine ("
                & "OrderNumber DECIMAL(8) NOT NULL,"
                & "LineNumber DECIMAL(3) NOT NULL,"
                & "Sku VARCHAR(10) NOT NULL,"
                & "Description VARCHAR(80) NOT NULL,"
                & "QtyOrdered DECIMAL(6) NOT NULL,"
                & "QtyAllocated DECIMAL(6),"
                & "Price DECIMAL(6,2),"
                & "LineValue DECIMAL(6,2),"
                & "Tax DECIMAL(6,2),"
                & "CONSTRAINT PK_OrderLine PRIMARY KEY CLUSTERED (OrderNumber ASC,LineNumber ASC))"

            if (mInsertStatement==^null)
                mInsertStatement = "INSERT INTO OrderLine ("
                & "OrderNumber,"
                & "LineNumber,"
                & "Sku,"
                & "Description,"
                & "QtyOrdered,"
                & "QtyAllocated,"
                & "Price,"
                & "LineValue,"
                & "Tax"
                & ") VALUES(:1,:2,:3,:4,:5,:6,:7,:8,:9)"

            if (mSelectByKeyStatement==^null)
                mSelectByKeyStatement = "SELECT "
                & "OrderNumber,"
                & "LineNumber,"
                & "Sku,"
                & "Description,"
                & "QtyOrdered,"
                & "QtyAllocated,"
                & "Price,"
                & "LineValue,"
                & "Tax"
                & " FROM OrderLine"
                & " WHERE OrderNumber=:1 AND LineNumber=:2"

            if (mSelectAllStatement==^null)
                mSelectAllStatement = "SELECT "
                & "OrderNumber,"
                & "LineNumber,"
                & "Sku,"
                & "Description,"
                & "QtyOrdered,"
                & "QtyAllocated,"
                & "Price,"
                & "LineValue,"
                & "Tax"
                & " FROM OrderLine"

            if (mDeleteByKeyStatement==^null)
                mDeleteByKeyStatement = "DELETE FROM OrderLine WHERE OrderNumber=:1 AND LineNumber=:2"

        endmethod

    endclass

endnamespace
