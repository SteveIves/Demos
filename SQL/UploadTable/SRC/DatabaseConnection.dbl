;;*****************************************************************************
;;
;; Title:       DatabaseConnection.dbl
;;
;; Type:        Class
;;
;; Description: Provides the ability to connect to, and represents a connection
;;              to a SQL Server database.
;;
;; Author:      "Steve Ives"
;;
;; Company:     "Synergex Professional Services Group"
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen. Any changes that you make
;;              to this file will be lost if the code is regenerated.
;;
;;*****************************************************************************
;;
import SqlUploadDemo

namespace SqlUploadDemo

	.include "CONNECTDIR:ssql.def"

    public class DatabaseConnection

		private mChannel, 		int
        private mConnectString,	string
        private mConnected, 	boolean, false

		private mMaxCursors, 	int
		private mMaxColumns, 	int
		private mBufferSize, 	int
		private mDbCursors,		int
		
		public method DatabaseConnection
			endparams
		proc
			;;Set default values for other properties
			mMaxCursors = 128
			mMaxColumns = 254
			mBufferSize = 32768
			mDbCursors = mMaxCursors

			;Initialize SQL Connection
			begin
				data sts, int
				.ifdef OS_VMS
				xcall init_ssql
				.else
				sts=%option(48,1)
				.endc
			end

		endmethod

        public method DatabaseConnection
            required in aChannel, int
            required in aConnectString, string
            endparams
			this()
        proc
			;;Save away the channel and connect string
            mChannel = aChannel
            mConnectString = aConnectString
        endmethod

        method ~DatabaseConnection
            endparams
        proc
            if (mConnected)
                this.Disconnect()
        endmethod
		
		public method Connect, void
			endparams
		proc

            ;Initialize the database channel
            if (ssc_init(mChannel,maxCursors,maxColumns,bufferSize,dbCursors)==SSQL_FAILURE)
                throw new ApplicationException("Failed to initialize database channel")

            ;Connect to the database
            if (ssc_connect(mChannel,mConnectString)==SSQL_FAILURE)
            begin
                data errtxt, a512
                data tmpLen, int
                ssc_getemsg(mChannel,errtxt,tmpLen)
                throw new ApplicationException("Failed to connect to database. Error was: "+errtxt(1:tmpLen))
            end

            mConnected = true

		endmethod
		
        public method Disconnect, void
            endparams
        proc
            if (mConnected)
			begin
                ssc_release(mChannel)
				mConnected = false
			end
        endmethod
		
		;;Public properties
		
		public property Channel, int
			method get
			proc
				mreturn mChannel
			endmethod
			method set
			proc
				mChannel = value
			endmethod
		endproperty

		public property ConnectString, string
			method get
			proc
				mreturn mConnectString
			endmethod
			method set
			proc
				mConnectString = value
			endmethod
		endproperty

		public property Connected, boolean
			method get
			proc
				mreturn mConnected
			endmethod
		endproperty

		public property MaxCursors, int
			method get
			proc
				mreturn mMaxCursors
			endmethod
			method set
			proc
				mMaxCursors = value
			endmethod
		endproperty

		public property MaxColumns, int
			method get
			proc
				mreturn mMaxColumns
			endmethod
			method set
			proc
				mMaxColumns = value
			endmethod
		endproperty

		public property BufferSize, int
			method get
			proc
				mreturn mBufferSize
			endmethod
			method set
			proc
				mBufferSize = value
			endmethod
		endproperty

		public property DbCursors, int
			method get
			proc
				mreturn mDbCursors
			endmethod
			method set
			proc
				mDbCursors = value
			endmethod
		endproperty
		
    endclass

endnamespace
