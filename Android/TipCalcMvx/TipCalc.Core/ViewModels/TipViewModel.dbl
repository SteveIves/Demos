import Cirrious.MvvmCross.ViewModels
import TipCalc.Core.Services

namespace TipCalc.Core.ViewModels
	
	public class TipViewModel extends MvxViewModel
		
		private readonly mService, @ICalculationService
		
		public method TipViewModel
			required in service, @ICalculationService
			endparams
		proc
			mService = service
		endmethod

		public override method Start, void
			endparams
		proc
			;;Set some default values
			;mSubTotal = 100
			mGenerosity = 18
			recalculate()
			parent.Start()
		endmethod

		private mSubTotal, double

		public property SubTotal, double
			method get
			proc
				mreturn mSubTotal
			endmethod
			method set
			proc
				mSubTotal = value
				RaisePropertyChanged("SubTotal")
				recalculate()
			endmethod
		endproperty
		
		private mGenerosity, int

		public property Generosity, int
			method get
			proc
				mreturn mGenerosity
			endmethod
			method set
			proc
				mGenerosity = value
				RaisePropertyChanged("Generosity")
				recalculate()
			endmethod
		endproperty
		
		private mTip, double

		public property Tip, double
			method get
			proc
				mreturn mTip
			endmethod
			method set
			proc
				mTip = value
				RaisePropertyChanged("Tip")
			endmethod
		endproperty
		
		private mTotal, double

		public property Total, double
			method get
			proc
				mreturn mTotal
			endmethod
			method set
			proc
				mTotal = value
				RaisePropertyChanged("Total")
			endmethod
		endproperty
		
		private mSplitValue, int
		
		public property SplitValue, int
			method get
			proc
				mreturn mSplitValue
			endmethod
			method set
			proc
				mSplitValue = value
				RaisePropertyChanged("SplitValue")
				RaisePropertyChanged("Split")
				RaisePropertyChanged("SplitVisible")
				recalculate()
			endmethod
		endproperty
		
		public property Split, String
			method get
			proc
				if (mSplitValue) then
					mreturn String.Format("{0} ways",mSplitValue + 1)
				else
					mreturn "1 way"
			endmethod
		endproperty
		
		private mTotalEach, double
		
		public property TotalEach, double
			method get
			proc
				mreturn mTotalEach
			endmethod
			method set
			proc
				mTotalEach = value
				RaisePropertyChanged("TotalEach")
			endmethod
		endproperty

		private mSplitVisible, boolean, false

		public property SplitVisible, boolean
			method get
			proc
				mreturn (mSplitValue>0)
			endmethod
		endproperty
		
		private method recalculate, void
			endparams
		proc
			mService.CalculateTip(mSubTotal,mGenerosity,mSplitValue+1,mTip,mTotal,mTotalEach)
			RaisePropertyChanged("Tip")
			RaisePropertyChanged("Total")
			RaisePropertyChanged("TotalEach")
		endmethod

	endclass
	
endnamespace
