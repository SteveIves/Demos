import System
import System.ComponentModel
import System.Diagnostics

namespace DemoApp.ViewModel

	;;;<summary>
	;;;Base class for all ViewModel classes in the application.
	;;;It provides support for property change notifications 
	;;;and has a DisplayName property.  This class is abstract.
	;;;</summary>
	public abstract class ViewModelBase implements INotifyPropertyChanged, IDisposable

		.region "Constructors"

		protected method ViewModelBase
			endparams
		proc

		endmethod

		.endregion ;;Constructors
		
		.region "DisplayName"

		;;;<summary>
		;;;Returns the user-friendly name of this object.
		;;;Child classes can set this property to a new value,
		;;;or override it to determine the value on-demand.
		;;;</summary>
		private mDisplayName, string
		public virtual property DisplayName, string
			method get
			proc
				mreturn mDisplayName
			endmethod
			protected method set
			proc
				mDisplayName = value
			endmethod
		endproperty

		.endregion ;;DisplayName

		.region "Debugging Aides"

		;;;<summary>
		;;;Warns the developer if this object does not have a public property with the specified name. This 
		;;;method does not exist in a Release build.
		;;;</summary>
		{Conditional("DEBUG")}
		{DebuggerStepThrough}
		public method VerifyPropertyName, void
			propertyName, String
			endparams
		proc
			;;Verify that the property name matches a real, public, instance property on this object.
			if (TypeDescriptor.GetProperties(this)[propertyName] == ^null)
			begin
				data msg, string
				msg = "Invalid property name: " + propertyName
				if (this.ThrowOnInvalidPropertyName) then
					throw new Exception(msg)
				else
					Debug.Fail(msg)
			end
		endmethod
			
		;;;<summary>
		;;;Returns whether an exception is thrown, or if a Debug.Fail() is used
		;;;when an invalid property name is passed to the VerifyPropertyName method.
		;;;The default value is false, but subclasses used by unit tests might 
		;;;override this property's getter to return true.
		;;;</summary>
		private mThrowOnInvalidPropertyName, Boolean
		protected virtual property ThrowOnInvalidPropertyName, Boolean
			method get
			proc
				mreturn mThrowOnInvalidPropertyName
			endmethod
			private method set
			proc
				mThrowOnInvalidPropertyName = value
			endmethod
		endproperty
		
		.endregion .align;;Debugging Aides

		.region "INotifyPropertyChanged Members"

		;;;<summary>
		;;;Raised when a property on this object has a new value.
		;;;</summary>
		public event PropertyChanged, @PropertyChangedEventHandler
			
		;;;<summary>
		;;;Raises this object's PropertyChanged event.
		;;;</summary>
		;;;<param name="propertyName">The property that has a new value.</param>
		protected virtual method OnPropertyChanged, void
			required in propertyName, string
			endparams
		proc
			this.VerifyPropertyName(propertyName)
			if (PropertyChanged != ^null)
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName))
		endmethod
		
		.endregion ;;INotifyPropertyChanged Members

		.region "IDisposable Members"
		
		;;;<summary>
		;;;Invoked when this object is being removed from the application
		;;;and will be subject to garbage collection.
		;;;</summary>
		public method Dispose, void
			endparams
		proc
			this.OnDispose()
		endmethod
			
		;;;<summary>
		;;;Child classes can override this method to perform 
		;;;clean-up logic, such as removing event handlers.
		;;;</summary>
		protected virtual method OnDispose, void
			endparams
		proc
		
		endmethod
		
		.ifdef DEBUG
		;;;<summary>
		;;;Useful for ensuring that ViewModel objects are properly garbage collected.
		;;;</summary>
		method ~ViewModelBase
			record
				msg, @String
			endrecord
		proc
			msg = string.Format("{0} ({1}) ({2}) Finalized", this.GetType().Name, this.DisplayName, this.GetHashCode())
			System.Diagnostics.Debug.WriteLine(msg)
		endmethod
		.endc

		.endregion ;;IDisposable Members
			
	endclass

endnamespace

