import System
import System.Diagnostics
import System.Windows.Input

namespace xfplConfig.ViewModel
    
    ;;;<summary>
    ;;;A command whose sole purpose is to relay its functionality to other objects by invoking delegates. The
    ;;;default return value for the CanExecute method is 'true'.
    ;;;</summary>
    public class RelayCommand implements ICommand
        
        public delegate ExecuteMethod, void
            param, @Object
        enddelegate
        
        public delegate CanExecuteMethod, boolean
            param, @Object
        enddelegate
        
        .region "Fields"
        
        private readonly mExecuteMethod, @ExecuteMethod
        private readonly mCanExecuteMethod, @CanExecuteMethod
        
        ;;Used to hold a strong reference to the event handler, because CommandManager
        ;; only holds a weak reference to it, so it would be garbage collected unless we
        ;; hold a strong reference to it.
        private mHoldEventHandler, @EventHandler
        
        .endregion
        
        .region "Constructors"
        
        ;;;<summary>
        ;;;Creates a new command that can always execute.
        ;;;</summary>
        ;;;<param name="execute">The execution logic.</param>
        public method RelayCommand
            required in execute, @ExecuteMethod
            endparams
            this(execute, ^null)
        proc
        endmethod
        
        ;;;<summary>
        ;;;Creates a new command.
        ;;;</summary>
        ;;;<param name="execute">The execution logic.</param>
        ;;;<param name="canExecute">The execution status logic.</param>
        public method RelayCommand
            aExecuteMethod, @ExecuteMethod
            aCanExecuteMethod, @CanExecuteMethod
            endparams
        proc
            if (aExecuteMethod == ^null)
                throw new ArgumentNullException("aExecuteMethod")
            mExecuteMethod = aExecuteMethod
            mCanExecuteMethod = aCanExecuteMethod
            ;TODO: Workaround: Doing this because we don't have add/remove methods on events
            mHoldEventHandler = new EventHandler(canExecuteChangedFired) ;Hold a strong reference!
            addhandler(CommandManager.RequerySuggested, mHoldEventHandler)
        endmethod
        
        .endregion ;;Constructors
        
        .region "ICommand Members"
        
        {DebuggerStepThrough}
        public method CanExecute, Boolean
            required in parameter, @Object
            endparams
        proc
            if (mCanExecuteMethod==^null) then
                mreturn true
            else
                mreturn mCanExecuteMethod(parameter)
        endmethod
        
        public event CanExecuteChanged, @EventHandler
        
        private method canExecuteChangedFired, void
            required in sender, @Object
            required in e, @EventArgs
            endparams
        proc
            if (CanExecuteChanged!=^null)
                CanExecuteChanged(sender,e)
        endmethod
        
        public method Execute, void
            required in parameter, @Object
            endparams
        proc
            mExecuteMethod(parameter)
        endmethod
        
        .endregion ;;ICommand Members
        
    endclass
    
endnamespace
