;******************************************************************************
;
; Title         ConvertTemperature.dbl
;
; Author:       Steve Ives (Synergex Professional Services Group)
;
; Date:         7th May June 2004
;
; Description:  An example of calling an XML web service to convert temperatures
;               from one unit of measure to another.  The call is mase via an
;               HTTP GET to the web service.
;
; Platforms:    All supported platforms
;
; Versions:     Synergy/DE 8.1.1 or higher
;
; Requirements: In order for this program to operate correctly, the host system
;               must be able to communicate with the Internet on port 80.
;
;******************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
; The web service invoked by this program is provided for customer training and
; testing purposes only, and is published without warranty or support. By using
; the web service you accept that neither the author or Synergex accept any
; responsibility for any loss or damage which may result from the use of the
; service. In addition, Synergex reserves the right to modify or withdraw the
; web service at any time, and without notice.
;
;******************************************************************************

subroutine ConvertTemperature

	.include "WND:windows.def"
	.include "WND:tools.def"
	
	record
		bldid           ,i4
		idi_params      ,i4
		errtxt          ,a80
	
	record params
		temperature     ,d8.2
		from            ,a9         ,"Farenheit"
		to              ,a9         ,"Celsius"
		result          ,a20
	
	literal
		units           ,[3]a9      ,"Celsius"
		&                           ,"Farenheit"
		&                           ,"Kelvin"
	
proc

	xcall e_enter
	xcall m_column(D_REMOVE,D_LOCAL)

    ;Create a window for the parameters and returned value
    xcall ib_input(bldid,"PARAMS",10,45)
    xcall ib_field(bldid,"TEMPERATURE",D_FLD_TYPE,D_DECIMAL,D_FLD_SIZE,8,D_FLD_DEC,2,
    &              D_FLD_POS,2,5, D_FLD_PROMPT,"Temperature",D_FLD_FPOS,2,17,
    &              D_FLD_REQUIRED,D_FLD_JUST,D_JST_LEFT)
    xcall ib_field(bldid,"FROM",  D_FLD_TYPE,D_ALPHA,D_FLD_SIZE,9,
    &              D_FLD_POS,4,11, D_FLD_PROMPT,"From",D_FLD_FPOS,4,17,
    &              D_FLD_REQUIRED,D_FLD_SELECT,1,1,3,,3,units)
    xcall ib_field(bldid,"TO",    D_FLD_TYPE,D_ALPHA,D_FLD_SIZE,9,
    &              D_FLD_POS,6,13, D_FLD_PROMPT,"To",D_FLD_FPOS,6,17,
    &              D_FLD_REQUIRED,D_FLD_SELECT,1,1,3,,3,units)
    xcall ib_field(bldid,"RESULT",D_FLD_TYPE,D_ALPHA,D_FLD_SIZE,20,
    &              D_FLD_POS,8,9,D_FLD_PROMPT,"Result",D_FLD_FPOS,8,17,
    &              D_FLD_READONLY)
    xcall ib_end(bldid,idi_params)
    xcall w_brdr(idi_params,WB_TITLE,"Temperature Conversion")

    ;Add buttons and put window on screen
    xcall b_button(idi_params,DSB_ADD,"I_OK",DSB_TEXT,"OK",,,"O")
    xcall b_button(idi_params,DSB_ADD,"CANCEL",DSB_TEXT,"Cancel",,,"C")
    xcall b_buttonset(idi_params,DSB_BOTTOM,,DSB_END,"I_OK")
    xcall u_window(D_PLACE,idi_params,5,15)

    ;Process the window
    xcall i_display(idi_params,,params)
    xcall i_next(idi_params,,"*FRST*")
    repeat
    begin
        xcall i_input(idi_params,,params,,,,D_NOTERM)

        if (g_setsts) then
            if (g_select.and.g_entnam.eq."CANCEL")
                exitloop
        else
            if (%convert_temperature(temperature,from,to,result,errtxt)) then
                xcall u_message(errtxt)
            else
            begin
                xcall i_display(idi_params,,params)
                xcall i_next(idi_params,,"*FRST*")
            end
    end

    ;Clean up
    xcall e_exit
    xreturn

endsubroutine

;******************************************************************************

function convert_temperature ,^VAL

    a_temperature   ,n
    a_from          ,a
    a_to            ,a
    a_result        ,a
    a_errortext     ,a

	.include "DBLDIR:synxml.def"
	
	stack record
		retval          ,i4
		uri             ,a500
		retdata         ,i4
		retlen          ,i4
		error           ,a80
	
	stack record xml
		parser          ,XML_PARSER_TYPE
		string          ,XML_STRING_TYPE
		document        ,XML_DOC_TYPE
		root            ,XML_ELEM_TYPE
	
proc

    ;Default to return 0 = success
    clear retval

    ;Setup the URI for the web service call
	uri = "http://localhost/UnitConversions/UnitConversions.asmx"
    uri = %atrim(uri) + "/ConvertTemperature?"
    uri = %atrim(uri) + "OriginalTemperature=" + %string(a_temperature)
    uri = %atrim(uri) + "&OriginalUnit=" + a_from
    uri = %atrim(uri) + "&TargetUnit=" + a_to

    ;Call the web service
    retval = %http_client_get(uri,10,retdata,retlen,error)

    if (retval.and.^passed(a_errortext)) then
        a_errortext = "HTTP error " + %string(retval) + "." + %atrim(error)
    else
    begin

        ;Create an XML string and load the response data from the HTTP call
        xml.string = %xml_string_create
        xcall xml_string_appendhandle(xml.string,retdata,retlen)

        ;Create an XML parser and parse the XML string
        xml.parser = %xml_parser_create
        xml.document = %xml_parser_parsestring(xml.parser,xml.string)
        xcall xml_string_delete(xml.string)
        xcall xml_parser_delete(xml.parser)

        ;Get the root element and extract it's text (the return value)
        xml.root = %xml_doc_getroot(xml.document)
        xcall xml_elem_gettext(xml.root,a_result)

        ;Deallocate the memory from the HTTP call
        retdata = %mem_proc(DM_FREE,retdata)
    end

    freturn retval

endfunction

