;
;
;Simple UI Toolkit spell checker
;
;Author Richard C. Morris
;       Synergex
;
;
record
    proxy           ,a20
    port            ,d5
    sts             ,i4

.proc ;main
    ;open the UI Toolit
    xcall u_start('spc2004_ws.ism', 1, 1)

    xcall u_dialog(proxy,,,,"Proxy server: ")
    if (proxy)
        xcall setlog("PROXY_HOST",proxy,sts)

    xcall u_dialog(^a(port),,,,"Proxy port: ")
    if (port)
        xcall setlog("PROXY_PORT",port,sts)

    ;call the main order routine
    xcall SpellIT

    ;shutdown
    xcall u_finish

    stop

.end

;
;Main order processing routine
;
.function SpellIT, ^VAL, STACK
;end of argument list

    ;include standard includes
.include 'DBLDIR:windows.def'
.include 'WND:tools.def'
.include 'DBLDIR:synxml.def'

    ;include program includes
.include 'spell_it' repository, record='spell_it'

    ;intermal working variables

.align
record ivar
    ii,         i4      ;counter
    ij,         i4      ;counter
    row,        i4
    col,        i4
    pos,        i4
    len,        i4
    highlight,  i4
    fail,       i4
    word_num,   i4      ;word number
    array_num,  i4      ;default array number

    wsxml,      i4      ;pointer to web spell request string
    wrdxml,     i4      ;pointer to wrd suggestion response
    ret_array,  i4      ;array pointer
    have_sel_window,i4

    start_pos,  i4
    end_pos,    i4

    col_main,   i4      ;main menu column ID
    wnd_spellit,i4      ;spell checker input window
    inp_spellit,i4      ;spell checker input window
    sel_suggest,i4      ;suggested words list
    inp_text,   i4      ;text to spell check input window

    ;XML pasrer elements

    parser,         XML_PARSER_TYPE         ;parser instance
    response,       XML_DOC_TYPE            ;response document
    xml_String,     XML_STRING_TYPE         ;string pointer
    root,           XML_ELEM_TYPE           ;root node
    rootchildren,   XML_ELEMLIST_TYPE       ;root child collection
    rootelement,    XML_ELEM_TYPE           ;root elements
    misspelledchildren, XML_ELEMLIST_TYPE       ;detail child collection
    misspelledelement,  XML_ELEM_TYPE           ;detail elements
    detailelement,  XML_ELEM_TYPE           ;detail elements
    suggestionchildren, XML_ELEMLIST_TYPE       ;detail child collection
    suggestionelement,  XML_ELEM_TYPE           ;detail elements

record avar
    tmpstring,  a1000
    wordtospell,a30
    tagname,    a50
    errmsg,     a100
    temp,       a100

external function
    tostring,           a
    stringnospace,      a

record sample_text
    ,   a700

local record sample
    sample_array,       [5]a    ,'this is a sammple of text'
&                               ,'when I try this I gat a valid replly from my email'
&                               ,'Synergex is our Compny name'
&                               ,'Wellcome to the SPC2004 conference'
&                               ,'Thankyou and Hapy Spelling!'

.align
record
    suggection_pnt,     i4
    word_count,         d3

structure suggestion_array
    suggestioncount,    i4      ;number of suggested words
    word_pntr,          i4      ;pointer to suggested word list
    word,               a30     ;word found

structure word_array
    word,               a30     ;suggested word array

;create some easy to use macro's

.define m$suggestion(fld, cnt) ^m(suggestion_array[cnt].fld, ret_array)
.define m$word(cnt) ^m(word_array[cnt].word, m$suggestion(word_pntr, ii))

.proc

    call initialise
    call loadUIobjects

    call get_spell_text

    freturn TRUE

initialise,
    clear ^i(ivar)

    return

loadUIobjects,

    ;Load the UI objects from our window library

    xcall m_ldcol(col_main, , 'col_main', , , , D_GLOBAL)
    xcall i_ldinp(inp_spellit, , 'inp_spellit', D_NOPLC)
    xcall i_ldinp(inp_text, , 'inp_text', D_NOPLC)

    ;create a text window
    xcall w_proc(WP_CREATE, wnd_spellit, 'spelltxt', 10, 70)
    xcall w_brdr(wnd_spellit, WB_ON, WB_DRAGOFF)
    xcall w_disp(wnd_spellit, WD_COLOR, 8)

    return


get_spell_text,

    xcall u_window(D_PLACE, inp_text)
    repeat
    begin
        xcall i_input(inp_text,,sample_text)
        using g_entnam select
('BTN_CLEAR'),
        begin
            clear sample_text
            xcall i_display(inp_text,, sample_text)
            xcall i_next(inp_text,, '*frst*')
        end
('BTN_DEFAULT'),
        begin
rcm,            incr array_num
            if (array_num.gt.5) array_num=1
            sample_text=sample_array[array_num]
            xcall i_display(inp_text,, sample_text)
            xcall i_next(inp_text,, '*frst*')
        end
('BTN_SPELL'),
        begin
            call call_spell_checker
            xcall i_display(inp_text,, sample_text)
            xcall i_next(inp_text,, '*frst*')
        end
        endusing
    end

    return

call_spell_checker,

    ;
    ;call the spell checker web method
    ;
    xcall cre_string(wsxml) ;create a currency description XML string

    xcall add_string(wsxml, "http://ws.cdyne.com/SpellChecker");Required URL
    xcall add_string(wsxml, "/check.asmx/CheckTextBody")        ;Web service
    xcall add_string(wsxml, "?BodyText=" + %stringnospace(sample_text)) ;Developer ID
    xcall add_string(wsxml, "&LicenseKey=0")    ;Developer ID

    ;execute it and parse out the return string : "XX,XX,XX,XX"

    if (!%executerequest(wsxml, wrdxml))
    begin
        call extract_suggested_words
        if (word_count)
        begin
            ;go and spell check it!
            call spell_check_it
        end
    end

    return

extract_suggested_words,

    ;
    ;extract the suggected words from the return XML
    ;

    parser=%xml_parser_create()

    ;need to convert our return pointer to a string

    xml_string = %xml_string_create
    fail=%xml_string_appendhandle(xml_string,  wrdxml,  %stringsize(wrdxml))
    if (!fail)
    begin
        ;now we can process the XML

        ;load XML response document

        response=%xml_parser_parsestring(parser, xml_string)

        if (response)
        then
        begin
            ;valid document
            root=%xml_doc_getroot(response)

            ;get the children

            rootchildren=%xml_elem_children(root)

            ;find the number of miss-spelled words!

            rootelement=%xml_elemlist_findtag(rootchildren, "MisspelledWordCount")
            xcall xml_elem_gettext(rootelement,  temp)
            word_count=temp
            if (!word_count)
                exit    ;nothing spelt wrong!

            ;create a word count array

            ret_array=%mem_proc(DM_ALLOC, ^size(suggestion_array)*word_count)

            ;get the suggested replacement details

            for ii from 1 thru %xml_elemlist_count(rootchildren)
            begin
                ;get element details
                misspelledelement=%xml_elemlist_item(rootchildren, ii)
                xcall xml_elem_getname(misspelledelement, tagname)

                if (tagname.eq.'MisspelledWord ')
                begin
                    ;get the word count and all suggested words
                    misspelledchildren=%xml_elem_children(misspelledelement)
                    detailelement=%xml_elemlist_findtag(misspelledchildren, "SuggestionCount")
                    xcall xml_elem_gettext(detailelement, temp)
                    m$suggestion(suggestioncount, ii)=temp

                    ;allocate some memory for the suggested words
                    m$suggestion(word_pntr, ii) = %mem_proc(DM_ALLOC, ^size(word_array)*m$suggestion(suggestioncount, ii))

                    ;get the actual word in the text
                    detailelement=%xml_elemlist_findtag(misspelledchildren, "word")
                    xcall xml_elem_gettext(detailelement, m$suggestion(word, ii))

                    ;now load all the suggested word into memeory!
                    for ij from 1 thru %xml_elemlist_count(misspelledchildren)
                    begin
                        suggestionelement=%xml_elemlist_item(misspelledchildren, ij)
                        xcall xml_elem_getname(suggestionelement, tagname)

                        if (tagname.eq.'Suggestions')
                        begin
                            xcall xml_elem_gettext(suggestionelement, m$word(ij))
                        end
                    end
                end
            end
        end
        else
        begin
            xcall xml_parser_error(parser,  errmsg)
            xcall u_message(errmsg)
        end

    end

    ;delete the parser instance
    if (parser)
        xcall xml_parser_delete(parser)

    return

spell_check_it,

    ;for each wrongly spelt word, do thenfollowing;
    ;1.  Highlight the word on the screen
    ;2.  Build a selection window containing the suggested words
    ;3.  Allow user to select the right word

    for word_num from 1 thru word_count
    begin
        wordtospell = m$suggestion(word, word_num)
        call build_selection_window
        call put_text
        call process_window
        if (g_entnam.eq.'BTN_EXIT')
            exitloop

        if (g_entnam.ne.'BTN_IGNORE')
        begin
            ;replace misspelt word with chosen word

            if (start_pos .and. end_pos)
            then
                sample_text=sample_text(1,start_pos) + %atrim(spell_it.suggestion) + sample_text(end_pos, 700)
            else
                if (!start_pos)
                then
                    sample_text=%atrim(spell_it.suggestion) + sample_text(end_pos, 700)
                else
                    sample_text=sample_text(1,start_pos) + %atrim(spell_it.suggestion)
        end
    end

    return

build_selection_window,

    ;build a selection window, and assign to the input field

    if (have_sel_window)
    begin
        xcall i_fldsel(inp_spellit, 'suggestion')
        xcall u_window(D_DELETE, sel_suggest)
    end

    ii=word_num
    xcall s_selbld(sel_suggest, 'suggest', m$suggestion(suggestioncount, word_num), 5, m$word(1))

    ;assign to window

    xcall i_fldsel(inp_spellit, 'suggestion', sel_suggest)
    xcall u_logwnd(sel_suggest)

    have_sel_window=TRUE

    return


put_text,

    ;
    ;put some default wrongly spelt text into the window
    ;
    xcall w_disp(wnd_spellit, WD_CLEAR)

    row=1
    clear col, pos, highlight
    repeat
    begin
        incr pos
        if (pos.gt.%trim(sample_text))
            exitloop    ;end of text

        incr col
        if (col.gt.70)
        begin
            col=1
            incr row
            if (sample_text(pos:1).eq." ")
                incr pos    ;remove leading space!
        end

        ;have we hit the current miss-spelt word?

        if (highlight)
        then
        begin
            if (sample_text(pos:1).eq." " .or. sample_text(pos:1).eq.".")
            begin
                clear highlight
                end_pos=pos
            end
        end
        else
        begin
            len=%trim(wordtospell)
            if (pos+len.le.^size(sample_text))  ;room to test!
            begin
                if (sample_text(pos:len).eq.wordtospell)
                begin
                    highlight=TRUE
                    start_pos=pos-1
                end
            end
        end

        if (highlight)
            xcall w_disp(wnd_spellit, WD_ATTR, ATTR_SET + ATTR_RVRS)

        xcall w_disp(wnd_spellit, WD_POS, row, col, sample_text(pos:1))

        if (highlight)
            xcall w_disp(wnd_spellit, WD_ATTR, ATTR_CLR + ATTR_RVRS)

    end

    return

process_window,

    ;
    ;allow the user to select the currencies and calculate the conversion
    ;
    xcall u_window(D_PLACE, wnd_spellit, 5, 6)
    xcall u_window(D_PLACE, inp_spellit)

    xcall i_init(inp_spellit)
    xcall i_input(inp_spellit, , spell_it)

    xcall u_window(D_REMOVE, inp_spellit, wnd_spellit)
    xcall u_window(D_REMOVE, wnd_spellit)

    return

.end

;
;initialise string
;
.function cre_string, ^VAL, STACK
    a_xml,      n   ;pointer to string
    ;end of argument list

.proc

    if (!a_xml)
    then
        ;create a memory segment
        a_xml=%mem_proc(DM_ALLOC+DM_STATIC+DM_BLANK, 1)
    else
        ;initialise existing memeory
        a_xml=%mem_proc(DM_RESIZ+DM_STATIC+DM_BLANK, 1, a_xml)

    freturn TRUE

.end

;
;delete string object
;
.function del_string, ^VAL, STACK
    a_xml,      n   ;pointer to string
    ;end of argument list

.proc

    a_xml=%mem_proc(DM_FREE, a_xml)

    freturn TRUE

.end

;
;resize string
;
.function resize_mem, ^VAL, STACK
    a_xml,      n   ;pointer to string
    a_bytes,    n   ;additional number of bytes
    a_olen,     n   ;(optional) return original length
    a_nlen,     n   ;(optional) return new length
    ;end of argument list

.align
record
    length,     i4  ;length of memory string

.proc

    ;create a memory segment
    if (a_bytes)
    begin
        length = %mem_proc(DM_GETSIZE, a_xml)
        if (%passed(a_olen))
            a_olen=length

        a_xml=%mem_proc(DM_RESIZ+DM_STATIC+DM_BLANK, length + a_bytes, a_xml)

        if (%passed(a_nlen))
            a_nlen=%mem_proc(DM_GETSIZE, a_xml)
    end

    freturn TRUE

.end

;
;Add a string to a memory string
;
.function add_string, ^VAL, STACK
    a_xml,      n   ;pointer to string
    a_string,   a   ;string to add
    ;end of argument lsit

.align
record ivar
    olen,       i4  ;original length of string
    nlen,       i4  ;new length of string

structure char  ;enable access to our string
    ,   a1

.proc

    if (%size(a_string))    ;make sure we have something to add!
    begin
        xcall resize_mem(a_xml, %size(a_string), olen, nlen)
        ^m(char(olen,
        &       nlen), a_xml)=a_string
    end

    freturn TRUE

.end

;
;Return the string based on a passed pointer
;
.function tostring, STACK   ;returns a STRING
    a_xml,      n   ;pointer to string
    ;end of argument lsit

.align
record
    length,     i4

structure char
    ,       a1  ;structure to map string from pointer

.proc

    freturn ^m(char(1:%mem_proc(DM_GETSIZE, a_xml)), a_xml)

.end

;
;Return the string length
;
.function stringsize, ^VAL, STACK
    a_xml,      n   ;pointer to string
    ;end of argument lsit

.proc

    freturn %mem_proc(DM_GETSIZE, a_xml)

.end

.function executerequest, ^VAL, STACK
    a_xml,      n   ;pointer to request string
    a_retxml,   n   ;pointer to return XML string
    ;end of argumetn list

.align
record
    status,     i4  ;call status
    length,     i4  ;length of return XML
    error,      a80 ;return error code

.include 'DBLDIR:synxml.def'

external function
    tostring,   a       ;return the string from a pointer

.define D_HTTP_TIMEOUT  30

.proc

    ;Use the HTTP API to execute the requet

    status = %HTTP_CLIENT_GET(%tostring(a_xml),  D_HTTP_TIMEOUT,
    &       a_retxml, length, error,, "spell.log")

    freturn status

.end

;
;Replace all spaces in a string with HTTP spaces (%20)
;
.function stringnospace, STACK
    a_string,   a   ;string containg spaces
    ;end of argument lsit

record ivar
    pos,    i4  ;position of space
    tmpxml, i4  ;temp memory pointer
    locxml, i4  ;local XMl pointer
    olen,   i4  ;original length
    nlen,   i4  ;new length
    start,  i4  ;search start position

structure char
    ,       a1  ;memory mapping structure


external function
    tostring,   a       ;return the string from a pointer

.define HTTP_SPACE  ,"%20"

.proc

    clear ^i(ivar)
    xcall cre_string(tmpxml)

    pos=%instr(start = 1, a_string, ' ')
    while pos .and. start.ne.pos
    begin
        xcall resize_mem(tmpxml, (pos - start) + ^size(HTTP_SPACE), olen, nlen)
        ^m(char(olen:pos-start), tmpxml)=a_string(start:pos-1)
        ^m(char(nlen - ^size(HTTP_SPACE):^size(HTTP_SPACE)), tmpxml)=HTTP_SPACE
        start = pos+1
        pos=%instr(start, a_string, ' ')
    end

    ;string final space!

    ^m(char(nlen - ^size(HTTP_SPACE):^size(HTTP_SPACE)), tmpxml)=""

    ;because thenstring type above is STATIC, we need to move it to a
    ;local memory string, and return that!

    nlen=%mem_proc(DM_GETSIZE, tmpxml)
    locxml=%mem_proc(DM_ALLOC, nlen)
    ^m(char(1:nlen), locxml) = %tostring(tmpxml)
    tmpxml=%mem_proc(DM_FREE, tmpxml)

    freturn %atrim(^m(char(1:nlen), locxml))

.end



