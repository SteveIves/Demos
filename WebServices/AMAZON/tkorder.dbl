;
;
;Simple UI Toolkit order entry program
;
;Provides searching of Amazon products, using web services
;
;Author Richard C. Morris
;       Synergex
;
;

record
    proxy           ,a20
    port            ,d5
    sts             ,i4



.proc ;main

    ;open the UI Toolit
    xcall u_start('spc2004_ws.ism', 1, 1)

    xcall u_dialog(proxy,,,,"Proxy server: ")
    if (proxy)
        xcall setlog("PROXY_HOST",proxy,sts)

    xcall u_dialog(^a(port),,,,"Proxy port: ")
    if (port)
        xcall setlog("PROXY_PORT",port,sts)

    ;call the main order routine
    xcall tkOrder

    ;shutdown
    xcall u_finish

    stop

.end

;
;Main order processing routine
;
.function tkOrder, ^VAL, STACK
;end of argument list

    ;include standard includes
.include 'WND:tools.def'
.include 'DBLDIR:synxml.def'

    ;include program includes
.include 'SEARCH' repository, record='search'

    ;intermal working variables

.align
record ivar
    fail,           i4                  ;call status flag
    errflg,         i4                  ;general error processing flag
    ii,             i4                  ;counter
    ij,             i4                  ;counter
    ik,             i4                  ;counter
    status,         i4                  ;function status value
    outxml,         i4                  ;pointer to xml string
    retxml,         i4                  ;pointer to return XML structure

    col_main,       i4                  ;main menu column ID
    inp_search,     i4                  ;search input window
    inp_result,     i4                  ;results input window

    ;XML pasrer elements

    parser,         XML_PARSER_TYPE     ;parser instance
    response,       XML_DOC_TYPE        ;response document
    xml_String,     XML_STRING_TYPE     ;string pointer
    root,           XML_ELEM_TYPE       ;root node
    rootchildren,   XML_ELEMLIST_TYPE   ;root child collection
    rootelement,    XML_ELEM_TYPE       ;root elements
    detailchildren, XML_ELEMLIST_TYPE   ;detail child collection
    detailelement,  XML_ELEM_TYPE       ;detail elements
    authorchildren, XML_ELEMLIST_TYPE   ;author child collection
    authorelement,  XML_ELEM_TYPE       ;author elements

    resnum,         i4                  ;element number of result table
    reshdl,         i4                  ;handle of result table

record avar
    char,           a1                  ;temp char variable
    errmsg,         a100                ;error message stringc
    tagname,        a100                ;element tag name
    tmpstring,      a1000               ;temp string variable

external function
    tostring,       a                   ;return the string from a pointer
    removecurrency, a                   ;remove leading currency indicator

.include 'results' repository, structure="results"

.define D_RES_MAX,  100

.proc

    call initialise
    call loadUIobjects

    call process_window


    freturn TRUE

initialise,
    clear ^i(ivar)

    return

loadUIobjects,

    ;Load the UI objects from our window library

    xcall m_ldcol(col_main, , 'col_main', , , , D_GLOBAL)
    xcall i_ldinp(inp_search, , 'inp_search', D_NOPLC)
    xcall i_ldinp(inp_result, , 'inp_result', D_NOPLC)

    return

process_window,

    ;process the search window

    xcall u_window(D_PLACE, inp_search)
    search.no_pages=10
    xcall i_display(inp_search,,search)
    xcall i_next(inp_search,,"*FRST*")

    ;event loop

    repeat
    begin
        xcall i_input(inp_search, , search)
        case g_entnam of
        begincase
        "BTN_EXIT":
            exitloop
        endcase

        ;set complete
        call process_search
        xcall i_init(inp_search)
    end

    xcall u_window(D_REMOVE, inp_search)

    return

process_search,

    ;process the requred search

    if (%buildrequest(outxml, search))
    begin
        ;request built ok
        retxml = %mem_proc(DM_ALLOC+DM_STATIC,  1)

        if (!%executerequest(outxml, retxml))
        then
        begin
            ;successful call.  Process return XML
            call parseresponseXML
        end
        else
        begin
            ;failure
            xcall u_message('failed!')
        end
    end

    return


parseresponseXML,

    reshdl=%mem_proc(DM_ALLOC,  ^size(results)*D_RES_MAX)
    ;
    ;parse out the response XML
    ;

    parser=%xml_parser_create()

    ;need to convert our return pointer to a string

    xml_string = %xml_string_create
    fail=%xml_string_appendhandle(xml_string,  retxml,  %stringsize(retxml))
    if (!fail)
    begin
        ;now we can process the XML

        ;load XML response document

        response=%xml_parser_parsestring(parser, xml_string)

        if (response)
        then
        begin
            ;valid document
            root=%xml_doc_getroot(response)

            ;get the children

            rootchildren=%xml_elem_children(root)

            ;work through the child elements...

            clear resnum
            for ii from 1 thru %xml_elemlist_count(rootchildren)
            begin
                ;get element details
                rootelement=%xml_elemlist_item(rootchildren, ii)
                xcall xml_elem_getname(rootelement,  tagname)

                using tagname select
("Details"),    begin
                    ;found items
                    detailchildren=%xml_elem_children(rootelement)

                    incr resnum
                    ;work through the child elements...

                    for ij from 1 thru %xml_elemlist_count(detailchildren)
                    begin
                        detailelement=%xml_elemlist_item(detailchildren, ij)
                        xcall xml_elem_getname(detailelement, tagname)
                        xcall xml_elem_gettext(detailelement, tmpstring)
                        call parseelementtag
                    end
                end
("ErrorMsg"),   begin
                    xcall xml_elem_gettext(rootelement,  errmsg)
                    xcall u_message(errmsg)
                    errflg=TRUE
                    exitloop    ;abort processing
                end
                endusing
            end
        end
        else
        begin
            xcall xml_parser_error(parser,  errmsg)
            xcall u_message(errmsg)
        end

    end

    ;delete the parser instance
    if (parser)
        xcall xml_parser_delete(parser)

    ;have ew got details to display?
    if (!errflg)
    begin
        call displayresponse
    end

    return

parseelementtag,

    ;extract tag details

    using tagname select
("Asin"),
    begin
        ;product ASIN code
        ^m(results[resnum].item_number, reshdl)=tmpstring
    end
("ProductName"),
    begin
        ;
        ^m(results[resnum].product_name_overlay, reshdl)=tmpstring
    end
("Authors", "Artists"),
    begin
        ;
        ;There are multiple authors (possibly) so we will accept
        ;upto five
        ;
        authorchildren=%xml_elem_children(detailelement)

        ;work through the child elements...

        for ik from 1 thru %xml_elemlist_count(detailchildren)
        begin
            if (ik.gt.5)
                exitloop    ;only got 5 elemet array

            authorelement=%xml_elemlist_item(authorchildren, ik)
            xcall xml_elem_gettext(authorelement, tmpstring)
            ^m(results[resnum].authors[ik], reshdl)=tmpstring
        end
    end
("ReleaseDate"),
    begin
        ;
        ^m(results[resnum].release_date, reshdl)=%parsedate(tmpstring)

    end
("Manufactureer"),
    begin
        ;
        ^m(results[resnum].manufacturer, reshdl)=tmpstring
    end
("Availability"),
    begin
        ;
        ^m(results[resnum].availability_overlay, reshdl)=tmpstring
    end
("ListPrice"),
    begin
        ;
        ^m(results[resnum].list_price, reshdl)=%removecurrency(tmpstring)
    end
("OurPrice"),
    begin
        ;
        ^m(results[resnum].our_price, reshdl)=%removecurrency(tmpstring)
    end
("UsedPrice"),
    begin
        ;
        ^m(results[resnum].used_price, reshdl)=%removecurrency(tmpstring)
    end
    endusing

    return

displayresponse,

    xcall e_enter
    xcall u_window(d_remove,  D_ALL)

    xcall u_window(D_PLACE,  inp_result)
    ii=1
    call display_result_window

    repeat
    begin
        xcall i_input(inp_result, , ^m(results[ii],  reshdl))
        using g_entnam select
("BTN_PREV"), begin
                decr ii
                if (ii.eq.0)
                    ii=1
                call display_result_window
              end
("BTN_NEXT"), begin
                incr ii
                if (ii.gt.resnum)
                    ii=resnum
                call display_result_window
              end
("BTN_CLOSE"), begin
                exitloop
               end
        endusing
    end

    xcall u_window(D_REMOVE, inp_result)

    xcall e_exit

    return

display_result_window,

    xcall i_display(inp_result, , ^m(results[ii],  reshdl))

    return

.end

;
;build Amazon request string
;
.function buildrequest, ^VAL, STACK
    a_xml,      n   ;pointer to XML string
    .include 'SEARCH' repository, group="search"
;end of argument list

external function
    stringnospace,  a   ;replaces spaces with %20

.define D_AMAZON_ID "D2AGYITRB56S22"

.proc

    onerror badfunction
    xcall init_mem(a_xml)

    using search.search_type select
    ("books"),
    begin
        xcall add_string(a_xml, "http://xml.amazon.com/onca/xml3")
        xcall add_string(a_xml, "?t=webservices-20")
        xcall add_string(a_xml, "&dev-t=" + D_AMAZON_ID)
        xcall add_string(a_xml, "&AuthorSearch=")
        xcall add_string(a_xml, %stringnospace(search.search_for))  ;Search string
        xcall add_string(a_xml, "&mode=books&type=lite&page=1&f=xml")
    end
    ("music"),
    begin
        xcall add_string(a_xml, "http://xml.amazon.com/onca/xml3")
        xcall add_string(a_xml, "?t=webservices-20")
        xcall add_string(a_xml, "&dev-t=D2AGYITRB56S22")
        xcall add_string(a_xml, "&ArtistSearch=")
        xcall add_string(a_xml, %stringnospace(search.search_for))  ;Search string
        xcall add_string(a_xml, "&mode=music&type=lite&page=1&f=xml")
    end
    ("electronics"),
    begin
        xcall add_string(a_xml, "http://xml.amazon.com/onca/xml3")
        xcall add_string(a_xml, "?t=webservices-20")
        xcall add_string(a_xml, "&dev-t=D2AGYITRB56S22")
        xcall add_string(a_xml, "&KeywordSearch=")
        xcall add_string(a_xml, %stringnospace(search.search_for))  ;Search string
        xcall add_string(a_xml, "&mode=electronics&type=lite&page=1&f=xml")
    end
    endusing

    if (!TRUE)
    then
badfunction,
        freturn FALSE
    else
        freturn TRUE
.end

;
;initialise string
;
.function init_mem, ^VAL, STACK
    a_xml,      n   ;pointer to string
    a_nonstat,  n   ;if passed then don't create static
    ;end of argument list

record
    stat_qual,  i4  ;static qualifier

.proc

    stat_qual = DM_STATIC
    if (%passed(a_nonstat))
        clear stat_qual

    if (!a_xml)
    then
        ;create a memory segment
        a_xml=%mem_proc(DM_ALLOC+stat_qual+DM_BLANK, 1)
    else
        ;initialise existing memeory
        a_xml=%mem_proc(DM_RESIZ+stat_qual+DM_BLANK, 1, a_xml)

    freturn TRUE

.end

;
;resize string
;
.function resize_mem, ^VAL, STACK
    a_xml,      n   ;pointer to string
    a_bytes,    n   ;additional number of bytes
    a_olen,     n   ;(optional) return original length
    a_nlen,     n   ;(optional) return new length
    ;end of argument list

.align
record
    length,     i4  ;length of memory string

.proc

    ;create a memory segment
    if (a_bytes)
    begin
        length = %mem_proc(DM_GETSIZE, a_xml)
        if (%passed(a_olen))
            a_olen=length

        a_xml=%mem_proc(DM_RESIZ+DM_STATIC+DM_BLANK, length + a_bytes, a_xml)

        if (%passed(a_nlen))
            a_nlen=%mem_proc(DM_GETSIZE, a_xml)
    end

    freturn TRUE

.end

;
;Add a string to a memory string
;
.function add_string, ^VAL, STACK
    a_xml,      n   ;pointer to string
    a_string,   a   ;string to add
    ;end of argument lsit

.align
record ivar
    olen,       i4  ;original length of string
    nlen,       i4  ;new length of string

structure char  ;enable access to our string
    ,   a1

.proc

    if (%size(a_string))    ;make sure we have something to add!
    begin
        xcall resize_mem(a_xml, %size(a_string), olen, nlen)
        ^m(char(olen,
        &       nlen), a_xml)=a_string
    end

    freturn TRUE

.end

;
;Return the string based on a passed pointer
;
.function tostring, STACK   ;returns a STRING
    a_xml,      n   ;pointer to string
    ;end of argument lsit

.align
record
    length,     i4

structure char
    ,       a1  ;structure to map string from pointer

.proc

    freturn ^m(char(1:%mem_proc(DM_GETSIZE, a_xml)), a_xml)

.end

;
;Return the string length
;
.function stringsize, ^VAL, STACK
    a_xml,      n   ;pointer to string
    ;end of argument lsit

.proc

    freturn %mem_proc(DM_GETSIZE, a_xml)

.end

.function executerequest, ^VAL, STACK
    a_xml,      n   ;pointer to request string
    a_retxml,   n   ;pointer to return XML string
    ;end of argumetn list

.align
record
    status,     i4  ;call status
    length,     i4  ;length of return XML
    error,      a80 ;return error code

.include 'DBLDIR:synxml.def'

record
    log,        i4  ;logical test
    temp,       a500

external function
    tostring,   a       ;return the string from a pointer

.define D_HTTP_TIMEOUT  30

.proc

    ;Use the HTTP API to execute the requet

    status = %HTTP_CLIENT_GET(%tostring(a_xml),D_HTTP_TIMEOUT,a_retxml,length,error,,'amazon.log')

    freturn status

.end

;
;Replace all spaces in a string with HTTP spaces (%20)
;
.function stringnospace, STACK
    a_string,   a   ;string containg spaces
    ;end of argument lsit

record ivar
    pos,    i4  ;position of space
    tmpxml, i4  ;temp memory pointer
    locxml, i4  ;local XMl pointer
    olen,   i4  ;original length
    nlen,   i4  ;new length
    start,  i4  ;search start position

structure char
    ,       a1  ;memory mapping structure


external function
    tostring,   a       ;return the string from a pointer

.define HTTP_SPACE  ,"%20"

.proc

    clear ^i(ivar)
    xcall init_mem(tmpxml)

    pos=%instr(start = 1, a_string, ' ')
    while pos .and. start.ne.pos
    begin
        xcall resize_mem(tmpxml, (pos - start) + ^size(HTTP_SPACE), olen, nlen)
        ^m(char(olen:pos-start), tmpxml)=a_string(start:pos-1)
        ^m(char(nlen - ^size(HTTP_SPACE):^size(HTTP_SPACE)), tmpxml)=HTTP_SPACE
        start = pos+1
        pos=%instr(start, a_string, ' ')
    end

    ;string final space!

    ^m(char(nlen-^size(HTTP_SPACE):^size(HTTP_SPACE)),tmpxml)=""

    ;because thenstring type above is STATIC, we need to move it to a
    ;local memory string, and return that!

    nlen=%mem_proc(DM_GETSIZE, tmpxml)
    locxml=%mem_proc(DM_ALLOC, nlen)
    ^m(char(1:nlen), locxml) = %tostring(tmpxml)
    tmpxml=%mem_proc(DM_FREE, tmpxml)

    freturn %atrim(^m(char(1:nlen), locxml))

.end

.function parsedate, ^VAL, STACK
    a_indate,   a   ;input date

.align
record
    pos1,       i4      ;position
    pos2,       i4      ;position

.align
record
    outdate,    d8
    year,       d4 @outdate
    mon,        d2 @outdate+4
    day,        d2 @outdate+6

.proc

    clear outdate
    onerror baddate

    pos1=%instr(1,  a_indate,  ' ')
    pos2=%instr(1,  a_indate,  ',')

;    September, 2002

    if (pos1)
    begin
        if (pos1.gt.3)      ;they may not give us the day!
        then
        begin
            day=1
            pos1=0
        end
        else
            day=a_indate(1,pos1-1)

        ;check for month

        using a_indate(pos1+1,pos2-1) select
        ('January'),    mon=1
        ('February'),   mon=2
        ('March'),      mon=3
        ('April'),      mon=4
        ('May'),        mon=5
        ('June'),       mon=6
        ('July'),       mon=7
        ('August'),     mon=8
        ('September'),  mon=9
        ('October'),    mon=10
        ('November'),   mon=11
        ('December'),   mon=12
        (),             pos1=1/pos2=0   ;force an error!
        endusing

        ;now the year

        year=a_indate(pos2+2, %trim(a_indate))

    end

    if (!1)
    begin
baddate,
        clear outdate
    end

    freturn outdate

.end

.function removecurrency, STACK
    a_invalue,  a   ;input string value

.proc

    freturn a_invalue(2,%trim(a_invalue))

.end

