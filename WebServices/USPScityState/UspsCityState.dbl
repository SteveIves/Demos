;*****************************************************************************
;
; Title:		UspsCityState
;
; Description:	An example of using the "USPS City/State Lookup" web service
;
; Author:		Steve Ives (Synergex Professional Services Group)
;
; Date:			12th October 2005
;
; Versions:		Synergy/DE V8.1.3a and higher
;
; Platforms:	All platforms
;
;*****************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
;*****************************************************************************
;
; The following code provides an example of using the Synergy XML API and the
; Synergy HTTP API to interact with the "USPS City/State Lookup" web service.
;
;   THIS CODE WILL NOT WORK UNTIL YOU HAVE TAKEN SEVERAL STEPS:
;
;   - Ensure you are running Synergy 8.3.1a or higher.  Communicating with the
;     USPS web services requires a fix which was included in 8.1.3a.  This
;     software is very unlikely to work with earlier Synergy versions.
;
;   - Sign up for a web services USERID at USPS.COM
;
;       Refer to http://www.usps.com/webtools/welcome.htm
;
;   - Set several environment variables to specify your USPS environment
;           
;       USPS_USERID     User ID obtained from USPS.COM
;       USPS_TEST_URL   URL of test server (see USPS documentation)
;       USPS_LIVE_URL   URL of live server (from USPS after testing)
;
;       At the time of writing the test URL is:
;
;       http://testing.shippingapis.com/ShippingAPITest.dll
;
;		DO NOT INCLUDE THE ?API= or the &XML= as these are added by the code
;
;   - If you need to go through a proxy server in order to access the internet
;     then you will need to define the proxy server for the HTTP API. This is
;     done with these environment variables:
;
;       HTTP_PROXY_HOST     Host name or IP address of proxy server
;       HTTP_PROXY_PORT     Proxy server port number
;       HTTP_PROXY_SUBNET   (may not be needed)
;       HTTP_PROXY_LOCAL    (may not be needed)
;
;     Refer to the Synergy Language Reference manual for further information.
;
;   - Test your application against the test server
;
;	- Apply for and been approved for use of the "Address validation" services.
;	  This last part is likely to be the hardest step!
;	
;	- Have USPS move your account to the production server
;
;	Detailed documentation for all of the above is included in the developer
;	information which is obtained from the USPS web site. Please DO NOT
;	CONTACT SYNERGEX with questions relating to this, as we will be unable
;	to provide any assistance in this area.
;
;*****************************************************************************
.ifdef USPSCITYSTATE_INCLUDE ;BEGINNING OF INCLUDE SECTION
;*****************************************************************************
.undefine USPSCITYSTATE_INCLUDE

;-----------------------------------------------------------------------------
.ifdef USPSCITYSTATE_INTERNAL
.undefine USPSCITYSTATE_INTERNAL

.define D_API_NAME			"CityStateLookup"		;USPS API function name
.define D_HTTP_LOG_FILE		"UspsCityState.log"		;HTTP log file
.define D_HTTP_TIMEOUT		10						;HTTP request timeout

.endc ;USPSCITYSTATE_INTERNAL
;-----------------------------------------------------------------------------

.ifndef USPSCITYSTATE_DEFINES
.define USPSCITYSTATE_DEFINES

;Defines go here

.endc ;USPSCITYSTATE_DEFINES

;External functions go here

;Structures go here

;*****************************************************************************
.else ;USPSCITYSTATE_INCLUDE ;END OF INCLUDE SECTION, BEGINNING OF PROGRAM CODE
;*****************************************************************************

;=============================================================================
;
; Title:		UspsCityStateTest
;
; Description:	An example of using the "USPS City/State Lookup" web service
;
; Author:		Steve Ives (Synergex Professional Services Group)
;
; Date:			12th October 2005
;
;=============================================================================
;
.main UspsCityStateTest

.define USPSCITYSTATE_INCLUDE
.include "UspsCityState.dbl"

record ivars
	ok				,i4			;OK to continue
	tt				,i4			;Terminal channel
	len				,i4			;Length of a string

record avars
	userid          ,a20        ;USPS user id
	url             ,a128       ;URL of server to use
	test_url        ,a128       ;URL of test server
	live_url        ,a128       ;URL of live server
	error_number	,a15		;USPS error number
	error_text		,a256		;Error text
	char			,a1			;A character
	char1			,a1			;A character
	zip5			,a5			;5-digit ZIP code
	city			,a40
	state			,a2

.proc

	ok = 1
	open(tt=%syn_freechn,i,"tt:")
	xcall flags(7004020,1)
	display(tt,$scr_pos(1,1),$scr_clr(SCREEN))

	xcall getlog("USPS_USERID",userid,len)
	if (!len) 
	begin
		writes(tt,"Environment variable USPS_USERID has not been defined!")
		clear ok
	end

	xcall getlog("USPS_TEST_URL",test_url,len)
	if (!len) 
	begin
		writes(tt,"Environment variable USPS_TEST_URL has not been defined!")
		clear ok
	end

	xcall getlog("USPS_LIVE_URL",live_url,len)

	if (!ok) then
		sleep 5
	else
	begin
		repeat
		begin
			display(tt,$scr_pos(1,1),$scr_clr(SCREEN),
			&       "USPS City/State Lookup",
			&       $scr_pos(3,1), "[T]est, [L]ive or [E]xit  : ")

			accept(tt,char)

			repeat
			begin
				if (!%ttsts)
					exitloop
				accept(tt,char1)
			end

			upcase char
			using char select
			("T"),
				call test
			("L"),
				call live
			("E"),
				exitloop
			(),
			begin
				display(tt,$SCR_POS(3,30),"Invalid option")
				sleep 0.5
			end
			endusing
		end
	end

	close tt
	stop

;------------------------------------------------------------------------------
;Run one of the 6 pre-defined USPS tests.  These are the only ZIP codes that
;will work with the test server.
;
test,

    url = test_url

    repeat
    begin
        display(tt,$scr_pos(1,1),$scr_clr(SCREEN),
        &       "USPS City/State Lookup - TEST MODE",
        &       $scr_pos(3,1), "Which test      (1-6 or E): ")

        accept(tt,char)

        repeat
        begin
            if (!%ttsts)
                exitloop
            accept(tt,char1)
        end

        upcase char
        using char select
        ("1"),
		begin
			zip5 = "90210"
			call lookup
		end
		("2"),
		begin
			zip5 = "20770"
			call lookup
		end
		("3"),
		begin
			zip5 = "21113"
			call lookup
		end
		("4"),
		begin
			zip5 = "21032"
			call lookup
		end
		("5"),
		begin
			zip5 = "21117"
			call lookup
		end
		("6"),
		begin
			zip5 = "99999"
			call lookup
		end
        ("E"),
            exitloop
        (),
        begin
            display(tt,$SCR_POS(3,30),"Invalid option")
            sleep 0.5
        end
        endusing
    end

    return

;------------------------------------------------------------------------------
;Run a live test.  This will not work until you have managed to persuade the
;USPS to give you address lookup authorization on their servers, which they
;really don't like to do!  Good luck!
;
live,

	url = live_url

	repeat
	begin

		display(tt,$SCR_POS(5,1),$SCR_CLR(EOS),
		&		$scr_pos(5,1),"ZIP code  (enter to exit) : ",
		&		$scr_pos(6,1),"City                      : ",
		&		$scr_pos(7,1),"State                     : ",
		&		$scr_pos(5,29))

		reads(tt,zip5)

		if (!zip5)
			exitloop

		if (!%IsNumeric(zip5))
			nextloop

		if (%trim(zip5)<5)
		begin
			display(tt,$scr_pos(6,17),"ZIP code must be 5 digits.")
			nextloop
		end

		call lookup

	end

	return

;------------------------------------------------------------------------------
;Do the lookup - here's where we call our routine which in turn calls the USPS
;web service
;
lookup,

	if (%UspsCityState(url,userid,zip5,city,state,error_number,error_text)) then
	begin
		;It worked, display the results
		display(tt,$SCR_POS(5,1),$SCR_CLR(EOS),
		&		$scr_pos(5,1),"ZIP code  (enter to exit) : ",zip5,
		&		$scr_pos(6,1),"City                      : ",city,
		&		$scr_pos(7,1),"State                     : ",state)
	end
	else
	begin
		;It failed, display the error
		display(tt,$scr_pos(22,1),"Error ",%atrim(error_number),
		&		$scr_pos(23,1),%atrim(error_text))
	end

	display(tt,$scr_pos(24,1),"Press a key: ")

	accept(tt,char)

	repeat
	begin
		if (!%ttsts)
			exitloop
		accept(tt,char)
	end

	return

.end

;=============================================================================
;
; Title:		UspsCityState
;
; Description:	Function to call the "USPS City/State Lookup" web service
;
; Author:		Steve Ives (Synergex Professional Services Group)
;
; Date:			12th October 2005
;
;=============================================================================
;
.function UspsCityState, ^val

    ;Input arguments
	a_url               ,a      ;URL of USPS server to be used
	a_userid            ,a      ;USPS user id to be used
	a_zip5				,a		;Xip code to lookup

	;Output arguments
	a_city				,a
	a_state				,a
	a_error_number		,a
	a_error_text		,a
	;End of arguments

.include "DBLDIR:synxml.def"
.define USPSCITYSTATE_INCLUDE
.define USPSCITYSTATE_INTERNAL
.include "UspsCityState.dbl"

.align
stack record ivars

	ok				,i4		;Return value

	doc				,XML_DOC_TYPE
	root			,XML_ELEM_TYPE
	child			,XML_ELEM_TYPE
	xmlstr			,XML_STRING_TYPE
	parser			,XML_PARSER_TYPE
	zipcodes		,XML_ELEMLIST_TYPE
	zipcode			,XML_ELEM_TYPE
	children		,XML_ELEMLIST_TYPE

	status			,i4
	sh				,D_ADDR
	sl				,i4
	rh				,D_ADDR
	rl				,i4
	count			,i4

stack record avars
	errtxt			,a80
	elem_name		,a40
	elem_text		,a512
	url				,a2048		;URL to call

.proc

	;Initialize data to a known state
	clear ^i(ivars), avars, a_city, a_state, a_error_number, a_error_text
	ok = 1

	;Build the access request

	doc = %xml_doc_create

	.ifdef DBLV83
	xcall xml_option("ENCODE",SYNESCAPE_ESCAPE)
	.endc

	root = %xml_doc_getroot(doc)
	xcall xml_elem_setname(root,"CityStateLookupRequest")
	xcall xml_elem_setattribute(root,"USERID",a_userid)

	child = %xml_elem_create
	xcall xml_elem_setname(child,"ZipCode")
	xcall xml_elem_setattribute(child,"ID","0")
	xcall xml_elem_addchild(root,child)

	root = child

	child = %xml_elem_create
	xcall xml_elem_setname(child,"Zip5")
	xcall xml_elem_settext(child,%atrim(a_zip5))
	xcall xml_elem_addchild(root,child)

	xmlstr = %xml_doc_tostring(doc)
	xcall xml_doc_delete(doc)

	sl = %xml_string_getsize(xmlstr)
	sh = %mem_proc(DM_ALLOC+DM_BLANK,sl)

	^m(sh) = ^m(%xml_string_gethandle(xmlstr))
	xcall xml_string_delete(xmlstr)

	xcall delet(D_HTTP_LOG_FILE)

	;Build the URL for the HTTP GET
	xcall s_bld(url,,"%a?API=%a&XML=%a",a_url,D_API_NAME,^m(sh))

	;Call the web service
	status = %http_client_get(%atrim(url),D_HTTP_TIMEOUT,rh,rl,
	&		errtxt,,D_HTTP_LOG_FILE)

	using status select
	(0),
	begin
		;Yes, did we get any data back?
		if (rh && rl) then
			call parse_results
		else
		begin
			clear ok
			a_error_text = "USPS server returned a blank response"
		end
	end
	(10060),
	begin
		clear ok
		a_error_text = "USPS server failed to respond within timeout period"
	end
	(),
	begin
		clear ok
		a_error_text = "Communication with USPS server failed: " + errtxt
	end
	endusing

	;Clean up
	sh = %mem_proc(DM_FREE,sh)
	if (rh)
		rh = %mem_proc(DM_FREE,rh)

	freturn ok

;-----------------------------------------------------------------------------
;
parse_results,

	.ifdef DBLV83
	xcall xml_option("ENCODE",SYNESCAPE_UNESCAPE)
	.endc

	xmlstr = %xml_string_create
	xcall xml_string_appendhandle(xmlstr,rh,rl)

	parser = %xml_parser_create

	doc = %xml_parser_parsestring(parser,xmlstr)

	xcall xml_string_delete(xmlstr)

	if (!doc)
	begin
		clear ok
		xcall xml_parser_error(parser,errtxt)
		a_error_text = "USPS server returned invalid XML: " + errtxt
	end

	xcall xml_parser_delete(parser)

	if (ok) 
	begin
		;Parse <CityStateLookupResponse>
		root = %xml_doc_getroot(doc)
		xcall xml_elem_getname(root,elem_name)

		using elem_name select
		("CityStateLookupResponse"),
			call parse_response
		("Error"),
			call parse_severe_error
		(),
		begin
			clear ok
			a_error_text = "USPS server returned unexpected response: <" + %atrim(elem_name) + ">"
		end
		endusing

	end

	if (doc)
		xcall xml_doc_delete(doc)

	return

parse_response,

	zipcodes = %xml_elem_children(root)	;Should be <ZipCode> or <Error>
	zipcode = %xml_elemlist_item(zipcodes,1)
	xcall xml_elem_getname(zipcode,elem_name)

	using elem_name select
	("ZipCode"),
		call parse_zip_code
	("Error"),
		call parse_response_error
	(),
	begin
		clear ok
		a_error_text = "USPS server returned unexpected element: <" + %atrim(elem_name) + ">"
	end
	endusing

	return

parse_zip_code,

	children = %xml_elem_children(zipcode)

	for count from 1 thru %xml_elemlist_count(children)
	begin
		child = %xml_elemlist_item(children,count)
		xcall xml_elem_getname(child,elem_name)
		xcall xml_elem_gettext(child,elem_text)
		using elem_name select
		("City"),
			a_city = elem_text
		("State"),
			a_state = elem_text
		("Error"),
		begin
			call parse_zip_code_error
			exitloop
		end
		(),
			nop
		endusing
	end


	return

;------------------------------------------------------------------------------
;Server returned <Error>
;
parse_severe_error,

	children = %xml_elem_children(root)
	call parse_error

	return

;------------------------------------------------------------------------------
;Server retunred <CityStateLookupResponse/Error>
;
parse_response_error,

	children = %xml_elem_children(zipcode)
	call parse_error

	return

;------------------------------------------------------------------------------
;Server retunred <CityStateLookupResponse/ZipCode/Error>
;
parse_zip_code_error,

	children = %xml_elem_children(child)
	call parse_error

	return

;------------------------------------------------------------------------------
;Extract and return the error details
;
parse_error,

	for count from 1 thru %xml_elemlist_count(children)
	begin
		child = %xml_elemlist_item(children,count)
		xcall xml_elem_getname(child,elem_name)
		xcall xml_elem_gettext(child,elem_text)
		using elem_name select
		("Number"),
			a_error_number = elem_text
		("Description"),
			a_error_text = elem_text
		(),
			nop
		endusing
	end

	clear ok

	return

.end

;=============================================================================
;
; Title:		IsNumeric
;
; Description:	Validates a numeric value
;
; Author:		Steve Ives (Synergex Professional Services Group)
;
; Date:			28th September 2005
;
;=============================================================================
;
.function IsNumeric, ^val

	a_number		,a

stack record
	ok				,i4			;Return value
	number			,d28.10		;Max size decimal

.proc

	ok = 1

	onerror ($ERR_DIGIT) bad

	number = a_number
	if (0) 
bad,	clear ok

	offerror

	freturn ok

.end

;*****************************************************************************
.endc ;USPSCITYSTATE_INCLUDE - END OF PROGRAM CODE
;*****************************************************************************

