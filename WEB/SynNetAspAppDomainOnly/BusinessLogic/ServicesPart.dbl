;;******************************************************************************
;;WARNING: This file was created by CodeGen. Changes will be lost if regenerated
;;******************************************************************************

import System.Collections.Generic
import Synergex.SynergyDE.Select

namespace BusinessLogic

    ;;; <summary>
    ;;; This class exposes the CRUD methods for Part
    ;;; to the client application. Notice that this is a PARTIAL class, so the
    ;;; methods are added to the main Services class defined in Services.dbl.
    ;;; </summary>
    public partial class Services

        ;;; <summary>
        ;;; Create a Part record
        ;;; </summary>
        ;;; <param name="aPart">Passed Part object (@Part)</param>
        ;;; <returns></returns>
        public method CreatePart, MethodStatus
            required in aPart, @Part
            required out aErrorMessage, String
            endparams
            stack record
                ch, int
                rec, strPart
                status, MethodStatus
            endrecord
        proc
            status = MethodStatus.Success
            aErrorMessage = ""

            try
            begin
                open(ch=0,u:i,"DAT:parts.ism")
                store(ch,aPart.Record)
            end
            catch (e, @FileNameException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (e, @NoFileFoundException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (e, @DuplicateException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Record already exists!"
            end
            catch (e, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = e.Message
            end
            finally
            begin
                if (ch&&chopen(ch))
                    close ch
            end
            endtry

            mreturn status

        endmethod

        ;;; <summary>
        ;;; Real all Part records
        ;;; </summary>
        ;;; <param name="aParts">Returned collection of Part objects (@List<Part>)</param>
        ;;; <returns></returns>
        public method ReadAllParts, MethodStatus
            required out aParts, @List<Part>
            required out aErrorMessage, String
            endparams
        proc

            data status, MethodStatus, MethodStatus.Success
            aErrorMessage = ""

            aParts = new List<Part>()

            try
            begin
                data rec, strPart
                foreach rec in new Select(new From("DAT:parts.ism",rec))
                    aParts.Add(new Part(rec))
            end
            catch (e, @FileNameException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (e, @NoFileFoundException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (e, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = e.Message
            end
            endtry

            mreturn status

        endmethod

        ;;; <summary>
        ;;; Read a Part record by primary key (ID: primary part id)
        ;;; </summary>
        ;;; <param name="aId">Passed part ID (String)</param>
        ;;; <param name="aPart">Returned Part object (@Part)</param>
        ;;; <param name="aGrfa">Returned GRFA (string)</param>
        ;;; <returns></returns>
        public method ReadPart, MethodStatus
            required in  aId, String
            required out aPart, @Part
            required out aGrfa, String
            required out aErrorMessage, String
            endparams
            stack record
                ch, int
                rec, strPart
                status, MethodStatus
                grfa, a10
            endrecord
        proc
            status = MethodStatus.Success
            aErrorMessage = ""

            init rec
            rec.id = aId

            try
            begin
                open(ch=0,I:I,"DAT:parts.ism")
                read(ch,rec,%keyval(ch,rec,0),GETRFA:grfa)
                aPart = new Part(rec)
                aGrfa = grfa
            end
            catch (e, @FileNameException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (e, @NoFileFoundException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (e, @EndOfFileException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Record not found!"
            end
            catch (e, @KeyNotSameException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Record not found!"
            end
            catch (e, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = e.Message
            end
            finally
            begin
                if (ch&&chopen(ch))
                    close ch
            end
            endtry

            mreturn status

        endmethod

        ;;; <summary>
        ;;; Update a Part record
        ;;; </summary>
        ;;; <param name="aPart">Passed/returned Part object (@Part)</param>
        ;;; <param name="aGrfa">Passed/returned GRFA</param>
        ;;; <returns></returns>
        public method UpdatePart, MethodStatus
            required inout aPart, @Part
            required inout aGrfa, String
            required out aErrorMessage, String
            endparams
            stack record
                ch, int
                rec, strPart
                status, MethodStatus
                grfa, a10
            endrecord
        proc
            status = MethodStatus.Success
            aErrorMessage = ""

            try
            begin
                open(ch=0,u:i,"DAT:parts.ism")
                ;;Attempt to read the original record by GRFA to make sure that
                ;;nobody else has modified or deleted it
                grfa=aGrfa
                read(ch,rec,RFA:grfa,GETRFA:grfa)
                write(ch,aPart.Record)
            end
            catch (e, @FileNameException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (e, @NoFileFoundException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (ex, @RecordNotSameException)
            begin
                ;;Failed to lock the original record, it must have been changed
                ;;by another process since this user obtained it. We'll return
                ;;the new record and it's GRFA to the user
                aPart = new Part(rec)
                aGrfa = grfa
                status = MethodStatus.Fail
                aErrorMessage = "The record was changed by another user!"
            end
            catch (e, @DuplicateException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Duplicate key!"
            end
            catch (e, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = e.Message
            end
            finally
            begin
                if (ch&&chopen(ch))
                    close ch
            end
            endtry

            mreturn status

        endmethod

        ;;; <summary>
        ;;; Delete a Part record
        ;;; </summary>
        ;;; <param name="aGrfa">Passed GRFA (string)</param>
        ;;; <returns></returns>
        public method DeletePart, MethodStatus
            required in aGrfa, String
            required out aErrorMessage, String
            endparams
            stack record
                ch, int
                rec, strPart
                status, MethodStatus
                grfa, a10
            endrecord
        proc
            status = MethodStatus.Success
            aErrorMessage = ""

            try
            begin
                open(ch=0,u:i,"DAT:parts.ism")
                ;;Attempt to read the original record by GRFA to make sure that
                ;;nobody else has modified or deleted it
                grfa=aGrfa
                read(ch,rec,RFA:grfa)
                delete(ch)
            end
            catch (e, @FileNameException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (e, @NoFileFoundException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (ex, @RecordNotSameException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "The record was changed by another user!"
            end
            catch (e, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = e.Message
            end
            finally
            begin
                if (ch&&chopen(ch))
                    close ch
            end
            endtry

            mreturn status

        endmethod

        ;;; <summary>
        ;;; Determine if a Part record exists
        ;;; </summary>
        ;;; <param name="aId">Passed part ID (string)</param>
        ;;; <returns></returns>
        public method PartExists, MethodStatus
            required in  aId, string
            required out aErrorMessage, String
            endparams
            stack record
                ch, int
                rec, strPart
                status, MethodStatus
            endrecord
        proc
            status = MethodStatus.Success
            aErrorMessage = ""

            init rec
            rec.id = aId

            try
            begin
                open(ch=0,I:I,"DAT:parts.ism")
                find(ch,,%keyval(ch,rec,0))
            end
            catch (e, @FileNameException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (e, @NoFileFoundException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (e, @EndOfFileException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Record not found!"
            end
            catch (e, @KeyNotSameException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Record not found!"
            end
            catch (e, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = e.Message
            end
            finally
            begin
                if (ch&&chopen(ch))
                    close ch
            end
            endtry

            mreturn status

        endmethod

    endclass

endnamespace
