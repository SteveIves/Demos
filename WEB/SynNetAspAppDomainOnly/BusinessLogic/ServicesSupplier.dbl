;;******************************************************************************
;;WARNING: This file was created by CodeGen. Changes will be lost if regenerated
;;******************************************************************************

import System.Collections.Generic
import Synergex.SynergyDE.Select

namespace BusinessLogic

    ;;; <summary>
    ;;; This class exposes the CRUD methods for Supplier
    ;;; to the client application. Notice that this is a PARTIAL class, so the
    ;;; methods are added to the main Services class defined in Services.dbl.
    ;;; </summary>
    public partial class Services

        ;;; <summary>
        ;;; Create a Supplier record
        ;;; </summary>
        ;;; <param name="aSupplier">Passed Supplier object (@Supplier)</param>
        ;;; <returns></returns>
        public method CreateSupplier, MethodStatus
            required in aSupplier, @Supplier
            required out aErrorMessage, String
            endparams
            stack record
                ch, int
                rec, strSupplier
                status, MethodStatus
            endrecord
        proc
            status = MethodStatus.Success
            aErrorMessage = ""

            try
            begin
                open(ch=0,u:i,"DAT:suppliers.ism")
                store(ch,aSupplier.Record)
            end
            catch (e, @FileNameException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (e, @NoFileFoundException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (e, @DuplicateException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Record already exists!"
            end
            catch (e, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = e.Message
            end
            finally
            begin
                if (ch&&chopen(ch))
                    close ch
            end
            endtry

            mreturn status

        endmethod

        ;;; <summary>
        ;;; Real all Supplier records
        ;;; </summary>
        ;;; <param name="aSuppliers">Returned collection of Supplier objects (@List<Supplier>)</param>
        ;;; <returns></returns>
        public method ReadAllSuppliers, MethodStatus
            required out aSuppliers, @List<Supplier>
            required out aErrorMessage, String
            endparams
        proc

            data status, MethodStatus, MethodStatus.Success
            aErrorMessage = ""

            aSuppliers = new List<Supplier>()

            try
            begin
                data rec, strSupplier
                foreach rec in new Select(new From("DAT:suppliers.ism",rec))
                    aSuppliers.Add(new Supplier(rec))
            end
            catch (e, @FileNameException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (e, @NoFileFoundException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (e, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = e.Message
            end
            endtry

            mreturn status

        endmethod

        ;;; <summary>
        ;;; Read a Supplier record by primary key (SUPPLIER_ID: primary access key)
        ;;; </summary>
        ;;; <param name="aSupplierId">Passed supplier id (String)</param>
        ;;; <param name="aSupplier">Returned Supplier object (@Supplier)</param>
        ;;; <param name="aGrfa">Returned GRFA (string)</param>
        ;;; <returns></returns>
        public method ReadSupplier, MethodStatus
            required in  aSupplierId, String
            required out aSupplier, @Supplier
            required out aGrfa, String
            required out aErrorMessage, String
            endparams
            stack record
                ch, int
                rec, strSupplier
                status, MethodStatus
                grfa, a10
            endrecord
        proc
            status = MethodStatus.Success
            aErrorMessage = ""

            init rec
            rec.supplier_id = aSupplierId

            try
            begin
                open(ch=0,I:I,"DAT:suppliers.ism")
                read(ch,rec,%keyval(ch,rec,0),GETRFA:grfa)
                aSupplier = new Supplier(rec)
                aGrfa = grfa
            end
            catch (e, @FileNameException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (e, @NoFileFoundException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (e, @EndOfFileException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Record not found!"
            end
            catch (e, @KeyNotSameException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Record not found!"
            end
            catch (e, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = e.Message
            end
            finally
            begin
                if (ch&&chopen(ch))
                    close ch
            end
            endtry

            mreturn status

        endmethod

        ;;; <summary>
        ;;; Update a Supplier record
        ;;; </summary>
        ;;; <param name="aSupplier">Passed/returned Supplier object (@Supplier)</param>
        ;;; <param name="aGrfa">Passed/returned GRFA</param>
        ;;; <returns></returns>
        public method UpdateSupplier, MethodStatus
            required inout aSupplier, @Supplier
            required inout aGrfa, String
            required out aErrorMessage, String
            endparams
            stack record
                ch, int
                rec, strSupplier
                status, MethodStatus
                grfa, a10
            endrecord
        proc
            status = MethodStatus.Success
            aErrorMessage = ""

            try
            begin
                open(ch=0,u:i,"DAT:suppliers.ism")
                ;;Attempt to read the original record by GRFA to make sure that
                ;;nobody else has modified or deleted it
                grfa=aGrfa
                read(ch,rec,RFA:grfa,GETRFA:grfa)
                write(ch,aSupplier.Record)
            end
            catch (e, @FileNameException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (e, @NoFileFoundException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (ex, @RecordNotSameException)
            begin
                ;;Failed to lock the original record, it must have been changed
                ;;by another process since this user obtained it. We'll return
                ;;the new record and it's GRFA to the user
                aSupplier = new Supplier(rec)
                aGrfa = grfa
                status = MethodStatus.Fail
                aErrorMessage = "The record was changed by another user!"
            end
            catch (e, @DuplicateException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Duplicate key!"
            end
            catch (e, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = e.Message
            end
            finally
            begin
                if (ch&&chopen(ch))
                    close ch
            end
            endtry

            mreturn status

        endmethod

        ;;; <summary>
        ;;; Delete a Supplier record
        ;;; </summary>
        ;;; <param name="aGrfa">Passed GRFA (string)</param>
        ;;; <returns></returns>
        public method DeleteSupplier, MethodStatus
            required in aGrfa, String
            required out aErrorMessage, String
            endparams
            stack record
                ch, int
                rec, strSupplier
                status, MethodStatus
                grfa, a10
            endrecord
        proc
            status = MethodStatus.Success
            aErrorMessage = ""

            try
            begin
                open(ch=0,u:i,"DAT:suppliers.ism")
                ;;Attempt to read the original record by GRFA to make sure that
                ;;nobody else has modified or deleted it
                grfa=aGrfa
                read(ch,rec,RFA:grfa)
                delete(ch)
            end
            catch (e, @FileNameException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (e, @NoFileFoundException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (ex, @RecordNotSameException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "The record was changed by another user!"
            end
            catch (e, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = e.Message
            end
            finally
            begin
                if (ch&&chopen(ch))
                    close ch
            end
            endtry

            mreturn status

        endmethod

        ;;; <summary>
        ;;; Determine if a Supplier record exists
        ;;; </summary>
        ;;; <param name="aSupplierId">Passed supplier id (string)</param>
        ;;; <returns></returns>
        public method SupplierExists, MethodStatus
            required in  aSupplierId, string
            required out aErrorMessage, String
            endparams
            stack record
                ch, int
                rec, strSupplier
                status, MethodStatus
            endrecord
        proc
            status = MethodStatus.Success
            aErrorMessage = ""

            init rec
            rec.supplier_id = aSupplierId

            try
            begin
                open(ch=0,I:I,"DAT:suppliers.ism")
                find(ch,,%keyval(ch,rec,0))
            end
            catch (e, @FileNameException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (e, @NoFileFoundException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found! CHECK THE DAT SETTING IN THE WEB.CONFIG FILE AND MAKE SURE IT IS CORRECT FOR YOUR SYSTEM!"
            end
            catch (e, @EndOfFileException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Record not found!"
            end
            catch (e, @KeyNotSameException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Record not found!"
            end
            catch (e, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = e.Message
            end
            finally
            begin
                if (ch&&chopen(ch))
                    close ch
            end
            endtry

            mreturn status

        endmethod

    endclass

endnamespace
