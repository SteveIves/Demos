;;; <summary>
main ScheduledTaskControl
	record
		tt,				i4
		errorMessage, 	string
		task,			@ScheduledTask
	endrecord
proc
	open(tt=0,i,'tt:')
	
	task = new ScheduledTask("Synergy Task 1","D:\Dev\Demos\Language\ScheduledTask\ScheduledTask.dbr")
	
	;;Optional settings
	
	;;TODO: Need to add support for specifying the run frequency
	
;	task.System				= "system_name"		;;System to run/control the scheduled task on
;	task.RunAsUser			= "username"		;;Username to use to manage the scheduled task (default is current user)
;	task.RunAsPassword		= "password"		;;Password for user account used to manage scheduled task
;	task.RunTaskAsUser		= "username"		;;User account to run scheduled task as (default is "SYSTEM")
;	task.RunTaskAsPassword	= "password"		;;Password for user account used to run scheduled task
	
	if (task.Create(TaskSchedule.Minute,1,errorMessage)) then
	begin
		writes(tt,"Task started.")
		writes(tt,"Check for C:\Windows\Temp\TEMP\scheduled_task_yyyymmddhhmmssuuuuuu.txt files.")
		writes(tt,"Task will be automatically run once per minute.")
		
		
		writes(tt,"Task will be manually run in 5 seconds")
		sleep 5

		if (task.Run(errorMessage)) then
			writes(tt,"Task was manually run.")
		else
			writes(tt,"ERROR: Failed to manually run task. Error was " + errorMessage)

		writes(tt,"Task will be manually run in 5 seconds")
		sleep 5

		if (task.Run(errorMessage)) then
			writes(tt,"Task was manually run.")
		else
			writes(tt,"ERROR: Failed to manually run task. Error was " + errorMessage)

		writes(tt,"Task will be stopped and deleted in 2 minutes.")
		sleep 120

		if (task.Delete(errorMessage)) then
			writes(tt,"Task deleted.")
		else
			writes(tt,"ERROR: Failed to delete task. Error was " + errorMessage)

	end
	else
		writes(tt,"ERROR: Failed to start task! Error was " + errorMessage)
	
	close tt
	stop

endmain

namespace SynPSG.Examples

	public enum TaskSchedule
		None
		Minute
		Hourly
		Daily
		Weekly
		Monthly
		Once
		OnStart
		OnLogon
		OnIdle
		OnEvent
	endenum
	
	public class ScheduledTask
		
		public method ScheduledTask
			required in aTaskName,	String
			required in aTaskDbr,	String
		proc
			;;Store constructor parameters
			TaskName = aTaskName
			TaskDbr = aTaskDbr
			;;Set default values
			RunTaskAsUser = "SYSTEM"
		endmethod
		
		public property TaskName, String
			method get
			endmethod
			method set
			endmethod
		endproperty
		
		public property TaskDbr, String
			method get
			endmethod
			method set
			endmethod
		endproperty

		public property System, String
			method get
			endmethod
			method set
			endmethod
		endproperty

		public property RunAsUser, String
			method get
			endmethod
			method set
			endmethod
		endproperty

		public property RunAsPassword, String
			method get
			endmethod
			method set
			endmethod
		endproperty

		public property RunTaskAsUser, String
			method get
			endmethod
			method set
			endmethod
		endproperty

		public property RunTaskAsPassword, String
			method get
			endmethod
			method set
			endmethod
		endproperty
		
		public method Create, boolean
			required in  schedule		,TaskSchedule
			required out errorMessage	,String
			endparams
		proc
			mreturn Create(schedule,0,^null,errorMessage)
		endmethod

		public method Create, boolean
			required in  schedule		,TaskSchedule
			required in  modifier		,int
			required out errorMessage	,String
			endparams
		proc
			mreturn Create(schedule,modifier,^null,errorMessage)
		endmethod
		
		public method Create, boolean
			required in  schedule		,TaskSchedule
			required in  modifier		,int
			required in  startTime		,String
			required out errorMessage	,String
			endparams
			record 
				ch, i4
				command, String
				message, a256
			endrecord
		proc
			command = '|schtasks /create /f'

			using schedule select
			(TaskSchedule.None),
				nop
			(TaskSchedule.Minute),
			begin
				command += ' /sc MINUTE'
				if (modifier && modifier >= 1 && modifier <= 1439) then
					command += ' /mo '+%string(modifier)
				else if (modifier)
				begin
					errorMessage = 'Modifier value ' + %string(modifier) + ' is not valid for schedule type MINUTE'
					mreturn false
				end
			end
			(TaskSchedule.Hourly),
			begin
				command += ' /sc HOURLY'
				if (modifier && modifier >= 1 && modifier <= 23) then
					command += ' /mo '+%string(modifier)
				else if (modifier)
				begin
					errorMessage = 'Modifier value ' + %string(modifier) + ' is not valid for schedule type HOURLY'
					mreturn false
				end
			end
			(TaskSchedule.Daily),
			begin
				command += ' /sc DAILY'
				if (modifier && modifier >= 1 && modifier <= 365) then
					command += ' /mo '+%string(modifier)
				else if (modifier)
				begin
					errorMessage = 'Modifier value ' + %string(modifier) + ' is not valid for schedule type DAILY'
					mreturn false
				end
				if ((startTime!=^null)&&(startTime.Length>0))
					command += ' /st ' + startTime
			end
			(TaskSchedule.Weekly),
			begin
				command += ' /sc WEEKLY'
				if (modifier && modifier >= 1 && modifier <= 365) then
					command += ' /mo '+%string(modifier)
				else if (modifier)
				begin
					errorMessage = 'Modifier value ' + %string(modifier) + ' is not valid for schedule type DAILY'
					mreturn false
				end
				if ((startTime!=^null)&&(startTime.Length>0))
					command += ' /st ' + startTime
			end
			(TaskSchedule.Monthly),
			begin
				command += ' /sc MONTHLY'
				if (modifier && modifier >= 1 && modifier <= 12) then
					command += ' /mo '+%string(modifier)
				else if (modifier)
				begin
					errorMessage = 'Modifier value ' + %string(modifier) + ' is not valid for schedule type MONTHLY'
					mreturn false
				end
				if ((startTime!=^null)&&(startTime.Length>0))
					command += ' /st ' + startTime
			end
			(TaskSchedule.Once),
			begin
				command += ' /sc ONCE'
				if ((startTime!=^null)&&(startTime.Length>0))
					command += ' /st ' + startTime
			end
			(TaskSchedule.OnStart),
			begin
				command += ' /sc ONSTART'
			end
			(TaskSchedule.OnLogon),
			begin
				command += ' /sc ONLOGON'
			end
			(TaskSchedule.OnIdle),
			begin
				command += ' /sc ONIDLE'
			end
			(TaskSchedule.OnEvent),
			begin
				errorMessage = 'Schedule type ONEVENT is sot supported yet'
				mreturn false
			end
			endusing

			command += getTaskAndAuthInfo()
			command += ' /ru ' + RunTaskAsUser
			if (RunTaskAsPassword!=^null)
				command += ' /rp ' + RunTaskAsPassword
			command += ' /tr "C:\Program Files (x86)\Synergex\SynergyDE\dbl\bin\dbs.exe ' + TaskDbr + '"'

			open(ch=0,i,command)
			reads(ch,message)
			close ch
			
			if (message!='SUCCESS: The scheduled task "' + TaskName + '" has successfully been created.')
			begin
				errorMessage = %atrim(message)
				mreturn false
			end
				
			mreturn true
			
		endmethod
		
		public method Run, boolean
			required out errorMessage, String
			endparams
			record 
				ok, boolean
				ch, i4
				command, string
				message, a256
			endrecord
		proc
			ok = true
			errorMessage = ""

			command = "|schtasks /run /i"
			command += getTaskAndAuthInfo()

			open(ch=0,i,command)
			reads(ch,message)
			close ch

			if (message!='SUCCESS: Attempted to run the scheduled task "' + taskName.Trim() + '".')
			begin
				errorMessage = %atrim(message)
				mreturn false
			end
			
			mreturn ok
			
		endmethod

		public method Stop, boolean
			required out errorMessage, String
			endparams
			record 
				ok, boolean
				ch, i4
				command, string
				message, a256
			endrecord
		proc
			ok = true
			errorMessage = ""

			command = "|schtasks /end"
			command += getTaskAndAuthInfo()

			open(ch=0,i,command)
			reads(ch,message)
			close ch

			if (message!='SUCCESS: The scheduled task "' + taskName.Trim() + '" has been terminated successfully.')
			begin
				errorMessage = %atrim(message)
				mreturn false
			end

			mreturn ok
			
		endmethod
		
		public method Delete, boolean
			required out errorMessage, String
			endparams
			record 
				ok, boolean
				ch, i4
				command, string
				message, a256
			endrecord
		proc
			ok = true
			errorMessage = ""

			command = "|schtasks /delete /f"
			command += getTaskAndAuthInfo()

			open(ch=0,i,command)
			reads(ch,message)
			close ch

			if (message!='SUCCESS: The scheduled task "' + taskName.Trim() + '" was successfully deleted.')
			begin
				errorMessage = %atrim(message)
				mreturn false
			end

			mreturn ok

		endmethod
		
		public method GetStatus, String
			endparams
			record 
				ch, int
				command, string
				message, a256
				returnMsg, string
			endrecord
		proc
			command = '|schtasks /query /tn "' + TaskName + '"'
			open(ch=0,i,command)
			repeat
			begin
				reads(ch,message,eof)
				returnMsg = %atrim(message)
			end
		eof,
			close ch
			mreturn returnMsg
		endmethod
		
		private method getTaskAndAuthInfo, string
			endparams
			record 
				authInfo, String
			endrecord
		proc
			authInfo = ' /tn "' + TaskName + '"'
			if (System != ^null)
				authInfo += ' /s ' + System
			if (RunAsUser != ^null)
				authInfo += ' /u ' + runAsUser
			if (RunAsPassword != ^null)
				authInfo += ' /p ' + RunAsPassword
			mreturn authInfo
		endmethod


	endclass
	
endnamespace

