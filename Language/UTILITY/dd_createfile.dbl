;-----------------------------------------------------------------------------
;       Synergex xfISAM file Creator from Repository
;
;       Written by: P.H.Fenton
;
;       Date: 12/Jul/2001
;-----------------------------------------------------------------------------
.function dd_createfile, ^val, stack
    a_dcs               ,a          ;repository control data
    a_structure         ,a          ;sturture name
    a_mode              ,n          ;mode (1=no screen output)
    a_overwrite         ,n          ;(Optional) overwrite file if found
    a_assignfile        ,a          ;(Optional) specify which of the assigned files to build
    a_filename          ,a          ;(Optional) filename to create
    a_rps_main          ,a          ;(Optional) Repository main filename
    a_rps_text          ,a          ;(Optional) Repository text filename

.include 'WND:tools.def'
.include 'RPSLIB:ddinfo.def'

.ifndef FILES_ASSIGNED
.define FILES_ASSIGNED  ,20         ;20 max files assigned to 1 structure
.define MAX_KEYS        ,20         ;20 max keys defined per file
.endc

.align
record ivar
    interactive         ,i4
    ferror              ,i4
    file_idx            ,i4
    key_idx             ,i4
    seg_idx             ,i4
    overwrite           ,i4
    open_file_ch        ,i4
    status              ,i4
    opened              ,i4
    len                 ,i4
	keycount			,i4

record avar
    rps_main            ,a40
    rps_text            ,a40
    filedef             ,[FILES_ASSIGNED]a30
    filespec            ,a255
    keyspecs            ,[MAX_KEYS]a255
    keynames            ,[MAX_KEYS]a30
    keydata             ,[MAX_KEYS]a^size(k_info)
    nullval             ,a20
    str_name            ,a30

local record
    rec_type            ,3a2    ,',F'   ;Fixed
    &                           ,',M'   ;Multiple
    &                           ,',V'   ;Variable
    compress            ,2a2    ,'  '
    &                           ,',C'   ;Compress
    page_size           ,5a4    ,'1024' ;(default)
    &                           ,'512'
    &                           ,'2048'
    &                           ,'4096'
    &                           ,'8192'
    static_rfa          ,2a2    ,'  '
    &                           ,',S'
    tbyte               ,2a2    ,'  '
    &                           ,',T'
    key_order           ,2a1    ,'A'    ;ascending
    &                           ,'D'    ;descending
    key_segtyp          ,5a1    ,'A'    ;alpha (default)
    &                           ,'N'    ;nocase
    &                           ,'D'    ;decimal
    &                           ,'I'    ;integer
    &                           ,'U'    ;unsigned

.proc
    clear ^i(ivar), avar
    dcs = a_dcs
    if (.not. mchn_r)                                               ;repository not open
        begin
        if (%passed(a_rps_main) .and. a_rps_main)
            rps_main = a_rps_main
        if (%passed(a_rps_text) .and. a_rps_text)
            rps_text = a_rps_text
        if (.not. rps_main)
            xcall getlog('RPSMFIL', rps_main, len)                  ;get default repository
        if (.not. rps_text)
            xcall getlog('RPSTFIL', rps_text, len)

        xcall dd_init(dcs, rps_main, rps_text)                    ;initialise repository
        opened = TRUE
        end

    interactive = TRUE
    if (%passed(a_mode) .and. a_mode)
        clear interactive                                           ;no output to screen
    if (%passed(a_overwrite) .and. a_overwrite)
        overwrite = TRUE                                            ;overwrite files if found

    str_name = a_structure
    upcase str_name
    xcall dd_struct(dcs, DDS_INFO, str_name, s_info)                ;get structure info
    if (error)                                                      ;structure not found
        begin
        if (interactive)
            xcall u_message("Sturcture NOT found")
        status = 1
        goto routine_exit
        end
                                                                    ;no of files assign to structure
    if (si_nmfils)
    then
        begin
        if (si_nmfils.eq.1)
        then
            filedef[1] = si_file                                    ;only one file assigned
        else
            begin                                                   ;multi files assigned
            xcall dd_struct(dcs, DDS_FILS, si_nmfils, filedef)      ;get array of names

            if (%passed(a_assignfile) .and. a_assignfile)
                begin
                filedef[1] = a_assignfile
                si_nmfils = 1
                end
            end
        end
    else
        begin
        if (interactive)
            xcall u_message('Structure NOT assigned to any files')
        status = 2
        goto routine_exit
        end

    ;create file
    for file_idx from 1 thru si_nmfils
        begin

        xcall dd_filespec(dcs, filedef[file_idx], str_name, fls_info)
        if (error)
            begin
            if (interactive)
                xcall u_message("File Specification NOT found")
            status = 3
            goto routine_exit
            end
        if (.not. flsi_nmkeys)                                  ;no keys defined
            begin
            if (interactive)
                xcall u_message("No Keys Defined")
            status = 4
            goto routine_exit
            end

        if (si_nmfils.eq.1)                                     ;only if one file assigned
            if (%passed(a_filename) .and. a_filename)
                flsi_name = a_filename                          ;use filename if passed

        xcall u_open(open_file_ch, 'I ', flsi_name,,, ferror)
        if (.not.ferror)                                        ;file found
            begin
            xcall u_close(open_file_ch)
            if (.not. overwrite)
                if (interactive)
                then
                    begin
                    if (D_MIDNO .eq. %u_msgbox("File Already Exists. Overwrite ?",
                    &              D_MYESNO+D_MICONQUESTION+D_MDEFBUTTON2, "File Found"))
                        nextloop
                    end
                else
                    nextloop
            end

        using (flsi_filtyp) select
        ('DBL ISAM'),                                           ;isam files
            begin
            ;build file spec
            if (flsi_density .lt. 50) flsi_density = 50
            filespec = %atrim(flsi_name)+rec_type(flsi_rectyp+1)+
            &          compress(flsi_compress+1)+', '+'DENSITY='+^a(flsi_density)+
            &          ', PAGE='+page_size(flsi_pagesize+1)+
            &          static_rfa(flsi_staticrfa+1)+
            &          tbyte(flsi_addressing+1)

            ;build key spec
            xcall dd_key(dcs, DDK_LIST, MAX_KEYS, keynames[1]) ;get all key names
            clear keycount
			for key_idx from 1 thru si_nmkeys
            begin                                            ;get all key info
                xcall dd_key(dcs, DDK_INFO, keynames[key_idx], k_info)
				if ki_ktype.eq.KI_ACC
				begin
					keycount+=1
					keydata[keycount] = k_info
				end
            end
            xcall qsort(keydata[1], keycount)                 ;sort into key sequence

            for key_idx from 1 thru keycount
                begin
                k_info = keydata[key_idx]
                keyspecs[key_idx] = 'START='+^a(ki_segpos(1))
                if (ki_nmseg .ge. 2)
                    for seg_idx from 2 thru ki_nmseg             ;number of segments in key
                        keyspecs[key_idx] = %atrim(keyspecs[key_idx])+':'+^a(ki_segpos(seg_idx))

                keyspecs[key_idx] = %atrim(keyspecs[key_idx])+', LENGTH='+^a(ki_seglen(1))
                if (ki_nmseg .ge. 2)
                    for seg_idx from 2 thru ki_nmseg            ;number of segments in key
                        keyspecs[key_idx] = %atrim(keyspecs[key_idx])+':'+^a(ki_seglen(seg_idx))

                keyspecs[key_idx] = %atrim(keyspecs[key_idx])+', NAME='+ki_name

                if (ki_segdtyp(1))
                    begin
                    keyspecs[key_idx] = %atrim(keyspecs[key_idx])+', TYPE='+key_segtyp(ki_segdtyp(1))
                    if (ki_nmseg .ge. 2)
                        for seg_idx from 2 thru ki_nmseg            ;number of segments in key
                            keyspecs[key_idx] = %atrim(keyspecs[key_idx])+':'+key_segtyp(ki_segdtyp(seg_idx))
                    end

                if (ki_segord(1))
                    begin
                    keyspecs[key_idx] = %atrim(keyspecs[key_idx])+', ORDER='+key_order(ki_segord(1))
                    if (ki_nmseg .ge. 2)
                        for seg_idx from 2 thru ki_nmseg            ;number of segments in key
                            keyspecs[key_idx] = %atrim(keyspecs[key_idx])+':'+key_order(ki_segord(seg_idx))
                    end

                if (ki_density .lt. 50) ki_density = 50
                keyspecs[key_idx] = %atrim(keyspecs[key_idx])+', DENSITY='+^a(ki_density)

                if (ki_dups .eq. KI_DPS)
                    begin
                    keyspecs[key_idx] = %atrim(keyspecs[key_idx])+', DUPS'
                    if(ki_insert)
                        keyspecs[key_idx] = %atrim(keyspecs[key_idx])+', ATEND'
                    end

                if (ki_mod .eq. KI_MDF)
                    keyspecs[key_idx] = %atrim(keyspecs[key_idx])+', MODIFY'

                if (ki_order .eq. KI_DES)
                    keyspecs[key_idx] = %atrim(keyspecs[key_idx])+', NOASCEND'

                keyspecs[key_idx] = %atrim(keyspecs[key_idx])+', COMPRESS=ALL'

                using ki_null select
                (KI_REP),
                    keyspecs[key_idx] = %atrim(keyspecs[key_idx])+', NULL=REPLICATING'
                (KI_NONREP),
                    keyspecs[key_idx] = %atrim(keyspecs[key_idx])+', NULL=NON_REPLICATING'
                (KI_SHORT),
                    keyspecs[key_idx] = %atrim(keyspecs[key_idx])+', NULL=SHORT'
                endusing
                if (ki_nullval)
                    begin
                    xcall dd_key(dcs, DDK_TEXT, ki_nullval, nullval)
                    keyspecs[key_idx] = %atrim(keyspecs[key_idx])+', VALUE_NULL='+%atrim(nullval)
                    end
                end
            xcall u_message(filespec)
			xcall u_message(keyspecs)
			xcall isamc(%atrim(filespec), flsi_recsz, flsi_nmkeys, keyspecs)
            end
        ('RELATIVE'),
            begin

            end
        ('ASCII'),
            begin

            end
        endusing

        if (interactive)
            xcall u_message("Successfully Created File: "+%atrim(filedef(file_idx)))
        end

routine_exit,
    if (opened)
        begin
        xcall dd_exit(dcs)                                      ;close repository
        clear dcs, mchn_r, tchn_r
        a_dcs = dcs
        end
    freturn(status)
.end
