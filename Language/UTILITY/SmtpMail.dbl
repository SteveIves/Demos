;**************************************************************************
;
;	For more information:
;
;		http://www.imc.org/rfcs.html
;		http://www.ietf.org
;
;	These URLs are just a sample of the information that is available.
;	Search on SMTP and SENDMAIL.
;
;**************************************************************************

;**************************************************************************
;
;	This function sends a specified file to the specified
;	mail address(es).
;
; 03-DEC-2002: Added HELO or EHLO communication protocol.
;
;**************************************************************************

.function SmtpMail, ^val
	a_server		,a	; SMTP server name
	a_sender		,a	; Sender name
	a_tolist		,a	; Recipient list, comma delimited
	a_cclist		,a	; CC list comma delimited
	a_from			,a	; from
	a_replyto		,a	; Reply email address
	a_subject		,a	; Subject line
	a_bodyfile		,a	; File name to send
	a_num_lines		,n	; Number of Single lines to send
	a_messageline	,a	; Single Line to send
	a_attachfile	,a	; File to attach to message
	a_domain		,a	; Sender's domain

.include "SmtpMail.def"
.include "DBLDIR:synsock.def"

external function
	get_smtp_line,	^val
	send_rcpt_list,	^val
	put_data_line,	^val
	synsock,	^val

record
	sd,		i4	; socket descriptor
	rc,		i4	; storage for reply code from server
	inaddr,		i4	; internet address for server - needed by connect
	err,		i4
	chan,		i4	; channel to open bodyfile
	cr,		a1	; to hold carriage return char
	lf,		a1
	line_buf,	a255
	dayname,	[7]a3, "Sun", "Mon", "Tue", "Wed", "Thu", "Fri"
	monthname,	[12]a3, "Jan", "Feb", "Mar", "Apr", "May", "Jun",
	&			 "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
	group dt
	    year,	a4
	    month,	d2
	    day,	a2
	    hour,	a2
	    minute,	a2
	    seconds,	a2
	    milli,	a6
	endgroup

.proc

	cr = %char(13)
	lf = %char(10)

	if (%trim(a_tolist) .le. 1)
	    freturn(SMERR_TOLIST)

	err = %ss_socket(sd, SS_SOCK_STREAM)
	err = %ss_gethostbyname(a_server, inaddr)
	if (err)
	  begin
	    err = %ss_inet_addr(a_server, inaddr)
	    if (err)
	      begin
		freturn(SMERR_BADSERVER)
	      end
	  end
	err = %ss_connect(sd, 25, inaddr)
	if (err)
	  begin
	    freturn(SMERR_NETPROB)
	  end
	if (%get_smtp_line(sd) .ne. 220)  ; Connection establishment failure
	  begin
	    xcall ss_close(sd)
	    freturn(SMERR_SERVERFAIL)
	  end

;
;	Service is available
;	Now tell server sender domain
;
.ifdef USE_EHLO
	xcall ss_sendbuf(sd, "EHLO " + %atrim(a_domain) +cr+lf)
	do
	  begin
	    rc = %get_smtp_line(sd, line_buf)
	    if ((rc .eq. 552) .or. (rc .eq. 451) .or. (rc .eq. 452) .or.
	    &	(rc .eq. 421))
	      begin
		xcall ss_close(sd)
		freturn(SMERR_SERVERFAIL)
	      end
	    if (rc .ne. 250)
	      begin
		xcall ss_close(sd)
		freturn(SMERR_SENDADDR)
	      end
	  end
	until (line_buf(4:1) .eq. " ")
.else
	xcall ss_sendbuf(sd, "HELO " + %atrim(a_domain) +cr+lf)
	rc = %get_smtp_line(sd)
	if ((rc .eq. 552) .or. (rc .eq. 451) .or. (rc .eq. 452) .or.
	&	(rc .eq. 421))
	  begin
	    xcall ss_close(sd)
	    freturn(SMERR_SERVERFAIL)
	  end
	if (rc .ne. 250)
	  begin
	    xcall ss_close(sd)
	    freturn(SMERR_SENDADDR)
	  end
.endc
;	successfully sent HELO info
;	Now tell server sender info, i.e. <reverse-path>
;

	xcall ss_sendbuf(sd, "MAIL FROM:<" + %atrim(a_sender) + ">"+cr+lf)
	rc = %get_smtp_line(sd)
	if ((rc .eq. 552) .or. (rc .eq. 451) .or. (rc .eq. 452) .or.
	&	(rc .eq. 421))
	  begin
	    xcall ss_close(sd)
	    freturn(SMERR_SERVERFAIL)
	  end
	if (rc .ne. 250)
	  begin
	    xcall ss_close(sd)
	    freturn(SMERR_SENDADDR)
	  end
;	successfully sent sender info

;
;	Send to list
;
	rc = %send_rcpt_list(sd, a_tolist)
	if (rc .ne. SMERR_SUCCESS)
	  begin
	    if (rc .eq. SMERR_BADLIST)
	      begin
		xcall ss_close(sd)
		freturn(SMERR_TOLIST)
	      end

	    xcall ss_close(sd)
	    freturn(SMERR_SERVERFAIL)
	  end
;	successfully sent to list

;
;	Send cc list
;
	rc = %send_rcpt_list(sd, a_cclist)
	if (rc .ne. SMERR_SUCCESS)
	  begin
	    if (rc .eq. SMERR_BADLIST)
	      begin
		xcall ss_close(sd)
		freturn(SMERR_CCLIST)
	      end

	    xcall ss_close(sd)
	    freturn(SMERR_SERVERFAIL)
	  end
;	successfully sent cc list

;
;	send DATA command
;
	xcall ss_sendbuf(sd, "DATA" + cr + lf)
	if (%get_smtp_line(sd) .ne. 354)
	  begin
	    xcall ss_close(sd)
	    freturn(SMERR_SERVERFAIL)
	  end

;
;	Send header
;
	xcall put_data_line(sd, "X-Mailer: Synergy DBL")
	dt = %datetime
	xcall put_data_line(sd, "Date: " + dayname[%wkday] + ", " + dt.day +
	&		" " + monthname[dt.month] + " " + dt.year + " " +
	&		dt.hour + ":" + dt.minute + ":" + dt.seconds)
	xcall put_data_line(sd, "To: " + a_tolist(1:%trim(a_tolist)))
	xcall put_data_line(sd, "From: " + a_from(1:%trim(a_from)))
	if (%trim(a_subject) .ne. 0)
	    xcall put_data_line(sd, "Subject: " + a_subject(1:%trim(a_subject)))
	if (%trim(a_cclist) .ne. 0)
	    xcall put_data_line(sd, "Cc: " + a_cclist(1:%trim(a_cclist)))
	if (%trim(a_replyto) .ne. 0)
	    xcall put_data_line(sd, "Reply-To: " + a_replyto(1:%trim(a_replyto)))
	if (^passed(a_attachfile) .and. (%trim(a_attachfile) .ne. 0))
	  begin			; Attachments are a mime extension
	    xcall put_data_line(sd, "Mime-Version: 1.0")
	    xcall put_data_line(sd, 'Content-Type: multipart/mixed; boundary="--=_NextPart_' + %hex(%jbno) + '"')
	    xcall put_data_line(sd, "")
	    xcall put_data_line(sd, '----=_NextPart_' + %hex(%jbno))
	    xcall put_data_line(sd, 'Content-Type: text/plain; charset="iso-8859-1"')
	    xcall put_data_line(sd, "Content-Transfer-Encoding: 7bit")
	  end

	xcall put_data_line(sd, "")

	for chan from 255 thru 0 by -1
	  begin
	    if (.not. %chopen(chan))
		exitloop
	  end
	if (.not. chan)
	    freturn(SMERR_BODYFILE)

	if (^passed(a_bodyfile)) then
	  begin
	    open(chan, I, a_bodyfile) [ERR = bodyfile_error]

	    do forever
	      begin
		reads(chan, line_buf) [$ERR_EOF = eof_label, ERR = bodyfile_error]
		xcall put_data_line(sd, line_buf(1:%trim(line_buf)))
	      end

eof_label,
	    close(chan)
	  end
	else
	  begin
	    for chan = 1 step 1 until a_num_lines do
	      begin
		xcall put_data_line(sd, %atrim(a_messageline(chan)))
	      end
	  end

	if (^passed(a_attachfile))
	  begin
	    xcall put_data_line(sd, "")
	    xcall put_data_line(sd, '----=_NextPart_' + %hex(%jbno))
	    xcall put_data_line(sd, 'Content-Type: application/octet-stream; name="' + %atrim(a_attachfile) + '"')
	    xcall put_data_line(sd, "")

	    open(chan, I, a_attachfile) [ERR = attachfile_error]

	    do forever
	      begin
		reads(chan, line_buf) [$ERR_EOF = attach_eof_label, ERR = attachfile_error]
		xcall put_data_line(sd, line_buf(1:%trim(line_buf)))
	      end

attach_eof_label,
	    xcall put_data_line(sd, "")
	    xcall put_data_line(sd, '----=_NextPart_' + %hex(%jbno) + "--")
	    close(chan)
	  end

	xcall ss_sendbuf(sd, cr + lf + "." + cr + lf) ; send end of data command
	if (%get_smtp_line(sd) .ne. 250)
	  begin
	    xcall ss_close(sd)
	    freturn(SMERR_SERVERFAIL)
	  end

	xcall ss_close(sd)
	freturn(SMERR_SUCCESS)

attachfile_error,
	freturn(SMERR_ATTACHFILE)

bodyfile_error,
	freturn(SMERR_BODYFILE)

.end


;**************************************************************************
;
;	if first character is a period, this function inserts a period
;	in front of the line.  See section 4.5.2 of SMTP FAQ - Transparency
;	note: this function will not trim buf.
;
;**************************************************************************

.function put_data_line, ^val
	sd	,n
	buffer	,a

.include "SmtpMail.def"
.include "DBLDIR:synsock.def"

.proc

	if (buffer(1:1) .eqs. ".")
	    xcall ss_sendbuf(sd, ".")

	xcall ss_sendbuf(sd, buffer + %char(13) + %char(10))
	freturn(1)
.end


;**************************************************************************
.function get_smtp_line, ^val
	sd	,n
	line	,a

.include "SmtpMail.def"
.include "DBLDIR:synsock.def"

external function
	synsock,	^val

record
	i		,i4
	err		,i4
	linebuf		,a255
	linebuf_byte	,[255]a1 @linebuf
	char		,a1

.proc

	i    = 1
	char = ' '
	clear linebuf

	while (char .nes. %char(10))
	  begin
	    err = %ss_recvbuf(sd, char)
	    linebuf_byte[i] = char
	    incr i
	  end

.ifdef DEBUG
	writes(1, %atrim(linebuf))
.endc
	if (^passed(line))
	    line = linebuf
	freturn(%integer(linebuf(1:3)))
.end


;**************************************************************************
.function send_rcpt_list, ^val
	sd		,n
	list		,a

.include "SmtpMail.def"
.include "DBLDIR:synsock.def"

external function
    get_smtp_line,	^val

record
	pos		,i4		; index into list
	eol		,i4		; end of list
	t_spos		,i4		; storage for token starting position
	t_epos		,i4		; srorage for token ending position
	rc		,i4		; storage for reply code from server
	cr		,a1		; storage for carriage return char
	lf		,a1		; storage for line feed char

.proc

	eol = %trim(list)		; end of list = trimmed list
	pos = 1				; start at first position in list
	cr = %char(13)
	lf = %char(10)

	while (pos .le. eol)
	  begin
	    if (.not. ((list(pos:1) .eqs. ' ') .or. (list(pos:1) .eqs. ',')))
	      begin
		t_spos = pos

		while((pos .lt. eol) .and. (list(pos:1) .nes. ' ') .and.
		&	(list(pos:1) .nes. ','))
		    incr pos

		if (pos .ne. eol) then		; set token ending position
		    t_epos = pos - 1
		else
		    t_epos = pos

		xcall ss_sendbuf(sd,
		&	"RCPT TO:<" + list(t_spos,t_epos) + ">" + cr + lf)
		rc = %get_smtp_line(sd)
		if ((rc .eq. 550) .or. (rc .eq. 552) .or. (rc .eq. 450)
		&	.or. (rc .eq. 451) .or. (rc .eq. 452) .or.
		&	(rc .eq. 421))
		    freturn(SMERR_SERVERFAIL)

		if (.not. ((rc .eq. 250) .or. (rc .eq. 251)))
		    freturn(SMERR_BADLIST)
		; successfully sent recipient token

		if (pos .eq. eol)
		    goto done_label
	      end
	    incr pos
	  end

done_label,
	freturn(SMERR_SUCCESS)
.end
