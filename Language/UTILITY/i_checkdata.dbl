;This function is a suppliment to the Synergy/UI toolkit API.  It accepts an
;input window ID, and optional set name.  It then validates each field on the
;window, and checks both the required flag, and if the data field has been
;entered into.  When a field is found to be required, and is empty, the
;standard toolkit/UI information dialog is displayed, and an I_NEXT to
;that field is performed.
;
;It will also accept an optional data argument, which if passed will be checked also. This
;check is performed on the actual data.  If the check fails (blank for alpha, zero for decimal, etc.)
;then the routine will initialise the field, and display the correct message.
;
;The function has one of two return values:
;
;       TRUE (non-zero) window data checked OK!!
;       FALSE (zero) window data fields incomplete - return to I_INPUT
;
;
;To enable compilation of any routine using the function, ensure the following
;is declared in the data division:
;
;       external function
;               i_checkdata,    ^val
;
;or use the compiler switch -X.
;
;       Author  Richard C. Morris
;               Technical consultant
;               Synergex.
;
;***************************************************************************
;
;The code herein is supplied as seen.  Although every attempt will be made
;to correct any problems with the code, The author, nor the company can
;accept any responsability for corruption, or loss of data caused by using
;the routines included within this source code.
;
;***************************************************************************


.function i_checkdata, ^val
a_winid,        n       ;passed window id
a_set_name,     a       ;(optional) set name to process
a_data,			a		;(optional) data argument
a_nomsg,		n		;(optional) if passed, and true, no message is diaplayed.

.include 'WND:tools.def'

.include 'WND:system.def'
.include 'WND:fldinf.def'

.include 'WND:setinf.def'

.align QUAD
stack record
  fld_number,           i4      ;field number in window
  set_number,           i4      ;ordinal set number
  empty_flag,           i4      ;TRUE if field is empty
  enabled,              i4      ;field enabled status
  stop_on_field,        i4      ;stop on the field flag.
  count,                i4      ;loop counter
  got_data,				i4		;set if we have data argument
  routine_addr,         D_ADDR  ;hold toolkit I_NEXT routine
  fld_name,             a30     ;name of input field

.define D_SPACES,'                                              '
.proc

	clear fld_number, fld_name, set_number, stop_on_field, got_data
	
	if %passed(a_data) got_data=TRUE

	if %passed(a_set_name) .and. a_set_name.ne.'    '

	then
	begin ;do processing for a single set of fields, set name passed.

		xcall i_setinf(a_winid, a_set_name, set_number,, gs_fldset)

		for count from 1 thru gs_setcnt
		begin
			clear fld_name
			xcall i_fldinf(a_winid, fld_name, gs_setfldi(count),
&						empty_flag, gs_inpfld,, enabled)
		
			call check_the_field
			if stop_on_field exitloop
		end
	end
	else
	begin ;do processing for all fields on the input windwo, no set name passed
		clear fld_number, fld_name
		if g_fldnam fld_name=g_fldnam
		repeat
		begin
			if fld_number clear fld_name
			if fld_name.eq.'   ' incr fld_number
			xcall i_fldinf(a_winid, fld_name, fld_number,
			&			empty_flag, gs_inpfld,, enabled)

			if fld_name.eq.'   ' exitloop   ;the end

			call check_the_field

			if stop_on_field exitloop
		end
	end

	if .not.stop_on_field freturn TRUE     ;all data checked, and OK!!

	;now display a warning message

	if %passed(a_nomsg) .and. a_nomsg then
		nop
	else
		xcall info('Required field has no data')

	;force processing to empty field

	xcall i_next(a_winid, a_set_name, fld_name)
  
	g_fldnam=fld_name             ;in case it is required!

	freturn FALSE

check_the_field,

	;check the field details

	;ignore disabled fields


	if .not.enabled return

	;check it is a required field

	if .not.gs_req return

	;field required - is it empty ?

	if empty_flag
	begin
		stop_on_field=TRUE
		return
	end

	onerror bad_data
	
	;now check the actual data area.
	
	if got_data
	begin
		case gs_typ of
		begincase
		D_ALPHA :
		begin
			if a_data(gs_pos:gs_siz).eq.D_SPACES stop_on_field=TRUE
		end
		D_DECIMAL :
		begin
			if .not.^d(a_data(gs_pos:gs_siz)) stop_on_field=TRUE
		end
		D_FIXED :
		begin
			if .not.^d(a_data(gs_pos:gs_siz)) stop_on_field=TRUE
		end
		D_INTEGER :
		begin
			if .not.^i(a_data(gs_pos:gs_siz)) stop_on_field=TRUE
		end
		endcase
		
	end

	offerror
return

bad_data,
	offerror
	stop_on_field=TRUE
return

.end
