.function ll_accept ,^VAL

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Author :      William Hawkins   Synergex
;
; Minimum Version : Synergy 5.1  (any platform)
;
; Revision History :
;
; 16th April 1999   Initial version submitted to code exchange
;
; Description :
;
; This function will accept characters from the keyboard and return the
; value of the key entered, or if a function key was pressed, the value
; of the function key.
;
; This routine supports VTxxx terminals, ANSI console's and PC's
;
; Function key values are stored in KEYDEF.DEF
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

a_wndid,    n           ;Window id

; Returns a single character.
; Function key values are defined in SRC:KEYDEF.DEF

.include 'UT:keydef.def'

.define TT_UNK      ,-1     ;unknown
.define TT_VT       ,1      ;VT???
.define TT_ANSI     ,2      ;ANSI Console
.define TT_PC       ,3      ;PC

external function
	ll_input    ,^VAL       ;get one character

.align
static record
	tt_type     ,d1     ;terminal type

.align
record
	inp_char    ,i4     ;input character
	char        ,i4     ;return character
	len     ,i4     ;length of TERM
	term        ,a20        ;DTKTERM / TERM setting

.proc

	if(.not.tt_type) call set_tt_type
					;find out the type of terminal

	char = %ll_input(a_wndid)   ;read one character
	
	using tt_type select
	(TT_VT),
		begin           ;vt??? escape sequence
		if(char.eq.KEY_ESC) call vt
		end
	(TT_PC),
		begin           ;pc function key
		if(char.eq.KEY_NUL) call pc
		end
	(TT_ANSI),
		begin           ;ansi console
		if(char.eq.KEY_ESC) call ansi
		end
	endusing

	if(char.eq.KEY_CR)
		begin
		inp_char = %ll_input   ;get line feed and throw away
		end

	freturn char            ;exit to calling program

;   ---------------------------------------------------------------------

vt,
	inp_char = %ll_input(a_wndid)   ;escape qualifier
	if(inp_char.eq.79.or.inp_char.eq.91) inp_char = %ll_input(a_wndid)
					;csi/ss3 entered - get next character
	if(inp_char.ge.49.and.inp_char.le.54)
	 then   begin           ;function/arrow key pressed
		char = 256 + inp_char
					;assume arrow key pressed
		inp_char = %ll_input(a_wndid)
					;get next character
		if(inp_char.ne.126)
			begin       ;function key pressed
			using char select
			(257),  char = 256 + 10 + inp_char
			(258),  char = 256 + 20 + inp_char
			(259),  char = 256 + 30 + inp_char
			(), goto inperr
			endusing
			if(%ll_input(a_wndid).ne.126) goto inperr
					;invalid key sequence
			end
		end
	 else   char = 128 + inp_char   ;add esc modifier

inperr,
	return

;   ---------------------------------------------------------------------

pc,
	using %ll_input(a_wndid) select
	(59),   char = KEY_F1       ;f1          -> f1
	(60),   char = KEY_F2       ;f2          -> f2
	(61),   char = KEY_F3       ;f3          -> f3
	(62),   char = KEY_F4       ;f4          -> f4
	(63),   char = KEY_F5       ;f5          -> f5
	(64),   char = KEY_F6       ;f6          -> f6
	(65),   char = KEY_F7       ;f7          -> f7
	(66),   char = KEY_F8       ;f8          -> f8
	(67),   char = KEY_F9       ;f9          -> f9
	(68),   char = KEY_F10      ;f10         -> f10
	(133),  char = KEY_F11      ;f11         -> f11
	(134),  char = KEY_F12      ;f12         -> f12

	(71),   char = KEY_FIND     ;home        -> find
	(72),   char = KEY_UP       ;up arrow    -> up
	(73),   char = KEY_PREV     ;page up     -> prev
	(75),   char = KEY_LEFT     ;left arrow  -> left
	(77),   char = KEY_RIGHT    ;right arrow -> right
	(79),   char = KEY_SEL      ;end         -> select
	(80),   char = KEY_DOWN     ;down arrow  -> down
	(81),   char = KEY_NEXT     ;page down   -> next
	(82),   char = KEY_INS      ;insert      -> insert
	(83),   char = KEY_REM      ;delete      -> remove

	(84),   nop                     ;shift f1
	(85),   nop                     ;shift f2
	(86),   nop                     ;shift f3
	(87),   nop                     ;shift f4
	(88),   nop                     ;shift f5
	(89),   nop                     ;shift f6
	(90),   nop                     ;shift f7
	(91),   nop                     ;shift f8
	(92),   nop                     ;shift f9
	(93),   nop         ;shift f10

	(94),   nop         ;ctrl f1
	(95),   nop                     ;ctrl f2
	(96),   nop                     ;ctrl f3
	(97),   nop         ;ctrl f4
	(98),   nop         ;ctrl f5
	(99),   nop         ;ctrl f6
	(100),  nop         ;ctrl f7
	(101),  nop         ;ctrl f8
	(102),  nop         ;ctrl f9
	(103),  nop         ;ctrl f10

	(46),   nop                     ;shift delete
	(48),   nop                     ;shift insert
	(49),   nop                     ;shift end
	(50),   nop                     ;shift down arrow
	(51),   nop                     ;shift page down
	(52),   nop                     ;shift left arrow
	(54),   nop                     ;shift right arrow
	(55),   nop                     ;shift home
	(56),   nop                     ;shift up arrow
	(57),   nop                     ;shift page up

	(146),  nop                     ;ctrl insert
	(147),  nop                     ;ctrl delete
	(132),  nop                     ;ctrl page up
	(141),  nop                     ;ctrl up arrow
	(145),  nop                     ;ctrl down arrow
	(83),   nop                     ;ctrl left arrow
	(84),   nop                     ;ctrl right arrow
	(85),   nop                     ;ctrl end
	(86),   nop                     ;ctrl page down
	(87),   nop                     ;ctrl home
	endusing

	return

;   ---------------------------------------------------------------------

ansi,
	inp_char = %ll_input(a_wndid)   ;escape qualifier
	if(inp_char.eq.91) inp_char = %ll_input(a_wndid)
					;csi entered - get next character
	using inp_char select
	(65),   char = KEY_UP       ;up arrow    -> up
	(66),   char = KEY_DOWN     ;down arrow  -> down
	(67),   char = KEY_RIGHT    ;right arrow -> right
	(68),   char = KEY_LEFT     ;left arrow  -> left

	(77),   char = KEY_F1       ;f1          -> f1
	(78),   char = KEY_F2       ;f2          -> f2
	(79),   char = KEY_F3       ;f3          -> f3
	(80),   char = KEY_F4       ;f4          -> f4
	(81),   char = KEY_F5       ;f5          -> f5
	(82),   char = KEY_F6       ;f6          -> f6
	(83),   char = KEY_F7       ;f7          -> f7
	(84),   char = KEY_F8       ;f8          -> f8
	(85),   char = KEY_F9       ;f9          -> f9
	(86),   char = KEY_F10      ;f10         -> f10
	(87),   char = KEY_F11      ;f11         -> f11
	(88),   char = KEY_F12      ;f12         -> f12

	(70),   char = KEY_DO       ;end         -> do
	(71),   char = KEY_NEXT     ;pagedown    -> next
	(72),   char = KEY_FIND     ;home        -> find
	(73),   char = KEY_PREV     ;pageup      -> prev
	(76),   char = KEY_INS      ;insert      -> insert
;   (??),   char = KEY_REM      ;delete      -> remove
	endusing

	return

;   ---------------------------------------------------------------------

set_tt_type,

	xcall getlog("DTKTERM", term, len)

	if(.not.term.or..not.len) xcall getlog("TERM", term, len)

	using term select
	("VT"),     tt_type = TT_VT
	("ANSI "),  tt_type = TT_ANSI
	("MSWINDOWS "), tt_type = TT_PC
	(),     tt_type = TT_UNK
	endusing

	return

.end

;   ---------------------------------------------------------------------

.function ll_input ,^VAL

a_wndid,    n           ;window id

; Returns the numeric value of the next character in the keyboard buffer

.include 'WND:windows.def'

.align
	record
inp_char,   i4          ;character entered

.proc
	xcall w_disp(a_wndid, WD_ACCEPT, inp_char)
					;get input from keyboard
	freturn inp_char
.end

