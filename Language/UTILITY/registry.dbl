;****************************************************************************
;
; Title:		RegStartSession.dbl
;
; Author:		Steve Ives (Synergex Professional Services Group)
;
; Date:			9th June 1999
;
; Description:	All of the WIN32 API routines which communicate with the
;				Windows Registry are found in ADVAPI32.DLL in the Windows
;				System directory. This routine opens the DLL ready for use,
;				returning the handle of the DLL for use in subsequent calls.
;
; Platforms:	32-bit Microsoft Windows platforms only.
;
; Warning:		The operation and reliability of a Windows system depends on
;				the integrity of the Registry.  Inappropriate use of this
;				routine could result in serious damage to the registry.
;				Please exercise extreme caution when using this	routine.
;
;****************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
;****************************************************************************

.function RegStartSession, ^VAL

;Argument list

	a_reghdl	,n	;Registry (DLL) handle

;End of argument list

.define REGISTRY_INTERNAL
.include "UT:registry.def"

.align
stack record
	status		,i4		;Return status

.proc

.ifdef D_GUI

	status = REG_SUCCESS

	onerror error

	a_reghdl = %dll_open("advapi32.dll")

	if (%FALSE)
	begin
Error,	clear a_reghdl
		status = REG_ERR_DLLOPN
	end

.else

	status = REG_ERR_DLLOPN

.endc

	freturn status

.end

;****************************************************************************
;
; Title:		RegEndSession.dbl
;
; Author:		Steve Ives (Synergex Professional Services Group)
;
; Date:			9th June 1999
;
; Description:	This routine ends a Registry session by closing the DLL which
;				was opened in the RegStartSession routine.  It should be the
;				last routine called in the Registry session.
;
; Platforms:	32-bit Microsoft Windows platforms only.
;
; Warning:		The operation and reliability of a Windows system depends on
;				the integrity of the Registry.  Inappropriate use of this
;				routine could result in serious damage to the registry.
;				Please exercise extreme caution when using this	routine.
;
;****************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
;****************************************************************************

.function RegEndSession, ^VAL

;Argument list

	a_reghdl	,n	;Registry (DLL) handle

;End of argument list

.define REGISTRY_INTERNAL
.include "UT:registry.def"

.proc

	onerror error

	a_reghdl = %dll_close(a_reghdl)
	clear a_reghdl

Error,

	freturn REG_SUCCESS

.end

;****************************************************************************
;
; Title:		RegCreateKey.dbl
;
; Author:		Steve Ives (Synergex Professional Services Group)
;
; Date:			9th June 1999
;
; Description:	This routine creates a new key in the registry.  The key
;				specified in a_key CAN contain several "new levels" of keys,
;				and all new parent keys will also be created.
;
; Platforms:	32-bit Microsoft Windows platforms only.
;
; Warning:		The operation and reliability of a Windows system depends on
;				the integrity of the Registry.  Inappropriate use of this
;				routine could result in serious damage to the registry.
;				Please exercise extreme caution when using this	routine.
;
;****************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
;****************************************************************************

.function RegCreateKey, ^VAL

;Argument list

	a_reghdl	,n		;Registry handle	(Returned by RegStartSession)
	a_hive		,n		;Registry hive		(e.g. HKEY_LOCAL_MACHINE)
	a_key		,a		;Path below hive	(e.g. "Software\SomeCompany\SomeProduct")
	a_flush		,n		;(Optional) flush	(flush to disk after create)

;End of argument list

.define REGISTRY_INTERNAL
.include "UT:registry.def"

.align
stack record ivars
	status		,i4		;Return status
	kh			,i4		;Handle to open key

stack record avars
	key			,a255	;a_key in a null-terminated string

.proc

	clear ^i(ivars), avars

	status = REG_SUCCESS

	;-----
    ;Create requested key

	xcall fill(%char(0),key)
	key(1:%trim(a_key)) = a_key

	if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegCreateKeyA",a_hive,^addr(key),^addr(kh))) then
		status = REG_ERR_CREKEY
	else
	begin
		;Flush to disk
		if (^passed(a_flush).and.(a_flush.eq.REG_FLUSH))
			if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegFlushKey",kh))
				status = REG_ERR_FLUSH

		;Close new key
		if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegCloseKey",kh))
			status = REG_ERR_CLSKEY
	end

	freturn status

.end


;****************************************************************************
;
; Title:		RegDeleteKey.dbl
;
; Author:		Steve Ives (Synergex Professional Services Group)
;
; Date:			9th June 1999
;
; Description:	This routine deletes a key in the Registry.  Any values
;				contained within the key will also be deleted.  On Windows
;				95 and Windows 98, this routine will recursively delete any
;				sub-keys of the specified key (along with all of their values)
;				in a similar way to the MS-DOS deltree utility which deletes
;				an entire directory structure.  On Windows NT, the key to be
;				deleted MUST NOT contain sub-keys, or the routine will fail.
;
; Platforms:	32-bit Microsoft Windows platforms only.
;
; Warning:		The operation and reliability of a Windows system depends on
;				the integrity of the Registry.  Inappropriate use of this
;				routine could result in serious damage to the registry.
;				Please exercise extreme caution when using this	routine.
;
;****************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
;****************************************************************************

.function RegDeleteKey, ^VAL

;Argument list

	a_reghdl	,n		;Registry handle	(Returned by RegStartSession)
	a_hive		,n		;Registry hive		(e.g. HKEY_LOCAL_MACHINE)
	a_key		,a		;Path below hive	(e.g. "Software\SomeCompany\Someproduct")

;End of argument list

.define REGISTRY_INTERNAL
.include "UT:registry.def"

.align
stack record
	status		,i4		;Return status
	key			,a255	;a_key in a null-terminated string

.proc

	status = REG_SUCCESS

	xcall fill(%char(0),key)
	key(1:%trim(a_key)) = a_key

	if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegDeleteKeyA",a_hive,^addr(key)))
		status = REG_ERR_DELKEY

	freturn status

.end


;****************************************************************************
;
; Title:		RegDeleteValue.dbl
;
; Author:		Steve Ives (Synergex Professional Services Group)
;
; Date:			9th June 1999
;
; Description:	This routine deletes a value from a key in the Registry.
;
; Platforms:	32-bit Microsoft Windows platforms only.
;
; Warning:		The operation and reliability of a Windows system depends on
;				the integrity of the Registry.  Inappropriate use of this
;				routine could result in serious damage to the registry.
;				Please exercise extreme caution when using this	routine.
;
;****************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
;****************************************************************************

.function RegDeleteValue, ^VAL

;Argument list

	a_reghdl	,n		;Registry handle	(Returned by RegStartSession)
	a_hive		,n		;Registry hive		(e.g. HKEY_LOCAL_MACHINE)
	a_key		,a		;Path below hive	(e.g. "Software\Somecompany\Someproduct")
	a_value		,a		;Value name			(e.g. "Version")
	a_flush		,n		;(Optional) flush	(flush to disk after delete)

;End of argument list

.define REGISTRY_INTERNAL
.include "UT:registry.def"

.align
stack record ivars
	status		,i4		;Return status
	kh			,i4		;Handle to currently open key

stack record avars
	key			,a255	;a_key in a null-terminated string
	value		,a255	;a_value in a null-terminated string

.proc

	clear ^i(ivars), avars

	status = REG_SUCCESS

	;-----
    ;Open requested key

	xcall fill(%char(0),key)
	key(1:%trim(a_key)) = a_key

	if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegOpenKeyA",a_hive,^addr(key),^addr(kh))) then
		status = REG_ERR_OPNKEY
	else
	begin

		;Delete the requested value
		xcall fill(%char(0),value)
		value(1:%trim(a_value)) = a_value

		if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegDeleteValueA",kh, ^addr(value)))
			status = REG_ERR_DELVAL

		;Flush to disk
		if (^passed(a_flush).and.(a_flush.eq.REG_FLUSH))
			if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegFlushKey",kh))
				status = REG_ERR_FLUSH

		;Close the key
		if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegCloseKey",kh) .ne. REG_SUCCESS)
			status = REG_ERR_CLSKEY
    end

	freturn status

.end

;****************************************************************************
;
; Title:		RegGetBinary.dbl
;
; Author:		Steve Ives (Synergex Professional Services Group)
;
; Date:			9th June 1999
;
; Description:	This routine retrieves a REG_BINARY value from the specified
;				key in the Registry.  If the specified key or value is not
;				found then a failure status is returned, otherwise the handle
;				of a dynamic memory section containing the binary data from the
;				registry is returned, along with the length of that data in bytes.
;
; Platforms:	32-bit Microsoft Windows platforms only.
;
; Warning:		The operation and reliability of a Windows system depends on
;				the integrity of the Registry.  Inappropriate use of this
;				routine could result in serious damage to the registry.
;				Please exercise extreme caution when using this	routine.
;
;****************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
;****************************************************************************

.function RegGetBinary, ^VAL

;Argument list

	a_reghdl	,n		;Registry handle    (Returned by RegStartSession)
	a_hive		,n		;Registry hive      (e.g. HKEY_LOCAL_MACHINE)
	a_key		,a		;Path below hive    (e.g. "Software\Somecompany\Someproduct")
	a_value		,a		;Value name			(e.g. "AllowPosting")
	a_data		,n		;Value data 		(returned, dynamic memory handle)
	a_size		,n		;Value size			(returned, size in bytes of returned data)

;End of argument list

.define REGISTRY_INTERNAL
.include "UT:registry.def"

.align
stack record ivars
	status		,i4		;Return status
	kh			,i4		;Handle to currently open key
    type		,i4		;Type of value found in registry
    size		,i4		;Size of value found in registry
    pos			,i4		;Position of first null in return value
	null		,i4		;A null character
	mh			,i4		;Dynamic memory handle for data buffer

stack record avars
	key			,a255	;a_key in a null-terminated string
	value		,a255	;a_value in a null-terminated string

.proc

	clear ^i(ivars), avars

	status = REG_SUCCESS

    ;Open requested key
	xcall fill(%char(0),key)
	key(1:%trim(a_key)) = a_key

	if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegOpenKeyA",a_hive,^addr(key),^addr(kh))) then
		status = REG_ERR_OPNKEY
	else
	begin

		xcall fill(%char(0),value)
		if (^passed(a_value))
			value(1:%trim(a_value)) = a_value

		;Get the value's data type and size
		if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegQueryValueExA",kh,^addr(value),null,^addr(type),null,^addr(size))) then
			status = REG_ERR_GETVAL
		else
		begin
			case type of
			begincase
			REG_BINARY:
			begin
				;Allocate dynamic memory
				mh = %mem_proc(DM_ALLOC+DM_STATIC,BINSIZE(size))

				if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegQueryValueExA",kh,^addr(value),null,null,^addr(BINDATA(mh,1)),^addr(size))) then
				begin
					status = REG_ERR_GETVAL
					mh=%mem_proc(DM_FREE,mh)
				end
				else
				begin
					a_data = mh				;Success, return the dynamic memory handle
					a_size = size			; ... and size
				end
			end
			REG_DWORD:
				status = REG_ERR_VALTYP
			REG_SZ:
				status = REG_ERR_VALTYP
			endcase

		end

		if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegCloseKey",kh))
			status = REG_ERR_CLSKEY
	end

	freturn status

.end


;****************************************************************************
;
; Title:		RegGetDword.dbl
;
; Author:		Steve Ives (Synergex Professional Services Group)
;
; Date:			9th June 1999
;
; Description:	This routine retrieves a REG_DWORD (4-byte integer, i4) value
;				from the specified key in the Registry.  If the specified key
;				or value is not found then a failure status is returned,
;				otherwise the data from the	registry value is returned.
;
; Platforms:	32-bit Microsoft Windows platforms only.
;
; Warning:		The operation and reliability of a Windows system depends on
;				the integrity of the Registry.  Inappropriate use of this
;				routine could result in serious damage to the registry.
;				Please exercise extreme caution when using this	routine.
;
;****************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
;****************************************************************************

.function RegGetDword, ^VAL

;Argument list

	a_reghdl	,n		;Registry handle    (Returned by RegStartSession)
	a_hive		,n		;Registry hive      (e.g. HKEY_LOCAL_MACHINE)
	a_key		,a		;Path below hive    (e.g. "Software\Somecompany\Someproduct")
	a_value		,a		;Value name			(e.g. "AllowPosting")
	a_data		,n		;Value data 		(returned)

;End of argument list

.define REGISTRY_INTERNAL
.include "UT:registry.def"

.align
stack record ivars
	status		,i4		;Return status
	kh			,i4		;Handle to currently open key
    type		,i4		;Type of value found in registry
    size		,i4		;Size of value found in registry
    pos			,i4		;Position of first null in return value
	null		,i4		;A null character
	data		,i4		;Return buffer (value data from registry)

stack record avars
	key			,a255	;a_key in a null-terminated string)
	value		,a255	;a_value in a null-terminated string)

.proc

	clear ^i(ivars), avars, a_data

	status = REG_SUCCESS

	xcall fill(%char(0),key)
	key(1:%trim(a_key)) = a_key

    ;Open requested key
	if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegOpenKeyA",a_hive,^addr(key),^addr(kh))) then
		status = REG_ERR_OPNKEY
	else
	begin

		xcall fill(%char(0),value)
		if (^passed(a_value))
			value(1:%trim(a_value)) = a_value

		size=4

		;Get requested value
		if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegQueryValueExA",kh,^addr(value),null,^addr(type),^addr(data),^addr(size))) then
			status = REG_ERR_GETVAL
		else
		begin

			case type of
			begincase
			REG_DWORD:
				a_data = data		;Return data
			REG_SZ:
				status = REG_ERR_VALTYP
			REG_BINARY:
				status = REG_ERR_VALTYP
			endcase

		end

		if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegCloseKey",kh))
			status = REG_ERR_CLSKEY
	end

	freturn status

.end


;****************************************************************************
;
; Title:		RegGetString.dbl
;
; Author:		Steve Ives (Synergex Professional Services Group)
;
; Date:			9th June 1999
;
; Description:	This routine retrieves a REG_SZ (string) value from the
;				specified key in the Registry.  If the specified key or value
;				is not found then a failure status is returned, otherwise the
;				data from the	registry value is returned.
;
; Platforms:	32-bit Microsoft Windows platforms only.
;
; Warning:		The operation and reliability of a Windows system depends on
;				the integrity of the Registry.  Inappropriate use of this
;				routine could result in serious damage to the registry.
;				Please exercise extreme caution when using this	routine.
;
;****************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
;****************************************************************************

.function RegGetString, ^VAL

;Argument list

	a_reghdl	,n		;Registry handle	(Returned by RegStartSession)
	a_hive		,n		;Registry hive      (e.g. HKEY_LOCAL_MACHINE)
	a_key		,a		;Path below hive    (e.g. "Software\Somecompany\Someproduct")
	a_value		,a		;Value name			(e.g. "LastProcessDate")
	a_data		,a		;Value data			(returned)

;End of argument list

.define REGISTRY_INTERNAL
.include "UT:registry.def"

.align
stack record ivars
	status		,i4		;Return status
	kh			,i4		;Handle to currently open key
    type		,i4		;Type of value found in registry
    size		,i4		;Size of value found in registry
    pos			,i4		;Position of first null in return value
	null		,i4		;A null character

stack record avars
	key			,a255	;a_key in a null-terminated string
	value		,a255	;a_value in a null-terminated string
	data		,a255	;Value data from registry

.proc

	clear ^i(ivars), avars

	status = REG_SUCCESS

	xcall fill(%char(0),key)
	key(1:%trim(a_key)) = a_key

    ;Open requested key
	if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegOpenKeyA",a_hive,^addr(key),^addr(kh))) then
		status = REG_ERR_OPNKEY
	else
	begin
		xcall fill(%char(0),value)
		if (^passed(a_value))
			value(1:%trim(a_value)) = a_value

		;Get the value's data type & size
		if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegQueryValueExA",kh,^addr(value),null,^addr(type),null,^addr(size))) then
			status = REG_ERR_GETVAL
		else
		begin
			case type of
			begincase
			REG_SZ:
			begin
				;It's a string key, get the value
				clear data(1:size)
				if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegQueryValueExA",kh,^addr(value),null,null,^addr(data),^addr(size))) then
					status = REG_ERR_GETVAL
				else
				begin
					;Look for a Null in the returned string
					pos = %instr(1,data, %char(0))
					;Return data up to the first null
					using pos select
					(0),	;No null, it's all data
						a_data = data
					(1),	;Null in position 1, it's an empty string
						clear a_data
					(),		;Return data before the null
						a_data = data(1:pos-1)
					endusing
				end
			end
			REG_DWORD:
				status = REG_ERR_VALTYP
			REG_BINARY:
				status = REG_ERR_VALTYP
			endcase

		end

		if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegCloseKey",kh))
			status = REG_ERR_CLSKEY
	end

	freturn status

.end


;****************************************************************************
;
; Title:		RegSetBinary.dbl
;
; Author:		Steve Ives (Synergex Professional Services Group)
;
; Date:			9th June 1999
;
; Description:	This routine sets a REG_BINARY value in the specified key in
;				the Registry. If the value is not found, it will be created.
;				If the key (or parent keys) are not found, they will be created.
;				In other words, this routine can create a new value, several
;				levels deep in a totally new heirarchy in the Registry.  Binary
;				data is passed to this routine in a dynamic memory section,
;				with the handle and size of the section being provided to the
;				routine.
;
; Platforms:	32-bit Microsoft Windows platforms only.
;
; Warning:		The operation and reliability of a Windows system depends on
;				the integrity of the Registry.  Inappropriate use of this
;				routine could result in serious damage to the registry.
;				Please exercise extreme caution when using this	routine.
;
;****************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
;****************************************************************************

.function RegSetBinary, ^VAL

;Argument list

	a_reghdl	,n		;Registry handle	(Returned by RegStartSession
	a_hive		,n		;Registry hive		(e.g. HKEY_LOCAL_MACHINE)
	a_key		,a		;Path below hive	(e.g. "Software\SomeCompany\SomeProduct")
	a_value		,a		;Value name			(e.g. "LastPostingDate")
	a_data		,n		;Value data			(Dynamic memory handle)
	a_size		,n		;Value size			(Size of data in bytes)
	a_flush		,n		;(Optional) Flush to disk after set
	a_freemem	,n		;(Optional) Free dynamic memory after set

;End of argument list

.define REGISTRY_INTERNAL
.include "UT:registry.def"

.align
stack record ivars
	status		,i4		;Return status
	kh			,i4		;Handle to currently open key
	type		,i4		;Value type to be created (REG_SZ)
	size		,i4		;Size of data, including terminating null
	null		,i4		;A null (binary 0

stack record avars
	key			,a255	;a_key in a null-terminated string
	value		,a255	;a_value in a null-terminated string

.proc

	clear ^i(ivars), avars

	status = REG_SUCCESS

	;Open or create the requested key
	xcall fill(%char(0),key)
	key(1:%trim(a_key)) = a_key

	if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegCreateKeyA",a_hive,^addr(key),^addr(kh))) then
		status = REG_ERR_CREKEY
	else
	begin
		;Create or set the new value in the opened key
		xcall fill(%char(0),value)
		value(1:%trim(a_value)) = a_value

		type = REG_BINARY
		size = a_size

		if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegSetValueExA",kh,^addr(value),null,type,^addr(BINDATA(a_data,1)),size))
			status = REG_ERR_SETVAL

		;Deallocate dynamic memory?
		if (^passed(a_freemem).and.(a_freemem.eq.REG_FREEMEM))
			a_data = %mem_proc(DM_FREE,a_data)

		;Flush to disk?
		if (^passed(a_flush).and.(a_flush.eq.REG_FLUSH))
			if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegFlushKey",kh))
				status = REG_ERR_FLUSH

		;Close the key
		if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegCloseKey",kh))
			status = REG_ERR_CLSKEY
	end

	freturn status

.end


;****************************************************************************
;
; Title:		RegSetDword.dbl
;
; Author:		Steve Ives (Synergex Professional Services Group)
;
; Date:			9th June 1999
;
; Description:	This routine sets a REG_DWORD (4-byte integer, i4) value in
;				the specified key in the Registry.  If the value is not found,
;				it will be created. If the key (or parent keys) are not found,
;				they will be created.  In other words, this routine can create
;				a new value, several levels deep in a totally new heirarchy
;				in the Registry.
;
; Platforms:	32-bit Microsoft Windows platforms only.
;
; Warning:		The operation and reliability of a Windows system depends on
;				the integrity of the Registry.  Inappropriate use of this
;				routine could result in serious damage to the registry.
;				Please exercise extreme caution when using this	routine.
;
;****************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
;****************************************************************************

.function RegSetDword, ^VAL

;Argument list

	a_reghdl	,n		;Registry handle	(Returned by RegStartSession)
	a_hive		,n		;Registry hive		(e.g. HKEY_LOCAL_MACHINE)
	a_key		,a		;Path below hive	(e.g. "Software\SomeCompany\SomeProduct")
	a_value		,a		;Value name			(e.g. "AllowPosting")
	a_data		,n		;Value data			(e.g. 1)
	a_flush		,n		;(Optional) flush	(flush to disk after set)

;End of argument list

.define REGISTRY_INTERNAL
.include "UT:registry.def"

.align
stack record ivars
	status		,i4		;Return status
	kh			,i4		;Handle to currently open key
	type		,i4		;Value type to be created (REG_SZ)
	size		,i4		;Size of data, including terminating null
	null		,i4		;A null (binary 0
	data		,i4		;Value to set (from a_data)

stack record avars
	key			,a255	;a_key  in null-terminated string
	value		,a255	;a_value  in null-terminated string

.proc

	clear ^i(ivars), avars

	status = REG_SUCCESS

	xcall fill(%char(0),key)
	key(1:%trim(a_key)) = a_key

	;Create new key
	if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegCreateKeyA",a_hive,^addr(key),^addr(kh))) then
		status = REG_ERR_CREKEY
	else
	begin
		xcall fill(%char(0),value)
		value(1:%trim(a_value)) = a_value

		type = REG_DWORD
		size = 4
		data = a_data

		;Set value of new key
		if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegSetValueExA",kh,^addr(value),null,type,^addr(data),size))
			status = REG_ERR_SETVAL

		;Flush to disk
		if (^passed(a_flush).and.(a_flush.eq.REG_FLUSH))
			if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegFlushKey",kh))
				status = REG_ERR_FLUSH

		;Close new key
		if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegCloseKey",kh))
			status = REG_ERR_CLSKEY
	end

	freturn status

.end


;****************************************************************************
;
; Title:		RegSetString.dbl
;
; Author:		Steve Ives (Synergex Professional Services Group)
;
; Date:			9th June 1999
;
; Description:	This routine sets a REG_SZ (variable length, null-terminated
;				string) value in the specified key in the Registry.  If the
;				value is not found, it will be created. If the key (or parent
;				keys) are not found, they will be created. In other words,
;				this routine can create a new value, several levels deep in
;				a totally new heirarchy in the Registry.
;
; Platforms:	32-bit Microsoft Windows platforms only.
;
; Warning:		The operation and reliability of a Windows system depends on
;				the integrity of the Registry.  Inappropriate use of this
;				routine could result in serious damage to the registry.
;				Please exercise extreme caution when using this	routine.
;
;****************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
;****************************************************************************

.function RegSetString, ^VAL

;Argument list

	a_reghdl	,n		;Registry handle	(Returned by RegStartSession
	a_hive		,n		;Registry hive		(e.g. HKEY_LOCAL_MACHINE)
	a_key		,a		;Path below hive	(e.g. "Software\SomeCompany\SomeProduct")
	a_value		,a		;Value name			(e.g. "LastPostingDate")
	a_data		,a		;Value data			(e.g. "06/09/1999")
	a_flush		,n		;(Optional) flush	(flush to disk after set)

;End of argument list

.define REGISTRY_INTERNAL
.include "UT:registry.def"

.align					;A new comment
stack record ivars
	status		,i4		;Return status
	kh			,i4		;Handle to currently open key
	type		,i4		;Value type to be created (REG_SZ)
	size		,i4		;Size of data, including terminating null
	null		,i4		;A null (binary 0

stack record avars
	key			,a255	;a_key in a null-terminated string
	value		,a255	;a_value in a null-terminated string
	data		,a255	;a_data in a null-terminated string

.proc

	clear ^i(ivars), avars

	status = REG_SUCCESS

	xcall fill(%char(0),key)
	key(1:%trim(a_key)) = a_key

	;Open or create the requested key
	if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegCreateKeyA",a_hive,^addr(key),^addr(kh))) then
		status = REG_ERR_CREKEY
	else
	begin
		xcall fill(%char(0),value)
		value(1:%trim(a_value)) = a_value

		xcall fill(%char(0),data)

		if (%trim(a_data))
			data(1:%trim(a_data)) = a_data

		type = REG_SZ
		size = %trim(a_data) + 1

		;Create or set the new value in the opened key
		if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegSetValueExA",kh,^addr(value),null,type,^addr(data),size))
			status = REG_ERR_SETVAL

		;Flush to disk
		if (^passed(a_flush).and.(a_flush.eq.REG_FLUSH))
			if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegFlushKey",kh))
				status = REG_ERR_FLUSH

		;Close the key
		if (%dll_call(a_reghdl,DLL_TYPE_WINAPI,"RegCloseKey",kh))
			status = REG_ERR_CLSKEY
	end

	freturn status

.end


