;;******************************************************************************
;;
;; Class:		SynPsg.Rps.Repository
;;
;; Description:	Access a Synergy/DE Repository (via ddlib.elb)
;;
;; Author:		Steve Ives, Synergex Professional Services Group
;;
;; Date: 		19th October 2007
;;
;; ****************************************************************************
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code.
;;
;; ****************************************************************************
;;
;; $Revision: 5 $
;;
;; $Date: 2011-06-09 16:05:17-07:00 $
;;
;; ****************************************************************************
;;
import SynPsg.Rps
import System.Collections

.define DDINFO_DEFINES_ONLY
.include "RPSLIB:ddinfo.def"
.undefine DDINFO_DEFINES_ONLY

namespace SynPsg.Rps

	public class Repository

		.region "Private data"
		
		public static RpsControl	,dcs
		
		private record p_InstanceData
			p_Structures	,@RpsStructureCollection
			p_Files			,@RpsFileCollection
			p_Templates		,@RpsTemplateCollection
			p_Formats		,@RpsFormatCollection
			p_DateFormats	,@RpsFormatCollection
			p_TimeFormats	,@RpsFormatCollection
			p_c_info		,c_info
			p_MainFile		,a255
			p_TextFile		,a255
		endrecord

		.endregion
		
		.region "Constructors and destructors"
		
		;;Open the default Repository
		public method Repository
			endparams
		proc
			OpenRps()
		endmethod
		
		;;Open a specific Repository
		public method Repository
			required in MainFile, String
			required in TextFile, String
			endparams
		proc
			OpenRps(MainFile,TextFile)
		endmethod
		
		;;Destructor
		method ~Repository
		proc
			CloseRps()
		endmethod
		
		.endregion
		
		.region "Private methods"

		;;Open the default repository
		private method OpenRps, void
			endparams
		proc
			dd_init(RpsControl,,,p_MainFile,p_TextFile)
			if (RpsControl.error)
				throw new RpsException("Failed to open repository")
			GetControlRecord()
		endmethod

		;;Open a specified repository
		private method OpenRps, void
			required in MainFile, String
			required in TextFile, String
			endparams
		proc
			dd_init(RpsControl,MainFile,TextFile,p_MainFile,p_TextFile)
			if (RpsControl.error)
				throw new RpsException("Failed to open repository")
			GetControlRecord()
		endmethod

		;;Get the control record from the currently open repository
		private method GetControlRecord, void
		proc
			dd_control(RpsControl,DDC_INFO,p_c_info)
			if (RpsControl.error)
				throw new RpsException("Failed to get repository control record")
		endmethod

		;;Close the current repository
		private method CloseRps, void
		proc
			if ((RpsControl.mchn_r)&&(%chopen(RpsControl.mchn_r))
				& &&(RpsControl.tchn_r)&&(%chopen(RpsControl.tchn_r)))
			begin
				try
					dd_exit(RpsControl)
				catch (ex)
					nop
				endtry
			end
			init RpsControl
			init p_InstanceData
		endmethod

		.endregion
		
		.region "Public methods"

		;;Check the repository is open. Other classes can use this method to
		;;open the Repository if it is not already open.  This would be the
		;;case if an instance of the Repository class had not been created.
		;;For example, a programmer might want to use an instance of a
		;;RpsStructure class without having to instantiate the Repository class.
		public static method CheckIsOpen, void
			endparams
		proc
			if ((RpsControl.mchn_r)&&(%chopen(RpsControl.mchn_r))
				& &&(RpsControl.tchn_r)&&(%chopen(RpsControl.tchn_r)))
				mreturn
			dd_init(RpsControl)
			if (RpsControl.error)
				throw new RpsException("Failed to open repository")
		endmethod

		;;Close the current repository and open the default one
		public method Open, void
			endparams
		proc
			CloseRps()
			OpenRps()
		endmethod

		;;Close the current repository and open a specified one
		public method Open, void
			required in MainFile, String
			required in TextFile, String
			endparams
		proc
			CloseRps()
			OpenRps(MainFile,TextFile)
		endmethod

		;;Retrieve a structure by name
		public method GetStructure, @RpsStructure
			required in StructureName, String
			endparams
		proc
			mreturn new RpsStructure(StructureName)
		endmethod
		
		;;Retrieve a file by name
		public method GetFile, @RpsFile
			required in FileName, String
			endparams
		proc
			mreturn new RpsFile(FileName)
		endmethod
		
		;;Retrieve a template by name
		public method GetTemplate, @RpsTemplate
			required in TemplateName, String
			endparams
		proc
			mreturn new RpsTemplate(TemplateName)
		endmethod
		
		;Retrieve a global or predefined format by name
		public method GetFormat, @RpsFormat
			required in FormatName, String
			endparams
		proc
			mreturn new RpsFormat(FormatName)
		endmethod
		
		.endregion

		.region "Public properties"

		;;Repository main file spec
		public property MainFile, String
			method get
			proc
				mreturn %atrim(p_MainFile)
			endmethod
		endproperty

		;;Repository text file spec
		public property TextFile, String
			method get
			proc
				mreturn %atrim(p_TextFile)
			endmethod
		endproperty

		;;Last modification date and time
		public property LastModified, DateTime
			method get
			proc
				mreturn RpsUtils.DateFromTimeStamp(p_c_info.ci_tstamp)
			endmethod
		endproperty

		;;Last structure addition/deletion date and time
		public property LastStructureAddDelete, DateTime
			method get
			proc
				mreturn RpsUtils.DateFromTimeStamp(p_c_info.ci_str_tstamp)
			endmethod
		endproperty

		;;Repository version
		public property Version, String
			method get
			proc
				mreturn %atrim(p_c_info.ci_ver)
			endmethod
		endproperty

		;;Structures collection
		public property Structures, @RpsStructureCollection
			method get
			proc
				if (p_Structures==^null)
					p_Structures = new RpsStructureCollection(RpsLoadMode.Load)
				mreturn p_Structures
			endmethod
		endproperty

		;;Files collection
		public property Files, @RpsFileCollection
			method get
			proc
				if (p_Files==^null)
					p_Files = new RpsFileCollection(RpsLoadMode.Load)
				mreturn p_Files
			endmethod
		endproperty

		;;Templates collection
		public property Templates, @RpsTemplateCollection
			method get
			proc
				if (p_Templates==^null)
					p_Templates = new RpsTemplateCollection()
				mreturn p_Templates
			endmethod
		endproperty

		;;Global formats collection
		public property Formats, @RpsFormatCollection
			method get
			proc
				if (p_Formats==^null)
					p_Formats = new RpsFormatCollection(RpsGlobalFormatType.Format)
				mreturn p_Formats
			endmethod
		endproperty

		;;Predefined date formats collection
		public property DateFormats, @RpsFormatCollection
			method get
			proc
				if (p_DateFormats==^null)
					p_DateFormats = new RpsFormatCollection(RpsGlobalFormatType.DateFormat)
				mreturn p_DateFormats
			endmethod
		endproperty

		;;Predefined time formats collection
		public property TimeFormats, @RpsFormatCollection
			method get
			proc
				if (p_TimeFormats==^null)
					p_TimeFormats = new RpsFormatCollection(RpsGlobalFormatType.TimeFormat)
				mreturn p_TimeFormats
			endmethod
		endproperty

		.endregion

	endclass

endnamespace

