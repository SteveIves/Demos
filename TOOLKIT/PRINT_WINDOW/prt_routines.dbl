;;
;;Routines to print fields/windows and data to the Windows print API
;;
;;	prt_init		Sets it all up, and should be called first
;;	prt_start		Should be called first, to establich a report handle.
;;	prt_choice		Sets up how the user wishes to print - fax/email/print
;;	prt_string 		Positions text within a page
;;	prt_hline		Draw a horizontal line
;;	prt_vline		Draw a vertical line
;;	prt_newpage		Ends the current page and starts a new page.
;;	prt_finish		Ends the printing session, and print and/or preview it.
;;
;;
;;-------------------------------------------------------------------------------
;;
;;
function prt_start, ^val, reentrant, stack

	.include "prt_control.def"	;;Print control data
	a_orientation		,n		;;0=any,1=portrait, 2=landscape
	a_noprtsel			,n		;;Don't allow printer selection
	a_prtname			,a		;;Printer name (default if not passed!)
	a_filename			,a		;;Filename
	endparams

	.include "DBLDIR:winprint.def"

	record
		status			,i4		;;Return status
		specHandle		,i4
		psize			,i4
		char_space		,i4		;;pixels between character
		idf_userdata	,i4
		ps				,i4
	endrecord

proc

	clear status, ^i(prt_control_i), prt_control_a

	ps = %mem_proc(DM_ALLOC,^size(print_specs))
	
	status = %wpr_info(prt_handle,DWP_GETPRINTER)

	if (status)
   	begin
		status = %wpr_getdevice(prt_handle,DWP_SPECS,^m(print_specs,ps))

   		if (!^passed(a_noprtsel))
		begin
			if (!%wpr_info(prt_handle,DWP_PRINTDLG))
   			begin
   				status = %wpr_info(prt_handle,DWP_DELPRINTER)
				clear prt_handle
				freturn 0
   			end
		end

		using a_orientation select
		(1),
			status = %wpr_setdevice(prt_handle,DWP_ORIENTATION,DWPO_PORTRAIT)
		(2),
			status = %wpr_setdevice(prt_handle,DWP_ORIENTATION,DWPO_LANDSCAPE)
		endusing

		if ((^passed(a_filename)).and.(a_filename)) then
			print_file_name = a_filename
		else
            xcall temp_file_name(print_file_name, 'wmf')

		;;Create metafile
		xcall wpr_print(prt_handle,DWP_BEGINJOB, print_file_name)
   		xcall wpr_print(prt_handle,DWP_BEGINPAGE)				

		clear mm_ratio

		status = %mm_to_pixels(10, mm_ratio, prt_handle)

		prt_penhdl = %wpr_info(prt_handle, DWP_GETPEN)

		prt_fontHdl = %mem_proc(DM_ALLOC+DM_STATIC, ^size(font_specs))

	end

	freturn status

endfunction

;;-------------------------------------------------------------------------------
;;
;;
function prt_string, ^val, stack

	.include "prt_control.def"
	a_col	            ,n		;;column position in chars
	a_row   	        ,n      ;;row postion in chars
	a_text      		,a      ;;text string to output
	a_in_mm				,n		;;details passed in mm
	endparams

	.include "DBLDIR:winprint.def"

	static record
		store_font_info	,a^size(font_specs)
	endrecord

	record
		result			,i4
		pix_x			,i4
		pix_y			,i4
		len				,i4
	endrecord

proc

    ^m(font_specs.facename, prt_fontHdl) = ptxt_font
	^m(font_specs.pointsize, prt_fontHdl) = ptxt_pitch

	;;Font weight (DWPFW_DONTCARE,
	;; DWPFW_THIN, DWPFW_EXTRALIGHT,
	;; DWPFW_LIGHT, DWPFW_NORMAL,
	;; DWPFW_MEDIUM, DWPFW_SEMIBOLD,
	;; DWPFW_BOLD, DWPFW_EXTRABOLD,
	;; DWPFW_HEAVY)
	if (ptxt_bold) then
		^m(font_specs.weight, prt_fontHdl) = DWPFW_BOLD
	else
		^m(font_specs.weight, prt_fontHdl) = DWPFW_DONTCARE
	
	if (ptxt_italic) then
		^m(font_specs.italic, prt_fontHdl) = true
	else
		^m(font_specs.italic, prt_fontHdl) = false

	if (ptxt_underline) then
		^m(font_specs.underline, prt_fontHdl) = true
	else
		^m(font_specs.underline, prt_fontHdl) = false
	
	^m(font_specs.strikeout, prt_fontHdl) = false
	^m(font_specs.fixed, prt_fontHdl) = false

	if (^passed(a_in_mm)) then
	begin
		pix_x = %mm_to_pixels(a_col , mm_ratio)
		pix_y = %mm_to_pixels(a_row , mm_ratio)
	end
	else
	begin
		pix_x = %mm_to_pixels(a_col * D_CHAR_WIDTH, mm_ratio)
		pix_y = %mm_to_pixels(a_row * D_LINE_HEIGHT, mm_ratio)
	end

	len = %mm_to_pixels(^size(a_text) * D_CHAR_WIDTH, mm_ratio)

	if (store_font_info.ne.^m(font_specs, prt_fontHdl))
	begin
		;;need to appy the font stuff
		result = %wpr_setdevice(prt_handle, DWP_FONT, ^m(font_specs, prt_fontHdl))
		store_font_info = ^m(font_specs, prt_fontHdl)
	end

    ;;do we need to change the justification...

	using (ptxt_justify) select
	(0,1), ;;Left
		nop
	(2),   ;;Right
		pix_x = pix_x + len - %wpr_info(prt_handle, DWP_TEXTWIDTH, a_text)
	(3),   ;;Center
		pix_x = pix_x + len - (%wpr_info(prt_handle, DWP_TEXTWIDTH, a_text) / 2)
	endusing
	
	result = %wpr_print(prt_handle, DWP_WRITEOUT, pix_x, pix_y, %atrim(a_text))

	clear text_details

    freturn result

endfunction

;;-------------------------------------------------------------------------------
;;
;;
function prt_img, ^val, stack

	.include "prt_control.def"
	a_image			,a
	a_row			,n
	a_col			,n
	a_width			,n
	a_height		,n
	endparams

	.include "DBLDIR:winprint.def"

	stack record
		start_x		,i4
		start_y		,i4
		img_height	,i4
		img_width	,i4
		result		,i4
	endrecord

proc

	start_y = %mm_to_pixels((a_row*D_LINE_HEIGHT),mm_ratio)
	start_x = %mm_to_pixels(a_col*D_CHAR_WIDTH,mm_ratio)
	img_height = %mm_to_pixels((a_height * D_LINE_HEIGHT) ,mm_ratio)
	img_width = %mm_to_pixels((a_width * D_CHAR_WIDTH),mm_ratio)
	
	result = %wpr_print(prt_handle,DWP_BITMAP,a_image,start_x,start_y,img_width,img_height,1)

	freturn true

endfunction

;;-------------------------------------------------------------------------------
;;
;;
function prt_imgmm, ^val, stack
	
	.include "prt_control.def"
	a_image			,a
	a_ypos_mm		,n
	a_xpos_mm		,n
	a_heightmm		,n
	a_widthmm		,n
	endparams

	.include "DBLDIR:winprint.def"

	stack record
		start_x		,i4
		start_y		,i4
		img_height	,i4
		img_width	,i4
		result		,i4
	endrecord

proc

	start_y = %mm_to_pixels(a_ypos_mm ,mm_ratio)
	start_x = %mm_to_pixels(a_xpos_mm, mm_ratio)
	img_height = %mm_to_pixels(a_heightmm ,mm_ratio)
	img_width = %mm_to_pixels(a_widthmm,mm_ratio)

	result = %wpr_print(prt_handle,DWP_BITMAP,a_image,start_x,start_y,img_width,img_height,1)
	
	freturn true

endfunction

;;-------------------------------------------------------------------------------
;;
;;
function prt_hline, ^val, stack

	.include "prt_control.def"
	a_row			,n		;;which line to print on
	a_startcol		,n		;;starting column
	a_endcol		,n		;;ending column
	endparams

	.include "DBLDIR:winprint.def"

	stack record
		result		,i4
		start_x		,i4
		start_y		,i4
		end_x		,i4
		end_y		,i4
	endrecord

proc

	start_y = %mm_to_pixels((a_row * D_LINE_HEIGHT) + (D_LINE_HEIGHT/2),mm_ratio)
	start_x = %mm_to_pixels((a_startcol * D_CHAR_WIDTH) + (D_CHAR_WIDTH/2), mm_ratio)
	end_y = start_y
	end_x = %mm_to_pixels((a_endcol * D_CHAR_WIDTH) + (D_CHAR_WIDTH/2), mm_ratio)

	result = %wpr_print(prt_handle, DWP_LINE, prt_penhdl, start_x, start_y, end_x, end_y)

	freturn true

endfunction

;;-------------------------------------------------------------------------------
;;
;;
function prt_hlinemm, ^val, stack

	.include "prt_control.def"
	a_start_xpos_mm	,n		;;Starting x position in mm
	a_end_xpos_mm	,n		;;Ending x position in mm
	a_ypos_mm		,n		;;y position in mm to put the line on
	endparams

	.include "DBLDIR:winprint.def"

	stack record
		result		,i4
		start_x		,i4
		start_y		,i4
		end_x		,i4
		end_y		,i4
	endrecord

proc

	start_y = %mm_to_pixels(a_ypos_mm, mm_ratio)
	start_x = %mm_to_pixels(a_start_xpos_mm, mm_ratio)
	end_y = start_y
	end_x = %mm_to_pixels(a_end_xpos_mm, mm_ratio)

	result = %wpr_print(prt_handle,DWP_LINE,prt_penhdl,start_x,start_y,end_x,end_y)

	freturn true

endfunction

;;-------------------------------------------------------------------------------
;;
;;
function prt_vline, ^val, stack

	.include "prt_control.def"
	a_startrow		,n		;;top of line
	a_endrow		,n		;;bottom of line
	a_col			,n		;;column it's in
	endparams

	.include "DBLDIR:winprint.def"

	stack record
		result		,i4
		start_x		,i4
		start_y		,i4
		end_x		,i4
		end_y		,i4
	endrecord

proc

	start_y = %mm_to_pixels((a_startrow * D_LINE_HEIGHT) + (D_LINE_HEIGHT/2),mm_ratio)
	start_x = %mm_to_pixels((a_col * D_CHAR_WIDTH) + (D_CHAR_WIDTH/2), mm_ratio)
	end_y = %mm_to_pixels((a_endrow * D_LINE_HEIGHT) - (D_LINE_HEIGHT/2),mm_ratio)
	end_x = start_x

	result = %wpr_print(prt_handle,DWP_LINE,prt_penhdl,start_x,start_y,end_x,end_y)

	freturn true

endfunction

;;-------------------------------------------------------------------------------
;;
;;
function prt_vlinemm, ^val, stack

	.include "prt_control.def"
	a_xpos_mm		,n		;;start x position in mm of the line
	a_start_ypos_mm	,n		;;start y position in mm of the top of the line
	a_end_ypos_mm	,n		;;end y position in mm of the bottom of the line
	endparams

	.include "DBLDIR:winprint.def"

	stack record
		result		,i4
		start_x		,i4
		start_y		,i4
		end_x		,i4
		end_y		,i4
	endrecord

proc

	start_y = %mm_to_pixels(a_start_ypos_mm, mm_ratio)
	start_x = %mm_to_pixels(a_xpos_mm, mm_ratio)
	end_y = %mm_to_pixels(a_end_ypos_mm, mm_ratio)
	end_x = start_x

	result = %wpr_print(prt_handle,DWP_LINE,prt_penhdl,start_x,start_y,end_x,end_y)

	freturn true

endfunction

;;-------------------------------------------------------------------------------
;;
;;
function prt_box, ^val, stack

	.include "prt_control.def"
	a_startrow		,n		;;row starting pos
	a_startcol		,n		;;col stating pos
	a_depth			,n		;;depth
	a_width			,n		;;width of box
	endparams

	.include "DBLDIR:winprint.def"

	stack record
		result		,i4
		start_x		,i4
		start_y		,i4
		end_x		,i4
		end_y		,i4
	endrecord

proc

	;;Draw top line
	start_y = %mm_to_pixels((a_startrow * D_LINE_HEIGHT) + (D_LINE_HEIGHT/2),mm_ratio)
	start_x = %mm_to_pixels((a_startcol * D_CHAR_WIDTH) + (D_CHAR_WIDTH/2), mm_ratio)
	end_x = %mm_to_pixels(((a_startcol + a_width) * D_CHAR_WIDTH) - (D_CHAR_WIDTH/2), mm_ratio)
	end_y = start_y
	result = %wpr_print(prt_handle, DWP_LINE, prt_penhdl, start_x, start_y, end_x, end_y)

	;;Draw bottom line
	start_y = %mm_to_pixels(((a_startrow+a_depth) * D_LINE_HEIGHT) - (D_LINE_HEIGHT/2),mm_ratio)
	end_y = start_y
	result = %wpr_print(prt_handle, DWP_LINE, prt_penhdl, start_x, start_y, end_x, end_y)

	;;Draw left line
	start_y = %mm_to_pixels((a_startrow * D_LINE_HEIGHT) + (D_LINE_HEIGHT/2),mm_ratio)
	start_x = %mm_to_pixels((a_startcol * D_CHAR_WIDTH) + (D_CHAR_WIDTH/2), mm_ratio)
	end_x = start_x
	end_y = %mm_to_pixels(((a_startrow+a_depth) * D_LINE_HEIGHT) - (D_LINE_HEIGHT/2), mm_ratio)
	result = %wpr_print(prt_handle, DWP_LINE, prt_penhdl, start_x, start_y, end_x, end_y)
	
	;;Draw right line
	start_x = %mm_to_pixels(((a_startcol+a_width) * D_CHAR_WIDTH) - (D_CHAR_WIDTH/2), mm_ratio)
	end_x = start_x
	result = %wpr_print(prt_handle, DWP_LINE, prt_penhdl, start_x, start_y, end_x, end_y)

	freturn true

endfunction

;;-------------------------------------------------------------------------------
;;
;;
function prt_boxmm, ^val, stack

	.include "prt_control.def"
	a_start_xpos_mm	,n		;;starting x position in mm
	a_start_ypos_mm	,n		;;starting y position in mm
	a_end_xpos_mm	,n		;;ending x position in mm
	a_end_ypos_mm	,n		;;ending y position in mm
	endparams

	.include "DBLDIR:winprint.def"

	stack record
		result		,i4
		start_x		,i4
		start_y		,i4
		end_x		,i4
		end_y		,i4
	endrecord

proc

	;;Draw top line
	start_y = %mm_to_pixels(a_start_ypos_mm, mm_ratio)
	start_x = %mm_to_pixels(a_start_xpos_mm, mm_ratio)
	end_x = %mm_to_pixels(a_end_xpos_mm, mm_ratio)
	end_y = start_y
	result = %wpr_print(prt_handle, DWP_LINE, prt_penhdl, start_x, start_y, end_x, end_y)

	;;Draw bottom line
	start_y = %mm_to_pixels(a_end_ypos_mm, mm_ratio)
	end_y = start_y
	result = %wpr_print(prt_handle, DWP_LINE, prt_penhdl, start_x, start_y, end_x, end_y)

	;;Draw left line
	start_y = %mm_to_pixels(a_start_ypos_mm, mm_ratio)
	start_x = %mm_to_pixels(a_start_xpos_mm, mm_ratio)
	end_x = start_x
	end_y = %mm_to_pixels(a_end_ypos_mm, mm_ratio)
	result = %wpr_print(prt_handle, DWP_LINE, prt_penhdl, start_x, start_y, end_x, end_y)

	;;Draw right line
	start_x = %mm_to_pixels(a_end_xpos_mm, mm_ratio)
	end_x = start_x
	result = %wpr_print(prt_handle, DWP_LINE, prt_penhdl, start_x, start_y, end_x, end_y)

	freturn true

endfunction

;;-------------------------------------------------------------------------------
;;
;;
function prt_newpage, ^val, stack
	
	.include "prt_control.def"
	endparams

	.include "DBLDIR:winprint.def"
		
proc

	xcall wpr_print(prt_handle, DWP_ENDPAGE)
	xcall wpr_print(prt_handle, DWP_BEGINPAGE)

	freturn true

endfunction

;;-------------------------------------------------------------------------------
;;
;;
function prt_text, ^VAL, stack
	
	.include "prt_control.def"	;;Contorl data
	a_text          ,a          ;;text string to output
	a_xpos_mm       ,n          ;;column position in mm
	a_ypos_mm       ,n          ;;row postion in mm
	a_font_name		,a			;;name of required font
	a_font_pitch	,n			;;size/pitch of the font
	a_attr			,n			;;attributes
	endparams

	record
		result		,i4
	endrecord

proc

	;;Set the print control block

	set ptxt_bold, ptxt_italic, ptxt_underline = 0
	set ptxt_justify = 1

	if (^passed(a_attr))
	begin
		if (a_attr.band.pd_bold)
			ptxt_bold = 1

		if (a_attr.band.pd_italic)
			ptxt_italic = 1

		if (a_attr.band.pd_underline)
			ptxt_underline = 1

		if (a_attr.band.pd_justify_left)
			ptxt_justify = 1

		if (a_attr.band.pd_justify_center)
			ptxt_justify = 3

		if (a_attr.band.pd_justify_right)
			ptxt_justify = 2
	end

	ptxt_font = a_font_name	
	ptxt_pitch = a_font_pitch
	
	;;Print the text

	result = %prt_string(prt_control, a_xpos_mm, a_ypos_mm, a_text, 1)	

	set ptxt_bold, ptxt_italic, ptxt_underline = 0
	set ptxt_justify = 1

	freturn result

endfunction

;;-------------------------------------------------------------------------------
;;
;;
function prt_finish, ^val, stack
	
	.include "prt_control.def"
	endparams

	.include "DBLDIR:winprint.def"
		
	record
		status			,i4
		keep_file		,i4
		prt_ok			,d1
	endrecord
	
			
	stack record printer_info
		lpp				,i4 ;;Lines per page
		cpl				,i4 ;;Characters per line
		flags			,i4 ;;Miscellaneous flags
		unused			,a20 ;;Reserved space
		printerid		,a80 ;;Printer name and port(s)
		driver			,a32 ;;Printer driver name
	endrecord

proc

	xcall wpr_print(prt_handle, DWP_ENDPAGE)
	xcall wpr_print(prt_handle, DWP_ENDJOB)

	;;Catch all set to did NOT print
	prt_ok = false

	if (prt_nopreview) then
		prt_ok = %wpr_execute(prt_handle, DWP_PRINT, ,1)
	else
	begin
		prt_ok = false
		if (%wpr_execute(prt_handle, DWP_PREVIEW,,
		&	%atrim(prt_title), true) .eq. DWP_PREVIEW_PRINT)
			prt_ok = %wpr_execute(prt_handle, DWP_PRINT, ,1)

	end

	;;Release drawing pen
	if (prt_penhdl)
		xcall wpr_info(prt_handle,DWP_DELPEN, prt_penhdl)
	
	;;Free memory
	if (prt_fonthdl)
		prt_fonthdl = %mem_proc(DM_FREE, prt_fonthdl)

	;;Release the printer
	status = %wpr_info(prt_handle, DWP_DELPRINTER)

	status = 0
	if (prt_ok.eq.false)
		status = 1

	;;Clear down for the next time!
	clear ^i(prt_control_i), prt_control_a

	freturn status

endfunction

;;-------------------------------------------------------------------------------
;;
;;
function prt_cancel, ^val, stack
	
	.include "prt_control.def"	;;Contorl data
	endparams

	.include "DBLDIR:winprint.def"
		
	record
		status			,i4
		keep_file		,i4
		prt_ok			,d1
	endrecord

proc

	;;Terminate the job
	xcall wpr_print(prt_handle, DWP_ENDPAGE)
	xcall wpr_print(prt_handle, DWP_ENDJOB)

	;;Release drawing pen
	if (prt_penhdl)
		xcall wpr_info(prt_handle,DWP_DELPEN, prt_penhdl)
	
	;;Free memory
	if (prt_fonthdl)
		prt_fonthdl = %mem_proc(DM_FREE, prt_fonthdl)

	;;Release the printer
	status = %wpr_info(prt_handle, DWP_DELPRINTER)

	;;Clear down for the next time!
	clear ^i(prt_control_i), prt_control_a

	freturn true

endfunction

;;-------------------------------------------------------------------

function mm_to_pixels, ^val

	a_num_of_mm		,n		;;Millimeters to be converted
	a_ratio			,n		;;(Optional) ratio of mm to pixels
	a_rpthdl		,n		;;current report handle
	endparams

	.include "DBLDIR:winprint.def"

	stack record
		mm_to_pix	,i4		;;Ratio of millimeters to pixels
		mh			,i4		;;Temporary memory handle for print specs
	endrecord

proc

	if (^passed(a_ratio)&&a_ratio) then
		;;Conversion ratio passed in
		mm_to_pix = a_ratio
	else
	begin		
		;;Calculate conversion ratio
		mh = %mem_proc(DM_ALLOC,^size(print_specs))
		xcall wpr_getdevice(a_rpthdl,DWP_SPECS,^m(print_specs,mh))
		mm_to_pix = ^m(print_specs.physicalwidth,mh)/(^m(print_specs.paper_width,mh)/10)
		if ^passed(a_ratio)
			a_ratio = mm_to_pix
		mh = %mem_proc(DM_FREE,mh)
	end

	freturn (a_num_of_mm * mm_to_pix)

endfunction

