;*******************************************************************************
;
; Title:        GetProductGroups.dbl
;
; Type:         Method
;
; Description:  Returns a collection of all product groups
;
; Author:       Steve Ives, Synergex Professional Services Group
;
; Copyright:    ©Synergex International Inc.  All rights reserved.
;
; WARNING:      If you were given this code by a Synergex employee then you may
;               use and modify it freely within your own applications. However,
;               you may not under any circumstances distribute this code, or
;               any modified version of this code, to any third party without
;               first obtaining written permission to do so from Synergex.
;               In using this code you accept that it is provided as is, and
;               without support or warranty.  Neither Synergex or the author
;               accept any responsibility for any losses or damages of any
;               nature which may arise from the use of this code.  This header
;               information must remain unaltered in the code at all times.
;               Possession of this code, or any modified version of this code,
;               indicates your acceptance of these terms.
;
; $Revision: $
;
; $Date: $
;
;*******************************************************************************
;
subroutine GetProductGroups

    required out groups, int		;Returned collection
    endparams

    .include "INC:remote.def"
    .include "INC:io.def"

    .include "product_group" repository, structure="strProductGroup"

    stack record ivars
        allocated       ,int        ;Number of rows allocated
        used            ,int        ;Number of rows used
    endrecord

proc

    init ivars

    if (%io(IO_FIRST,idf_group,0,)==IO_OK)
    begin

        repeat
        begin

            if (used==allocated)
                groups = %mem_proc(DM_RESIZ+DM_BLANK,^size(strProductGroup)*(allocated+=10),groups)

            if (%io(IO_READS,idf_group,,^m(strProductGroup[used+=1],groups))!=IO_OK)
            begin
                used-=1
                exitloop
            end

        end

        groups = %mem_proc(DM_RESIZ,^size(strProductGroup)*used,groups)

    end

    xreturn

endsubroutine

