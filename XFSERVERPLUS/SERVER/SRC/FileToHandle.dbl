;*******************************************************************************
;
; Title:        FileToHandle.dbl
;
; Type:         Function
;
; Description:  Load the binary data of a local file into a memory handle
;
; Author:       Steve Ives, Synergex Professional Services Group
;
; Copyright:    ©Synergex International Inc.  All rights reserved.
;
; WARNING:      If you were given this code by a Synergex employee then you may
;               use and modify it freely within your own applications. However,
;               you may not under any circumstances distribute this code, or
;               any modified version of this code, to any third party without
;               first obtaining written permission to do so from Synergex.
;               In using this code you accept that it is provided as is, and
;               without support or warranty.  Neither Synergex or the author
;               accept any responsibility for any losses or damages of any
;               nature which may arise from the use of this code.  This header
;               information must remain unaltered in the code at all times.
;               Possession of this code, or any modified version of this code,
;               indicates your acceptance of these terms.
;
; $Revision: $
;
; $Date: $
;
;*******************************************************************************
.ifndef OS_VMS ;Windows and UNIX code
;*******************************************************************************
;
function FileToHandle ,^VAL

    required in a_file      ,a      ;File name to load
    required out a_mh       ,int    ;Memory handle
    endparams

    stack record ivars
        retval      ,int             ;Routine return value
        ch          ,int             ;Input file channel
        blocks      ,int             ;Block counter
        chars       ,int             ;Size of last block (bytes)
    endrecord

    .define D_BUFSZ 32768

    structure block
                ,a D_BUFSZ      ;Block size - how many bytes to read at once.
                                ;Must be less than 64K
    endstructure

    stack record avars
        buf         ,a D_BUFSZ      ;IO Buffer
    endrecord

proc

    init ivars, avars

    ;Open input file
    open(ch=%syn_freechn,u,a_file) [$ERR_FNF=nf,$ERR_PROTEC=pf,ERR=err]

    ;Error checking for file open
    if (0)
    begin
nf,     retval=1    ;File not found
        exit
pf,     retval=2    ;Protection violation
        exit
err,    retval=3    ;Other error
    end

    if (!retval)
    begin
        clear ^i(^m(a_mh))

        ;Read data from file in "block size" chunks
        repeat
        begin
            clear buf
            gets(ch,buf,ef)
            blocks+=1
            a_mh = %mem_proc(DM_RESIZ,^size(block)*blocks,a_mh)
            ^m(block[blocks],a_mh)=buf
        end

        ;We hit EOF, save away the final buffer of data
ef,     chars=%rsize
        if (chars)
        begin
            blocks+=1
            a_mh = %mem_proc(DM_RESIZ,^size(block)*blocks,a_mh)
            ^m(block[blocks],a_mh)=buf

            ;Resize handle to exact size of file.
            a_mh = %mem_proc(DM_RESIZ,((^size(block)*(blocks-1))+(chars)),a_mh)
        end

    end

    if retval!=1
        close ch

    freturn retval

endfunction
;
;*******************************************************************************
.else ;VMS CODE
;*******************************************************************************
;
;VMS CODE - SEEMS TO WORK FOR BINARY FILES, BUT NOT FOR TEXT FILES???????
;
function file_to_handle ,^VAL

    required in a_file      ,a              ;File name to load
    required out a_mh        ,n              ;Memory handle
    endparams

    stack record ivars
        retval      ,int             ;Routine return value
        ch          ,int             ;Input file channel
        mc          ,int             ;Characters read
        ms          ,int             ;Size of memory array
        blocks      ,int             ;Number of blocks read
        len         ,int             ;Length of a string
    endrecord

    .define D_BUFSZ 512

    structure chunk
                    ,a D_BUFSZ
    endstructure

    stack record avars
        buf         ,a D_BUFSZ      ;IO Buffer
    endrecord

.proc

    init ivars, avars

    ;Open input file
    begin
        open(ch=%syn_freechn,i:b,a_file) [$ERR_FNF=nf,$ERR_PROTEC=pf,ERR=err]
        exit
nf,     retval=1    ;File not found
        exit
pf,     retval=2    ;Protection violation
        exit
err,    retval=3    ;Other error
    end

    if (!retval)
    begin
        ;Read data from file one chunk at a time!
        repeat
        begin
            reads(ch,buf,ef)
            a_mh = %mem_proc(DM_RESIZ,D_BUFSZ*(blocks+=1),a_mh)
            ^m(chunk[blocks],a_mh) = buf
        end
ef,
        if (len=%rdlen)
        begin
            a_mh = %mem_proc(DM_RESIZ,D_BUFSZ*blocks+len,a_mh)
            ^m(chunk[blocks+1](1:len),a_mh) = buf(1:len)
        end

    end

    if (!retval)
        close ch

    freturn retval

endfunction

;*******************************************************************************
.endc ;END OF VMS CODE
;*******************************************************************************

