
import System
import System.Collections.Generic
import System.ComponentModel
import System.Diagnostics
import System.ServiceModel
import System.ServiceModel.Description
import System.ServiceModel.Web
import System.ServiceProcess

namespace MyServiceHostNS

	public partial class MyServiceHost extends ServiceBase

		private host		,@ServiceHost
		
		public method MyServiceHost
			endparams
		proc
			InitializeComponent()
		endmethod

		private method InitializeComponent, void
			endparams
		proc
			this.ServiceName = "MyServiceHost"
			this.AutoLog = true					;Write service status messages to the event log
			this.CanPauseAndContinue = false	;Is this service able to pause and continue
			this.CanHandlePowerEvent = false	;Do we want to receive messages when the power status changes
			this.CanShutdown = false			;Do we want to receive messages when the system is being shutdown
			this.CanStop = true					;Can this service be stopped
		endmethod
		
		protected override method OnStart, void
			byval args, [#]String
			endparams
			record
				baseAddress	,String
				smb			,@ServiceMetadataBehavior
			endrecord
		proc
			
			baseAddress = "http://" + Environment.MachineName + ":8080"
			
			host = new ServiceHost(^typeof(WcfServiceLibrary.MyService), new Uri(baseAddress))
			host.AddServiceEndpoint(^typeof(WcfServiceLibrary.IMyService), new BasicHttpBinding(), "MyService.svc")
			host.AddServiceEndpoint(^typeof(WcfServiceLibrary.IPolicyRetriever), new WebHttpBinding(), "").Behaviors.Add(new WebHttpBehavior())
			
			smb = new ServiceMetadataBehavior()
			smb.HttpGetEnabled = true
			smb.MetadataExporter.PolicyVersion = PolicyVersion.Policy15
			host.Description.Behaviors.Add(smb)
			
			host.Open()
			
		endmethod
		
		protected override method OnStop, void
			endparams
		proc
			host.Close()
			host.Finalize()
		endmethod

		protected override method OnPause, void
			endparams
		proc
			;;TODO: Add code to execute when the service is instructed to pause (from a stated state)
			;;Note that this method is only called if the CanPauseAndContinue property is set to true
			
		endmethod

		protected override method OnContinue, void
			endparams
		proc
			;;TODO: Add code to execute when the service is told to continue (from a paused state)
			;;Note that this method is only called if the CanPauseAndContinue property is set to true
			
		endmethod
		
		protected override method OnPowerEvent, Boolean
			byval powerStatus, PowerBroadcastStatus
			endparams
			record
				retval, Boolean
			endrecord
		proc
			;TODO: Add code to execute when the service receives a power event message
			;;Note that this method is only called if the CanHandlePowerEvent property is set to true

			retval = true
			
			using powerStatus select
			(PowerBroadcastStatus.BatteryLow),
			begin
				;;Battery power is low
				nop
			end
			(PowerBroadcastStatus.OemEvent),
			begin
				;;An Advanced Power Management (APM) BIOS signaled an APM OEM event
				nop
			end
			(PowerBroadcastStatus.PowerStatusChange),
			begin
				;;A change in the power status of the computer is detected, such as a
				;;switch from battery power to A/C. The system also broadcasts this event
				;;when remaining battery power slips below the threshold specified by the
				;;user or if the battery power changes by a specified percentage.
				nop
			end
			(PowerBroadcastStatus.QuerySuspend),
			begin
				;;The system has requested permission to suspend the computer. An
				;;application that grants permission should carry out preparations
				;;for the suspension before returning.
				nop
			end
			(PowerBroadcastStatus.QuerySuspendFailed),
			begin
				;;The system was denied permission to suspend the computer. This status
				;;is broadcast if any application or driver denied a previous QuerySuspend status.
				nop
			end
			(PowerBroadcastStatus.ResumeAutomatic),
			begin
				;;The computer has woken up automatically to handle an event.
				;;Note that if the system detects any user activity after broadcasting
				;;ResumeAutomatic, it will broadcast a ResumeSuspend event to let
				;;applications know they can resume full interaction with the user.
				nop
			end
			(PowerBroadcastStatus.ResumeCritical),
			begin
				;;The system has resumed operation after a critical suspension caused by a
				;;failing battery. Note that because a critical suspension occurs without
				;;prior notification, resources and data previously available may not be
				;;present when the application receives this event. The application should
				;;attempt to restore its state to the best of its ability.
				nop
			end
			(PowerBroadcastStatus.ResumeSuspend),
			begin
				;;The system has resumed operation after being suspended.
				nop
			end
			(PowerBroadcastStatus.Suspend),
			begin
				;;The computer is about to enter a suspended state. This event is typically
				;;broadcast when all applications and installable drivers have returned
				;;true to a previous QuerySuspend state.
				nop
			end
			endusing

			mreturn retval

		endmethod

		protected override method OnShutdown, void
			endparams
		proc
			host.Close()
			host.Finalize()
		endmethod

	endclass

endnamespace


