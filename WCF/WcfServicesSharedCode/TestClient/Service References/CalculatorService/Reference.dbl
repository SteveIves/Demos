namespace TestClient.CalculatorService

	{System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")}
	{System.ServiceModel.ServiceContractAttribute(Namespace = "http://Synergex.PSG.Examples", ConfigurationName = "CalculatorService.ISimpleCalculator")}
	public interface ISimpleCalculator

		{System.ServiceModel.OperationContractAttribute(Action = "http://Synergex.PSG.Examples/ISimpleCalculator/Add", ReplyAction = "http://Synergex.PSG.Examples/ISimpleCalculator/AddResponse")}
		method Add, double
			val1, double 
			val2, double 
			endparams
		endmethod

		{System.ServiceModel.OperationContractAttribute(Action = "http://Synergex.PSG.Examples/ISimpleCalculator/Subtract", ReplyAction = "http://Synergex.PSG.Examples/ISimpleCalculator/SubtractResponse")}
		method Subtract, double
			val1, double 
			val2, double 
			endparams
		endmethod
	endinterface

	{System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")}
	public interface ISimpleCalculatorChannel extends TestClient.CalculatorService.ISimpleCalculator, System.ServiceModel.IClientChannel
	endinterface

	{System.Diagnostics.DebuggerStepThroughAttribute()}
	{System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")}
	public partial class SimpleCalculatorClient extends System.ServiceModel.ClientBase<TestClient.CalculatorService.ISimpleCalculator> implements TestClient.CalculatorService.ISimpleCalculator

		public method SimpleCalculatorClient
			endparams
		proc

		endmethod

		public method SimpleCalculatorClient
			endpointConfigurationName, string 
			endparams
			parent(endpointConfigurationName)
		proc

		endmethod

		public method SimpleCalculatorClient
			endpointConfigurationName, string 
			remoteAddress, string 
			endparams
			parent(endpointConfigurationName, remoteAddress)
		proc

		endmethod

		public method SimpleCalculatorClient
			endpointConfigurationName, string 
			remoteAddress, @System.ServiceModel.EndpointAddress 
			endparams
			parent(endpointConfigurationName, remoteAddress)
		proc

		endmethod

		public method SimpleCalculatorClient
			binding, @System.ServiceModel.Channels.Binding 
			remoteAddress, @System.ServiceModel.EndpointAddress 
			endparams
			parent(binding, remoteAddress)
		proc

		endmethod

		public method Add, double
			val1, double 
			val2, double 
			endparams
		proc
			mreturn parent.Channel.Add(val1, val2)
		endmethod

		public method Subtract, double
			val1, double 
			val2, double 
			endparams
		proc
			mreturn parent.Channel.Subtract(val1, val2)
		endmethod
	endclass

	{System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")}
	{System.ServiceModel.ServiceContractAttribute(Namespace = "http://Synergex.PSG.Examples", ConfigurationName = "CalculatorService.IComplexCalculator")}
	public interface IComplexCalculator

		{System.ServiceModel.OperationContractAttribute(Action = "http://Synergex.PSG.Examples/IComplexCalculator/ComplexAdd", ReplyAction = "http://Synergex.PSG.Examples/IComplexCalculator/ComplexAddResponse")}
		method ComplexAdd, double
			val1, double 
			val2, double 
			endparams
		endmethod

		{System.ServiceModel.OperationContractAttribute(Action = "http://Synergex.PSG.Examples/IComplexCalculator/ComplexSubtract", ReplyAction = "http://Synergex.PSG.Examples/IComplexCalculator/ComplexSubtractResponse")}
		method ComplexSubtract, double
			val1, double 
			val2, double 
			endparams
		endmethod

		{System.ServiceModel.OperationContractAttribute(Action = "http://Synergex.PSG.Examples/IComplexCalculator/ComplexMultiply", ReplyAction = "http://Synergex.PSG.Examples/IComplexCalculator/ComplexMultiplyResponse")}
		method ComplexMultiply, double
			val1, double 
			val2, double 
			endparams
		endmethod

		{System.ServiceModel.OperationContractAttribute(Action = "http://Synergex.PSG.Examples/IComplexCalculator/ComplexDivide", ReplyAction = "http://Synergex.PSG.Examples/IComplexCalculator/ComplexDivideResponse")}
		method ComplexDivide, double
			val1, double 
			val2, double 
			endparams
		endmethod
	endinterface

	{System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")}
	public interface IComplexCalculatorChannel extends TestClient.CalculatorService.IComplexCalculator, System.ServiceModel.IClientChannel
	endinterface

	{System.Diagnostics.DebuggerStepThroughAttribute()}
	{System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")}
	public partial class ComplexCalculatorClient extends System.ServiceModel.ClientBase<TestClient.CalculatorService.IComplexCalculator> implements TestClient.CalculatorService.IComplexCalculator

		public method ComplexCalculatorClient
			endparams
		proc

		endmethod

		public method ComplexCalculatorClient
			endpointConfigurationName, string 
			endparams
			parent(endpointConfigurationName)
		proc

		endmethod

		public method ComplexCalculatorClient
			endpointConfigurationName, string 
			remoteAddress, string 
			endparams
			parent(endpointConfigurationName, remoteAddress)
		proc

		endmethod

		public method ComplexCalculatorClient
			endpointConfigurationName, string 
			remoteAddress, @System.ServiceModel.EndpointAddress 
			endparams
			parent(endpointConfigurationName, remoteAddress)
		proc

		endmethod

		public method ComplexCalculatorClient
			binding, @System.ServiceModel.Channels.Binding 
			remoteAddress, @System.ServiceModel.EndpointAddress 
			endparams
			parent(binding, remoteAddress)
		proc

		endmethod

		public method ComplexAdd, double
			val1, double 
			val2, double 
			endparams
		proc
			mreturn parent.Channel.ComplexAdd(val1, val2)
		endmethod

		public method ComplexSubtract, double
			val1, double 
			val2, double 
			endparams
		proc
			mreturn parent.Channel.ComplexSubtract(val1, val2)
		endmethod

		public method ComplexMultiply, double
			val1, double 
			val2, double 
			endparams
		proc
			mreturn parent.Channel.ComplexMultiply(val1, val2)
		endmethod

		public method ComplexDivide, double
			val1, double 
			val2, double 
			endparams
		proc
			mreturn parent.Channel.ComplexDivide(val1, val2)
		endmethod
	endclass
endnamespace

