
import System
import System.Collections.Generic
import System.Diagnostics
import System.Drawing
import System.IO
import System.Windows.Forms
import TrayListenerApp.Forms
import TrayListenerApp.WcfService

.array 0

namespace TrayListenerApp
	
	public partial class Form1 extends Form
		
		private trayIcon, @NotifyIcon
		private trayMenu, @ContextMenu
		svchost, @LocalServicesHost
		
		public method Form1
		proc
			InitializeComponent()

			;;  Create a tray icon.
			trayIcon = new NotifyIcon() {Icon = Properties.Resources.iconMain }

			;;  Create a context menu
			trayMenu = new ContextMenu()

			lambda doShowServiceHelp(sender, ea)
			begin
				Process.Start(String.Format("{0}help", svchost.LocalServicesUrl))
			end
			trayMenu.MenuItems.Add("View Service Help Page", doShowServiceHelp)

			lambda doShowMessageLog(sender, ea)
			begin
				data dlg, @MessageLog, new MessageLog(messages)
				dlg.ShowDialog(this)
			end
			trayMenu.MenuItems.Add("View Message Log", doShowMessageLog)

			lambda doClearMessageLog(sender, ea)
			begin
				messages.Clear()
			end
			trayMenu.MenuItems.Add("Clear Message Log", doClearMessageLog)

			lambda doExit(sender, ea)
			begin
				this.Close()
			end
			trayMenu.MenuItems.Add("Exit", doExit)

			;;  Add the context menu to the tray icon
			trayIcon.ContextMenu = trayMenu
			trayIcon.Visible = true

			lambda doStopServices(sender, ea)
			begin
				try
				begin
					svchost.StopServices()
				end
				catch (syn_exception)
				begin
					
				end
				endtry
			end
			this.FormClosed += doStopServices

			startLocalServices()

			trayIcon.Text = String.Format("Service address: {0}", svchost.LocalServicesUrl)

		endmethod
		
		protected override method OnLoad, void
			e, @EventArgs 
		proc
			parent.OnLoad(e)
			;;  Hide the main window and make sure it doesn't show up in the taskbar
			Visible = false
			ShowInTaskbar = false
		endmethod
		
		private method startLocalServices, void
		proc
			try
			begin
				svchost = new LocalServicesHost()
				svchost.StartServices()
				addhandler(svchost.MessageReceived,svchost_MessageReceived)
				addhandler(svchost.LogMessage,svchost_LogMessage)
			end
			catch (ex, @Exception)
			begin
				;; WCF services failed to start
				svchost = ^null
				MessageBox.Show(ex.Message)
				this.Close()
			end
			endtry
		endmethod
		
		private messages, @List<Tuple<DateTime, String, String>>, new List<Tuple<DateTime, String, String>>()
		
		method svchost_MessageReceived, void
			required in messageId, String 
			required in messageData, String 
		proc

			;;Here we only deal with messages that require UI. Other messages
			;;like PING will already have been dealt with 

			messages.Add(Tuple.Create(DateTime.Now, messageId, messageData))

			using messageId select
			("BROWSER"),
			begin
				begin
					try
					begin
						System.Diagnostics.Process.Start(messageData)
					end
					catch (syn_exception)
					begin
						MessageBox.Show("Failed to launch web browser for URL " + messageData.Trim())
					end
					endtry
				end
				exit
			end
			(),
			begin
				exit
			end
			endusing

		endmethod

		method svchost_LogMessage, void
			required in messageId, String 
			required in messageData, String 
		proc
			;;All we have to do is log the message
			messages.Add(Tuple.Create(DateTime.Now, messageId, messageData))
		endmethod

	endclass

endnamespace

