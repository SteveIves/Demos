import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.ServiceModel.Channels
import System.ServiceModel
import System.Net
import System.ServiceModel.Dispatcher
import System.ServiceModel.Web

.array 0

namespace WcfRestDynamicResponse
	
	class DynamicFormatter implements IDispatchMessageFormatter
		
		private m_jsonDispatchMessageFormatter, @IDispatchMessageFormatter
		private m_xmlDispatchMessageFormatter, @IDispatchMessageFormatter
		
		public property jsonDispatchMessageFormatter, @IDispatchMessageFormatter
			method get
			proc
				mreturn m_jsonDispatchMessageFormatter
			endmethod
			method set
			proc
				m_jsonDispatchMessageFormatter = value
			endmethod
		endproperty
		
		public property xmlDispatchMessageFormatter, @IDispatchMessageFormatter
			method get
			proc
				mreturn m_xmlDispatchMessageFormatter
			endmethod
			method set
			proc
				m_xmlDispatchMessageFormatter = value
			endmethod
		endproperty
		
		public method DeserializeRequest, void
			message		,@System.ServiceModel.Channels.Message 
			parameters	,[#]@object 
			endparams
		proc
			throw new NotImplementedException()
		endmethod
		
		public method SerializeReply, @System.ServiceModel.Channels.Message
			messageVersion	,@MessageVersion 
			parameters		,[#]@object 
			result			,@object 
			endparams
		proc
			data request, @Message, OperationContext.Current.RequestContext.RequestMessage
			data prop, @HttpRequestMessageProperty, (@HttpRequestMessageProperty)request.Properties[HttpRequestMessageProperty.Name]
			data accepts, string, prop.Headers[HttpRequestHeader.Accept]

			if (accepts != ^null) then
			begin
				if (accepts.Contains("text/xml")) then
				begin
					WebOperationContext.Current.OutgoingResponse.ContentType = "text/xml"
					mreturn xmlDispatchMessageFormatter.SerializeReply(messageVersion, parameters, result)
				end
				else if (accepts.Contains("application/xml")) then
				begin
					WebOperationContext.Current.OutgoingResponse.ContentType = "application/xml"
					mreturn xmlDispatchMessageFormatter.SerializeReply(messageVersion, parameters, result)
				end
				else if (accepts.Contains("application/json"))
				begin
					WebOperationContext.Current.OutgoingResponse.ContentType = "application/json"
					mreturn jsonDispatchMessageFormatter.SerializeReply(messageVersion, parameters, result)
				end
			end
			else
			begin
				data contentType, string, prop.Headers[HttpRequestHeader.ContentType]
				if (contentType != ^null)
				begin
					if (contentType.Contains("text/xml")) then
					begin
						WebOperationContext.Current.OutgoingResponse.ContentType = "text/xml"
						mreturn xmlDispatchMessageFormatter.SerializeReply(messageVersion, parameters, result)
					end
					else if (contentType.Contains("application/xml")) then
					begin
						WebOperationContext.Current.OutgoingResponse.ContentType = "application/xml"
						mreturn xmlDispatchMessageFormatter.SerializeReply(messageVersion, parameters, result)
					end
					else if (contentType.Contains("application/json"))
					begin
						WebOperationContext.Current.OutgoingResponse.ContentType = "application/json"
						mreturn jsonDispatchMessageFormatter.SerializeReply(messageVersion, parameters, result)
					end
				end
			end
			WebOperationContext.Current.OutgoingResponse.ContentType = "text/xml"
			mreturn xmlDispatchMessageFormatter.SerializeReply(messageVersion, parameters, result)
		endmethod

	endclass

endnamespace
