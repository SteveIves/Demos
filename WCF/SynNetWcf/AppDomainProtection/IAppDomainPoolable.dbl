;;*****************************************************************************
;;
;; Title:       IAppDomainPoolable.dbl
;;
;; Type:        Interface
;;
;; Description: Defines an interface to be implemented by classes whose
;;              functionality is to be executed inside an AppDomain
;;              pooling environment such as that provided by AppDomainPoolManager
;;
;; Date:        9th January 2014
;;
;; Authors:     Steve Ives       Synergex Professional Services Group
;;              Jeff Greene      Synergex Development
;;                               http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

namespace AppDomainProtection

	public interface IAppDomainPoolable

		;;; <summary>
		;;; This method will be called once, when a poolable object is first created.
		;;; </summary>
		method Initialize, void
		endmethod

		;;; <summary>
		;;; This method will be called each time a poolable object is allocated for use.
		;;; </summary>
		method Activate, void
		endmethod

		;;; <summary>
		;;; This method will be called each time a poolable object is released from use.
		;;; </summary>
		method Deactivate, void
		endmethod

		;;; <summary>
		;;; This method will be called each time a poolable object is released from use,
		;;; and can be used to determine if the object should be returned to the pool for
		;;; reuse, or discarded.
		;;; </summary>
		;;; <returns>Return true to indicate the object may be reused, or false to discard the object.</returns>
		method CanBeReused, boolean
		endmethod

		;;; <summary>
		;;; This method will be called once, when a poolable object is about to be finally discarded.
		;;; </summary>
		method Cleanup, void
		endmethod

	endinterface

endnamespace
