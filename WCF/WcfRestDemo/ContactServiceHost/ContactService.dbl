import System
import System.Collections.Generic
import System.Linq
import System.Runtime.Serialization
import System.ServiceModel
import System.Text
import System.ServiceModel.Activation

.array 0
namespace ContactServiceHost
	
	{ServiceBehavior(InstanceContextMode = InstanceContextMode.Single)}
	public class ContactService implements IContactService
		
.region "Data Store"
		
		private _contactStore, @List<Contact>
		
		private property ContactStore, @List<Contact>
			method get
			proc
				if (this._contactStore==^null)
					this._contactStore = loadList()
				mreturn this._contactStore
			endmethod
		endproperty
		
		private method loadList, @List<Contact>
			endparams
		proc
			data mylist, @List<Contact>, new List<Contact>()
			mylist.Add(new Contact(1, "Mary", "Jones", "maryj97@aol.com"))
			mylist.Add(new Contact(2, "Andrew", "Smith", "asmith@hotmail.com"))
			mylist.Add(new Contact(3, "Josh", "Adams", "josh.adams@beebo.com"))
			mylist.Add(new Contact(4, "Nicola", "James", "nj57@comcast.net"))
			mylist.Add(new Contact(5, "Alex", "Michaels", "michaelsa@yahoo.com"))
			mreturn mylist
		endmethod
		
.endregion
		
.region "API"
		
		public method GetAllContacts, @List<Contact>
			endparams
		proc
			Console.WriteLine("GetAllContacts() called")
			mreturn this.ContactStore
		endmethod
		
		public method GetContact, @Contact
			required in contactId, string 
			endparams
		proc
			Console.WriteLine(String.Format("GetContact({0}) called", contactId))
			lambda compareId(p) p.ContactId.ToString().Equals(contactId)
			mreturn this.ContactStore.FirstOrDefault(compareId)
		endmethod
		
		public method CreateContact, boolean
			required in contactId, string
			required in newContact, @Contact 
			endparams
		proc
			Console.WriteLine(String.Format("CreateContact({0}) called", contactId))
			newContact.ContactId = integer(contactId)
			lambda compareId(p) p.ContactId == newContact.ContactId
			if (this.ContactStore.Any(compareId)) then
				mreturn false
			else
			begin
				this.ContactStore.Add(newContact)
				mreturn true
			end
		endmethod
		
		public method UpdateContact, boolean
			required in contactId, string
			required in updatedContact, @Contact 
			endparams
		proc
			Console.Write(String.Format("UpdateContact({0}) called", contactId))
			updatedContact.ContactId = integer(contactId)
			lambda compareId(p) p.ContactId == updatedContact.ContactId
			data index, int, ContactStore.FindIndex(compareId)
			if (index >= 0) then
			begin
				ContactStore[index] = updatedContact
				mreturn true
			end
			else
				mreturn false
		endmethod
		
		public method DeleteContact, boolean
			required in contactId, string 
			endparams
		proc
			Console.WriteLine(String.Format("DeleteContact({0}) called", contactId))
			lambda compareId(p) p.ContactId.ToString() == contactId
			data removed, int, ContactStore.RemoveAll(compareId)
			mreturn (removed > 0)
		endmethod
		
.endregion
		
.region "Just for testing"
		
		public method ResetData, void
			endparams
		proc
			Console.WriteLine("ResetData() called")
			_contactStore = loadList()
		endmethod
		
.endregion
		
	endclass
	
endnamespace