
.include "DBLDIR:synxml.def"

.define XML_BOOL_TRUE '<boolean xmlns="http://schemas.microsoft.com/2003/10/Serialization/">true</boolean>'

import System.Collections

namespace DPC2013.Examples

    public enum WebMessageFormat
        Xml
        Json
    endenum

    structure strContact
        ContactId   ,d6
        FirstName   ,a20
        LastName    ,a20
        Email       ,a60
    endstructure

    public class ContactServiceClient

        private errnum              ,int
        private errtxt              ,string
        private readonly host       ,string
        private readonly baseUrl    ,string
        private readonly httpLog    ,string
        private readonly format     ,WebMessageFormat

        ;;; <summary>
        ;;; Constructs and returns a new ContactServiceClient object
        ;;; </summary>
        ;;; <param name="url">Base URL or the REST service</param>
        ;;; <param name="logging">Should HTTP API logging be enabled</param>
        ;;; <returns></returns>
        public method ContactServiceClient
            required in aProtocol   ,string
            required in aHost       ,string
            required in aPort       ,int
            required in aService    ,string
            required in aFormat     ,WebMessageFormat
            required in aLogging    ,boolean
            endparams
        proc
            host = aHost.Trim() + ":" + string(aPort)
            baseUrl = aProtocol + "://" + host + aService
            format = aFormat
            if (alogging)
                httpLog = "http.log"
        endmethod

        ;;; <summary>
        ;;; Exposes the return status (error number) of the last HTTP API call
        ;;; </summary>
        public property LastErrorNumber, int
            method get
            proc
                mreturn errnum
            endmethod
        endproperty

        ;;; <summary>
        ;;; Exposes any error text from the last HTTP API call
        ;;; </summary>
        public property LastErrorText, string
            method get
            proc
                mreturn errtxt
            endmethod
        endproperty

        public method ResetData, boolean
            endparams
            record
                ok      ,boolean                ;;Return status
                url     ,string                 ;;URL for operation
                sr      ,string                 ;;String received
                hs      ,[#]string              ;;Headers sent
                hr      ,[#]string              ;;Headers received
            endrecord
        proc
            ok = true
            url = baseUrl + "/reset"
            hs = getReceiveOnlyHeaders()
            if (errnum=http_get(url,,sr,errtxt="",hs,hr,httpLog,,,,,HTTP_RELURI,"1.1"))
                ok = false
            mreturn ok
        endmethod

        public method GetAllContacts, boolean
            required out contacts, @ArrayList
            endparams
            record
                ok      ,boolean                ;;Return status
                url     ,string                 ;;URL for operation
                sr      ,string                 ;;String received
                hs      ,[#]string              ;;Headers sent
                hr      ,[#]string              ;;Headers received
            endrecord
        proc
            ok = true
            url = baseUrl + "/contacts"
            contacts = new ArrayList()
            hs = getReceiveOnlyHeaders()
            if (errnum=http_get(url,,sr,errtxt="",hs,hr,httpLog,,,,,HTTP_RELURI,"1.1")) then
                ok = false
            else
                contacts = makeContactCollection(sr)
            mreturn ok
        endmethod

        public method GetContact, boolean
            required in contactId, int
            required out contact, strContact
            endparams
            record
                ok      ,boolean                ;;Return status
                url     ,string                 ;;URL for operation
                sr      ,string                 ;;String received
                hs      ,[#]string              ;;Headers sent
                hr      ,[#]string              ;;Headers received
            endrecord
        proc
            ok = true
            url = baseUrl + "/contacts/"+string(contactId)
            hs = getReceiveOnlyHeaders()
            if (errnum=http_get(url,,sr,errtxt="",hs,hr,httpLog,,,,,HTTP_RELURI,"1.1")) then
            begin
                init contact
                ok = false
            end
            else
                contact = makeContactRecord(sr)
            mreturn ok
        endmethod

        public method DeleteContact, boolean
            required in contactId, int
            endparams
            record
                ok      ,boolean                ;;Return status
                url     ,string                 ;;URL for operation
                ss      ,string                 ;;String sent
                sr      ,string                 ;;String received
                hs      ,[#]string              ;;Headers sent
            endrecord
        proc
            ok = true
            url = baseUrl + "/contacts/"+string(contactId)
            hs = getReceiveOnlyHeaders()
            if (errnum = http_delete(url,,ss,sr,errtxt="",hs,httpLog,,,,,HTTP_RELURI,"1.1")) then
                ok = false
            else if (!checkBooleanResponse(sr))
            begin
                errtxt = "Failed to delete contact"
                ok = false
            end
            mreturn ok
        endmethod

        public method CreateContact, boolean
            required in contact, strContact
            endparams
            record
                ok      ,boolean                ;;Return status
                url     ,string                 ;;URL for operation
                ss      ,string                 ;;String sent
                sr      ,string                 ;;String received
                hs      ,[#]string              ;;Headers sent
                hr      ,[#]string              ;;Headers received
            endrecord
        proc
            ok = true
            url = baseUrl + "/contacts/" + string(contact.ContactId)
            ss = makeContactString(contact)
            hs = getSendReceiveHeaders(ss.Length)
            if (errnum=http_post(url,,ss,sr,errtxt="",hs,hr,httpLog,,,,,HTTP_RELURI,"1.1")) then
                ok = false
            else if (!checkBooleanResponse(sr))
            begin
                errtxt = "Failed to create contact"
                ok = false
            end
            mreturn ok
        endmethod

        public method UpdateContact, boolean
            required in contact, strContact
            endparams
            record
                ok      ,boolean                ;;Return status
                url     ,string                 ;;URL for operation
                ss      ,string                 ;;String sent
                sr      ,string                 ;;String received
                hs      ,[#]string              ;;Headers sent
            endrecord
        proc
            ok = true
            url = baseUrl + "/contacts/" + string(contact.ContactId)
            ss = makeContactString(contact)
            hs = getSendReceiveHeaders(ss.Length)
            if (errnum=http_put(url,,ss,sr,errtxt,hs,httpLog,,,,,HTTP_RELURI,"1.1")) then
                ok = false
            else if (!checkBooleanResponse(sr))
            begin
                errtxt = "Failed to update contact"
                ok = false
            end
            mreturn ok
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        ;;; <param name="contactsString"></param>
        ;;; <returns>ArrayList containing boxed contact records</returns>
        private method makeContactCollection, @ArrayList
            required in contactString, string
            endparams
        proc
            using format select
            (WebMessageFormat.Json),
                mreturn makeContactCollectionJson(contactString)
            (),
                mreturn makeContactCollectionXml(contactString)
            endusing
        endmethod

        ;;; <summary>
        ;;; Turns an XML collection of contacts into a collection of records
        ;;; </summary>
        ;;; <param name="contactsString">XML collection of contacts</param>
        ;;; <returns>ArrayList containing boxed contact records</returns>
        private method makeContactCollectionXml, @ArrayList
            required in contactString, string
            endparams
            record
                contacts        ,@ArrayList
                startPos        ,int
            endrecord
        proc
            ;;  <ArrayOfContact xmlns="demos.synergex.com" xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
            ;;    <Contact><ContactId>1</ContactId><Email>maryj97@aol.com</Email><FirstName>Mary</FirstName><LastName>Jones</LastName></Contact>
            ;;    <Contact><ContactId>2</ContactId><Email>asmith@hotmail.com</Email><FirstName>Andrew</FirstName><LastName>Smith</LastName></Contact>
            ;;    <Contact><ContactId>3</ContactId><Email>josh.adams@beebo.com</Email><FirstName>Josh</FirstName><LastName>Adams</LastName></Contact>
            ;;    <Contact><ContactId>4</ContactId><Email>nj57@comcast.net</Email><FirstName>Nicola</FirstName><LastName>James</LastName></Contact>
            ;;    <Contact><ContactId>5</ContactId><Email>michaelsa@yahoo.com</Email><FirstName>Alex</FirstName><LastName>Michaels</LastName></Contact>
            ;;  </ArrayOfContact>
            ;;
            contacts = new ArrayList()
            startPos = 0
            while ((startPos = contactString.IndexOf("<Contact>",startPos))!=-1)
            begin
                data endPos, int, contactString.IndexOf("</Contact>",startPos) + 9
                data oneContact, string, contactString.Substring(startPos,endPos-startPos+1)
                contacts.Add((@strContact)makeContactRecordXml(oneContact))
                startPos += 1
            end
            mreturn contacts
        endmethod

        ;;; <summary>
        ;;; Turns a JSON collection of contacts into a collection of records
        ;;; </summary>
        ;;; <param name="contactsString">JSON collection of contacts</param>
        ;;; <returns>ArrayList containing boxed contact records</returns>
        private method makeContactCollectionJson, @ArrayList
            required in contactString, string
            endparams
            record
                contacts        ,@ArrayList
                startPos        ,int
            endrecord
        proc
            ;[
            ;{"ContactId":1,"Email":"maryj97@aol.com","FirstName":"Mary","LastName":"Jones"}
            ;,
            ;{"ContactId":2,"Email":"asmith@hotmail.com","FirstName":"Andrew","LastName":"Smith"}
            ;,
            ;{"ContactId":3,"Email":"josh.adams@beebo.com","FirstName":"Josh","LastName":"Adams"}
            ;,
            ;{"ContactId":4,"Email":"nj57@comcast.net","FirstName":"Nicola","LastName":"James"}
            ;,
            ;{"ContactId":5,"Email":"michaelsa@yahoo.com","FirstName":"Alex","LastName":"Michaels"}
            ;]
            contacts = new ArrayList()
            startPos = 0
            while ((startPos = contactString.IndexOf("{",startPos))!=-1)
            begin
                data endPos, int, contactString.IndexOf("}",startPos)
                data oneContact, string, contactString.Substring(startPos,endPos-startPos+1)
                contacts.Add((@strContact)makeContactRecordJson(oneContact))
                startPos += 1
            end
            mreturn contacts
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        ;;; <param name="contact">Contact record containing data</param>
        ;;; <returns>String containing contact data</returns>
        private method makeContactString, string
            required in contact, strContact
            endparams
        proc
            using format select
            (WebMessageFormat.Json),
                mreturn makeContactStringJson(contact)
            (),
                mreturn makeContactStringXml(contact)
            endusing
        endmethod

        ;;; <summary>
        ;;; Turns a contact record into an XML representation of the data
        ;;; </summary>
        ;;; <param name="contact">Contact record containing data</param>
        ;;; <returns>String containing XML contact data</returns>
        private method makeContactStringXml, string
            required in contact, strContact
            endparams
        proc
            ;;CAUTION: Believe it or not the default serializer / deserializer
            ;;used by WCF for XML data (DataContractSerializer) requires that
            ;;properties are passed in ALPHABETIC ORDER!!! If you pass
            ;;properties that are not in alphabetic order then they will not
            ;;be parsed correctly on the server and the values of the
            ;;corresponding properties will be null. Unbelievable!
            ;;
            ;;  <Contact xmlns="demos.synergex.com" xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
            ;;    <Email>maryj97@aol.com</Email>
            ;;    <FirstName>Mary</FirstName>
            ;;    <LastName>Jones</LastName>
            ;;  </Contact>
            ;;
            ;;NOTE: We are not including the ContactId field because the
            ;;service will determine it from the URL
            ;;
            mreturn '<Contact xmlns="demos.synergex.com" '
            & 'xmlns:i="http://www/w3.org/2001/XMLSchema-instance">'
            & '<Email>'+atrim(contact.Email)+'</Email>'
            & '<FirstName>'+atrim(contact.FirstName)+'</FirstName>'
            & '<LastName>'+atrim(contact.LastName)+'</LastName>'
            & '</Contact>'
        endmethod

        ;;; <summary>
        ;;; Turns a contact record into a JSON representation of the data
        ;;; </summary>
        ;;; <param name="contact">Contact record containing data</param>
        ;;; <returns>String containing JSON contact data</returns>
        private method makeContactStringJson, string
            required in contact, strContact
            endparams
        proc
            ;;CAUTION: Believe it or not the default serializer / deserializer
            ;;used by WCF for XML data (DataContractJsonSerializer) requires that
            ;;properties are passed in ALPHABETIC ORDER!!! If you pass
            ;;properties that are not in alphabetic order then they will not
            ;;be parsed correctly on the server and the values of the
            ;;corresponding properties will be null. Unbelievable!
            ;;
            ;;  {"Email":"maryj97@aol.com",
            ;;  "FirstName":"Mary",
            ;;  "LastName":"Jones"}
            ;;
            ;;NOTE: We are not including the ContactId field because the
            ;;service will determine it from the URL
            ;;
            mreturn '{"Email":"'+atrim(contact.Email)+'",'
            & '"FirstName":"'+atrim(contact.FirstName)+'",'
            & '"LastName":"'+atrim(contact.LastName)+'"}'
            mreturn ""
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        ;;; <param name="contactString">String with contact data</param>
        ;;; <returns>Contact record</returns>
        private method makeContactRecord, strContact
            required in contactString, string
            endparams
            record
                contact, strContact
            endrecord
        proc
        using format select
        (WebMessageFormat.Json),
            mreturn makeContactRecordJson(contactString)
        (),
            mreturn makeContactRecordXml(contactString)
        endusing
        endmethod

        ;;; <summary>
        ;;; Turns an XML string with contact data into a contact record
        ;;; </summary>
        ;;; <param name="contactString">XML string with contact data</param>
        ;;; <returns>Contact record</returns>
        private method makeContactRecordXml, strContact
            required in contactString, string
            endparams
            record
                contact, strContact
            endrecord
        proc
            ;;
            ;;  <Contact xmlns="demos.synergex.com" xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
            ;;    <ContactId>1</ContactId>
            ;;    <Email>maryj97@aol.com</Email>
            ;;    <FirstName>Mary</FirstName>
            ;;    <LastName>Jones</LastName>
            ;;  </Contact>
            ;;
            init contact
            if (contactString.Contains("<Contact ")||contactString.Contains("<Contact>"))
            begin
                contact.ContactId = integer(StringTools.StringBetween(contactString,"<ContactId>","</ContactId>"))
                contact.FirstName = StringTools.StringBetween(contactString,"<FirstName>","</FirstName>")
                contact.LastName  = StringTools.StringBetween(contactString,"<LastName>","</LastName>")
                contact.Email     = StringTools.StringBetween(contactString,"<Email>","</Email>")
            end
            mreturn contact
        endmethod

        ;;; <summary>
        ;;; Turns a JSON string with contact data into a contact record
        ;;; </summary>
        ;;; <param name="contactString">JSON string with contact data</param>
        ;;; <returns>Contact record</returns>
        private method makeContactRecordJson, strContact
            required in contactString, string
            endparams
            record
                contact, strContact
            endrecord
        proc
            ;{"ContactId":1,
            ;"Email":"maryj97@aol.com",
            ;"FirstName":"Mary",
            ;"LastName":"Jones"}
            init contact
            contact.ContactId = integer(StringTools.StringBetween(contactString,'"ContactId":',','))
            contact.FirstName = StringTools.StringBetween(contactString,'"FirstName":"','"')
            contact.LastName  = StringTools.StringBetween(contactString,'"LastName":"','"')
            contact.Email     = StringTools.StringBetween(contactString,'"Email":"','"')
            mreturn contact
        endmethod

        private method checkBooleanResponse, boolean
            required in responseString, string
            endparams
        proc
            using format select
            (WebMessageFormat.Json),
                mreturn responseString == "true"
            (),
                mreturn responseString == XML_BOOL_TRUE
            endusing
        endmethod

        private method getReceiveOnlyHeaders, [#]string
            endparams
            record
                header, [#]string
            endrecord
        proc
            header = new string[2]
            header[1] = "Host: " + host
            header[2] = getAcceptHeader()
            mreturn header
        endmethod

        private method getSendReceiveHeaders, [#]string
            required in contentLength, int
            endparams
            record
                header, [#]string
            endrecord
        proc
            header = new string[3]
            header[1] = "Host: " + host
            header[2] = getContentTypeHeader()
            header[3] = "Content-Length: " + string(contentLength)
            mreturn header
        endmethod

        private method getAcceptHeader, string
            endparams
        proc
            using format select
            (WebMessageFormat.Json),
                mreturn "Accept: application/json"
            (),
                mreturn "Accept: application/xml"
            endusing
        endmethod

        private method getContentTypeHeader, string
            endparams
        proc
            using format select
            (WebMessageFormat.Json),
                mreturn "Content-Type: application/json"
            (),
                mreturn "Content-Type: application/xml"
            endusing
        endmethod

    endclass

endnamespace
