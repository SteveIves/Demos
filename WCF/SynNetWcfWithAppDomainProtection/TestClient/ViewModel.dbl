
import System
import System.Collections.ObjectModel
import System.Linq
import System.ServiceModel
import System.Text
import System.Threading.Tasks
import System.Windows.Input
import TestClient.PartsService

namespace TestClient

	public class ViewModel extends ViewModelBase

		private mSuppliers, @ObservableCollection<Supplier>

		public property Suppliers, @ObservableCollection<Supplier>
			method get
			proc
				if (mSuppliers==^null)
					getSuppliers()
				mreturn mSuppliers
			endmethod
			method set
			proc
				mSuppliers = value
				NotifyPropertyChanged("Suppliers")
			endmethod
		endproperty
		
		private method getSuppliers, void
			endparams
		proc
			data newSuppliersCollection, @ObservableCollection<Supplier>, new ObservableCollection<Supplier>()
			data client, @PartsServiceClient , new PartsServiceClient()
			
			try
			begin
				ErrorMessage = ""
				data response, @Task<ReadAllSuppliersResponse>, client.ReadAllSuppliersAsync(new ReadAllSuppliersRequest())
				if (response.Result.ReadAllSuppliersResult==MethodStatus.Success)
					newSuppliersCollection = response.Result.aSuppliers
				client.Close()
			end
			catch (ex, @Exception)
			begin
				client.Abort()
				ErrorMessage = ex.Message
			end
			endtry
			
			Suppliers = newSuppliersCollection

			if (Suppliers.Count > 0)
				SelectedSupplier = Suppliers[0]

		endmethod

		private mSelectedSupplier, @Supplier

		public property SelectedSupplier, @Supplier
			method get
			proc
				mreturn mSelectedSupplier
			endmethod
			method set
			proc
				mSelectedSupplier = value
				NotifyPropertyChanged("SelectedSupplier")
				getSupplierParts()
			endmethod
		endproperty
		
		private method getSupplierParts, void
			endparams
		proc
			data newPartsCollection, @ObservableCollection<Part>, new ObservableCollection<Part>()
			data client, @PartsServiceClient , new PartsServiceClient()

			try
			begin
				ErrorMessage = ""
				data response, @Task<ReadSupplierPartsResponse>, client.ReadSupplierPartsAsync(new ReadSupplierPartsRequest(mSelectedSupplier.Supplierid))
				if (response.Result.ReadSupplierPartsResult==MethodStatus.Success)
					newPartsCollection = response.Result.aParts
				client.Close()
			end
			catch (ex, @Exception)
			begin
				client.Abort()
				ErrorMessage = ex.Message
			end
			endtry

			Parts = newPartsCollection

			if (Parts.Count>0)
				SelectedPart = Parts[0]

		endmethod

		private mParts, @ObservableCollection<Part>
		
		public property Parts, @ObservableCollection<Part>
			method get
			proc
				mreturn mParts
			endmethod
			method set
			proc
				mParts = value
				NotifyPropertyChanged("Parts")
			endmethod
		endproperty

		private mSelectedPart, @Part

		public property SelectedPart, @Part
			method get
			proc
				mreturn mSelectedPart
			endmethod
			method set
			proc
				mSelectedPart = value
				NotifyPropertyChanged("SelectedPart")
			endmethod
		endproperty

		private mErrorMessage, String

		public property ErrorMessage, String
			method get
			proc
				mreturn mErrorMessage
			endmethod
			method set
			proc
				mErrorMessage = value
				NotifyPropertyChanged("ErrorMessage")
			endmethod
		endproperty
		

	endclass

endnamespace

