
import System
import System.Collections.ObjectModel
import System.ComponentModel
import System.ServiceModel
import System.Threading.Tasks
import System.Windows.Input
import TestClient.PartsService

namespace TestClient

	public class ViewModel implements INotifyPropertyChanged

.region "Constructors"

		public method ViewModel
			endparams
		proc
			getSuppliers()
		endmethod

.endregion

.region "Backing storage for properties"

		private mSuppliers,			@ObservableCollection<Supplier>
		private mSelectedSupplier,	@Supplier
		private mParts,				@ObservableCollection<Part>
		private mSelectedPart,		@Part

.endregion

.region "Bindable Properties"

		public property Suppliers, @ObservableCollection<Supplier>
			method get
			proc
				mreturn mSuppliers
			endmethod
			method set
			proc
				mSuppliers = value
				NotifyPropertyChanged("Suppliers")
			endmethod
		endproperty
		
		public property SelectedSupplier, @Supplier
			method get
			proc
				mreturn mSelectedSupplier
			endmethod
			method set
			proc
				mSelectedSupplier = value
				NotifyPropertyChanged("SelectedSupplier")
				getSupplierParts()
			endmethod
		endproperty
		
		public property Parts, @ObservableCollection<Part>
			method get
			proc
				mreturn mParts
			endmethod
			method set
			proc
				mParts = value
				NotifyPropertyChanged("Parts")
			endmethod
		endproperty
		
		public property SelectedPart, @Part
			method get
			proc
				mreturn mSelectedPart
			endmethod
			method set
			proc
				mSelectedPart = value
				NotifyPropertyChanged("SelectedPart")
			endmethod
		endproperty

.endregion

.region "Logic"

		private method getSuppliers, void
			endparams
		proc
			data newSuppliersCollection, @ObservableCollection<Supplier>, new ObservableCollection<Supplier>()
			data client, @PartsServiceClient , new PartsServiceClient()
			
			try
			begin
				ErrorMessage = ""
				data response, @Task<ReadAllSuppliersResponse>, client.ReadAllSuppliersAsync(new ReadAllSuppliersRequest())
				if (response.Result.ReadAllSuppliersResult==MethodStatus.Success)
					newSuppliersCollection = response.Result.aSuppliers
				client.Close()
			end
			catch (ex, @Exception)
			begin
				client.Abort()
				ErrorMessage = ex.Message
			end
			endtry
			
			Suppliers = newSuppliersCollection
			
			if (Suppliers.Count > 0)
				SelectedSupplier = Suppliers[0]
				
		endmethod

		private method getSupplierParts, void
			endparams
		proc
			data newPartsCollection, @ObservableCollection<Part>, new ObservableCollection<Part>()
			data client, @PartsServiceClient , new PartsServiceClient()

			try
			begin
				ErrorMessage = ""
				data response, @Task<ReadSupplierPartsResponse>, client.ReadSupplierPartsAsync(new ReadSupplierPartsRequest(mSelectedSupplier.Supplierid))
				if (response.Result.ReadSupplierPartsResult==MethodStatus.Success)
					newPartsCollection = response.Result.aParts
				client.Close()
			end
			catch (ex, @Exception)
			begin
				client.Abort()
				ErrorMessage = ex.Message
			end
			endtry

			Parts = newPartsCollection

			if (Parts.Count>0)
				SelectedPart = Parts[0]

		endmethod

.endregion

.region "ErrorMessage"

		private mErrorMessage, String

		public property ErrorMessage, String
			method get
			proc
				mreturn mErrorMessage
			endmethod
			method set
			proc
				mErrorMessage = value
				NotifyPropertyChanged("ErrorMessage")
			endmethod
		endproperty
		
.endregion

.region "INotifyPropertyChanged"
		
		public event PropertyChanged, @PropertyChangedEventHandler
		
		protected method NotifyPropertyChanged, void
			required in propertyName, String
			endparams
		proc
			if (PropertyChanged!=^null)
				raiseevent(PropertyChanged,this,new PropertyChangedEventArgs(propertyName))
		endmethod
		
.endregion
		
	endclass

endnamespace

