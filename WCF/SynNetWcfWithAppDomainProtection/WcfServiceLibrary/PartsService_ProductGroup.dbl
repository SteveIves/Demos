;;******************************************************************************
;;* WARNING: Code generated at 15:34 on 01/08/2014 by steve.ives@synergex.com
;;******************************************************************************

import System
import System.Collections.Generic
import System.ServiceModel
import System.Threading.Tasks
import PartsSystem

namespace WcfServiceLibrary

    public partial class PartsService

        {OperationContract}
        public method CreateProductGroup, MethodStatus
            required in aProductGroup, @ProductGroup
        proc
            data completionSource = new TaskCompletionSource<MethodStatus>()
            lambda curryParams()
            begin
                data api, @PartsSystemAPI, new PartsSystemAPI()
                completionSource.SetResult(api.CreateProductGroup(aProductGroup))
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            completionSource.Task.Wait()
            mreturn completionSource.Task.Result
        endmethod

        {OperationContract}
        public method ReadProductGroup, MethodStatus
            required in  aGroupId, string
            required out aProductGroup, @ProductGroup
            required out aGrfa, String
            endparams
        proc
            data completionSource = new TaskCompletionSource<Tuple<MethodStatus,ProductGroup,String>>()
            lambda curryParams()
            begin
                data api, @PartsSystemAPI, new PartsSystemAPI()
                data tmpProductGroup, @ProductGroup
                data tmpGrfa, String
                completionSource.SetResult(Tuple.Create(api.ReadProductGroup(aGroupId,tmpProductGroup,tmpGrfa),tmpProductGroup,tmpGrfa))
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            completionSource.Task.Wait()
            aProductGroup = completionSource.Task.Result.Item2
            aGrfa = completionSource.Task.Result.Item3
            mreturn completionSource.Task.Result.Item1
        endmethod

        {OperationContract}
        public method ReadAllProductGroups, MethodStatus
            required out aProductGroups, @List<ProductGroup>
            endparams
        proc
            data completionSource = new TaskCompletionSource<Tuple<MethodStatus,List<ProductGroup>>>()
            lambda curryParams()
            begin
                data api, @PartsSystemAPI, new PartsSystemAPI()
                data tmpProductGroups, @List<ProductGroup>
                completionSource.SetResult(Tuple.Create(api.ReadAllProductGroups(tmpProductGroups),tmpProductGroups))
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            completionSource.Task.Wait()
            aProductGroups = completionSource.Task.Result.Item2
            mreturn completionSource.Task.Result.Item1
        endmethod

        {OperationContract}
        public method UpdateProductGroup, MethodStatus
            required inout aProductGroup, @ProductGroup
            required inout aGrfa, String
            endparams
        proc
            data completionSource = new TaskCompletionSource<Tuple<MethodStatus,ProductGroup,String>>()
            data tmpProductGroup, @ProductGroup, aProductGroup
            data tmpGrfa, String, aGrfa
            lambda curryParams()
            begin
                data api, @PartsSystemAPI, new PartsSystemAPI()
                completionSource.SetResult(Tuple.Create(api.UpdateProductGroup(tmpProductGroup,tmpGrfa),tmpProductGroup,tmpGrfa))
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            completionSource.Task.Wait()
            aProductGroup = completionSource.Task.Result.Item2
            aGrfa = completionSource.Task.Result.Item3
            mreturn completionSource.Task.Result.Item1
        endmethod

        {OperationContract}
        public method DeleteProductGroup, MethodStatus
            required in aGrfa, String
            endparams
        proc
            data completionSource = new TaskCompletionSource<MethodStatus>()
            lambda curryParams()
            begin
                data api, @PartsSystemAPI, new PartsSystemAPI()
                completionSource.SetResult(api.DeleteProductGroup(aGrfa))
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            completionSource.Task.Wait()
            mreturn completionSource.Task.Result
        endmethod

        {OperationContract}
        public method ProductGroupExists, MethodStatus
            required in aGroupId, string
            endparams
        proc
            data completionSource = new TaskCompletionSource<MethodStatus>()
            lambda curryParams()
            begin
                data api, @PartsSystemAPI, new PartsSystemAPI()
                completionSource.SetResult(api.ProductGroupExists(aGroupId))
            end
            this.ServiceDispatcher.Dispatch(curryParams)
            completionSource.Task.Wait()
            mreturn completionSource.Task.Result
        endmethod

    endclass

endnamespace
