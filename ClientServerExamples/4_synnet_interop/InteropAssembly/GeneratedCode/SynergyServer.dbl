;; ;; 
;; The contents of this file are auto-generated. Only add modifications to the end of this file.
;; Any modifications will be lost when the file is re-generated.
;; 
import System
import System.Collections
import System.Reflection
namespace xfpldemo

;;; <summary>
;;; Procedural Interface Class InteropAssemblyTmp
;;; </summary>
	public partial class SynergyServer
	
		;;; <summary>
		;;; Returns an address record and current GRFA
		;;; </summary>
		;;; <param name="CustomerID">Passed customer ID</param>
		;;; <param name="AddressID">Passed address ID</param>
		;;; <param name="Address">Returned address structure</param>
		;;; <param name="GRFA">Returned current GRFA</param>
		;;; <param name="Message">Returned message text for non success status</param>
		;;; <returns>Return value defined by METHOD_STATUS enumeration</returns>
		public method GetAddressForUpdate   ,Method_status
			CustomerID    ,int
			AddressID    ,int
			inout  Address    ,@xfpldemo.Address
			inout  GRFA    ,[#]byte
			inout  Message    ,string
		endparams
		record
			s_CustomerID	,i4
			s_AddressID	,i4
			s_3_Address	,^global.straddress
			s_GRFA	,D_HANDLE
			s_Message	,string
		proc
			data ret   ,Method_status
			s_CustomerID = CustomerID
			s_AddressID = AddressID
			Address = new xfpldemo.address()
			s_GRFA = %mem_proc(DM_ALLOC, 1)
			ret = (Method_status) (int)%GetAddressForUpdate(s_CustomerID,s_AddressID,s_3_Address,s_GRFA,s_Message)
			Address.SynergyToStruct(s_3_Address)
			data tmp_sGRFA, @VariantDesc, ^m(s_GRFA)
			GRFA= tmp_sGRFA.ToByteArray()
			Message = s_Message
			mreturn ret
		endmethod
		;;; <summary>
		;;; Returns a collection of all customers
		;;; </summary>
		;;; <param name="Customers">Returned ArrayList of boxed customer structures</param>
		public method GetAllCustomers   ,void
			inout  Customers    ,@ArrayList
		endparams
		record
			s_Customers	,@ArrayList
		proc
			Customers.Clear()
			s_Customers = new ArrayList()
			xcall GetAllCustomers(s_Customers)
			data i    ,int
			for i from 0 thru (s_Customers.Count - 1)
			begin
				data xfStr1    ,@xfpldemo.customer,new xfpldemo.customer()
				data tStr1     ,^Global.strCustomer
				tStr1 = (@^Global.strCustomer)s_Customers[i]
				xfStr1.SynergyToStruct(tStr1)
				Customers.Add(xfStr1)
			end
		endmethod
		;;; <summary>
		;;; Returns a contact record and current GRFA
		;;; </summary>
		;;; <param name="CustomerID">Passed customer ID</param>
		;;; <param name="ContactID">Passed contact ID</param>
		;;; <param name="Contact">Returned contact structure</param>
		;;; <param name="GRFA">Returned current GRFA</param>
		;;; <param name="Message">Returned message text for non success status</param>
		;;; <returns>Return value defined by METHOD_STATUS enumeration</returns>
		public method GetContactForUpdate   ,Method_status
			CustomerID    ,int
			ContactID    ,int
			inout  Contact    ,@xfpldemo.Contact
			inout  GRFA    ,[#]byte
			inout  Message    ,string
		endparams
		record
			s_CustomerID	,i4
			s_ContactID	,i4
			s_3_Contact	,^global.strcontact
			s_GRFA	,D_HANDLE
			s_Message	,string
		proc
			data ret   ,Method_status
			s_CustomerID = CustomerID
			s_ContactID = ContactID
			Contact = new xfpldemo.contact()
			s_GRFA = %mem_proc(DM_ALLOC, 1)
			ret = (Method_status) (int)%GetContactForUpdate(s_CustomerID,s_ContactID,s_3_Contact,s_GRFA,s_Message)
			Contact.SynergyToStruct(s_3_Contact)
			data tmp_sGRFA, @VariantDesc, ^m(s_GRFA)
			GRFA= tmp_sGRFA.ToByteArray()
			Message = s_Message
			mreturn ret
		endmethod
		;;; <summary>
		;;; Returns a collection of addresses for a customer
		;;; </summary>
		;;; <param name="CustomerID">Passed customer ID</param>
		;;; <param name="Addresses">Returned ArrayList of boxed address structures</param>
		public method GetCustomerAddresses   ,void
			CustomerID    ,int
			inout  Addresses    ,@ArrayList
		endparams
		record
			s_CustomerID	,i4
			s_Addresses	,@ArrayList
		proc
			s_CustomerID = CustomerID
			Addresses.Clear()
			s_Addresses = new ArrayList()
			xcall GetCustomerAddresses(s_CustomerID,s_Addresses)
			data i    ,int
			for i from 0 thru (s_Addresses.Count - 1)
			begin
				data xfStr2    ,@xfpldemo.address,new xfpldemo.address()
				data tStr2     ,^Global.strAddress
				tStr2 = (@^Global.strAddress)s_Addresses[i]
				xfStr2.SynergyToStruct(tStr2)
				Addresses.Add(xfStr2)
			end
		endmethod
		;;; <summary>
		;;; Returns a collection of contacts for a customer
		;;; </summary>
		;;; <param name="CustomerID">Passed customer ID</param>
		;;; <param name="Contacts">Returned ArrayList of boxed contact structures</param>
		public method GetCustomerContacts   ,void
			CustomerID    ,int
			inout  Contacts    ,@ArrayList
		endparams
		record
			s_CustomerID	,i4
			s_Contacts	,@ArrayList
		proc
			s_CustomerID = CustomerID
			Contacts.Clear()
			s_Contacts = new ArrayList()
			xcall GetCustomerContacts(s_CustomerID,s_Contacts)
			data i    ,int
			for i from 0 thru (s_Contacts.Count - 1)
			begin
				data xfStr2    ,@xfpldemo.contact,new xfpldemo.contact()
				data tStr2     ,^Global.strContact
				tStr2 = (@^Global.strContact)s_Contacts[i]
				xfStr2.SynergyToStruct(tStr2)
				Contacts.Add(xfStr2)
			end
		endmethod
		;;; <summary>
		;;; Returns a customer record and current GRFA
		;;; </summary>
		;;; <param name="CustomerID">Passed customer ID</param>
		;;; <param name="Customer">Returned customer structure</param>
		;;; <param name="GRFA">Returned current GRFA</param>
		;;; <param name="Message">Returned message text for non success status</param>
		;;; <returns>Return value defined by METHOD_STATUS enumeration</returns>
		public method GetCustomerForUpdate   ,Method_status
			CustomerID    ,int
			inout  Customer    ,@xfpldemo.Customer
			inout  GRFA    ,[#]byte
			inout  Message    ,string
		endparams
		record
			s_CustomerID	,i4
			s_2_Customer	,^global.strcustomer
			s_GRFA	,D_HANDLE
			s_Message	,string
		proc
			data ret   ,Method_status
			s_CustomerID = CustomerID
			Customer = new xfpldemo.customer()
			s_GRFA = %mem_proc(DM_ALLOC, 1)
			ret = (Method_status) (int)%GetCustomerForUpdate(s_CustomerID,s_2_Customer,s_GRFA,s_Message)
			Customer.SynergyToStruct(s_2_Customer)
			data tmp_sGRFA, @VariantDesc, ^m(s_GRFA)
			GRFA= tmp_sGRFA.ToByteArray()
			Message = s_Message
			mreturn ret
		endmethod
		;;; <summary>
		;;; Updated a contact record
		;;; </summary>
		;;; <param name="Contact">Contact structure</param>
		;;; <param name="GRFA">Previous GRFA</param>
		;;; <param name="Message">Returned message text for non success status</param>
		;;; <returns>Return value defined by METHOD_STATUS enumeration</returns>
		public method UpdateContact   ,Method_status
			inout  Contact    ,@xfpldemo.Contact
			inout  GRFA    ,[#]byte
			inout  Message    ,string
		endparams
		record
			s_1_Contact	,^global.strcontact
			s_GRFA	,D_HANDLE
			s_Message	,string
		proc
			data ret   ,Method_status
			s_1_Contact = Contact.StructToSynergy()
			s_GRFA = %mem_proc(DM_ALLOC, GRFA.length, s_GRFA)
			data tmps_GRFA, @VariantDesc, ^m(s_GRFA)
			tmps_GRFA.SetByteArray(GRFA)
			ret = (Method_status) (int)%UpdateContact(s_1_Contact,s_GRFA,s_Message)
			Contact.SynergyToStruct(s_1_Contact)
			data tmp_sGRFA, @VariantDesc, ^m(s_GRFA)
			GRFA= tmp_sGRFA.ToByteArray()
			Message = s_Message
			mreturn ret
		endmethod
		;;; <summary>
		;;; Updated a customer record
		;;; </summary>
		;;; <param name="Customer">Customer structure</param>
		;;; <param name="GRFA">Previous GRFA</param>
		;;; <param name="Message">Returned message text for non success status</param>
		;;; <returns>Return value defined by METHOD_STATUS enumeration</returns>
		public method UpdateCustomer   ,Method_status
			inout  Customer    ,@xfpldemo.Customer
			inout  GRFA    ,[#]byte
			inout  Message    ,string
		endparams
		record
			s_1_Customer	,^global.strcustomer
			s_GRFA	,D_HANDLE
			s_Message	,string
		proc
			data ret   ,Method_status
			s_1_Customer = Customer.StructToSynergy()
			s_GRFA = %mem_proc(DM_ALLOC, GRFA.length, s_GRFA)
			data tmps_GRFA, @VariantDesc, ^m(s_GRFA)
			tmps_GRFA.SetByteArray(GRFA)
			ret = (Method_status) (int)%UpdateCustomer(s_1_Customer,s_GRFA,s_Message)
			Customer.SynergyToStruct(s_1_Customer)
			data tmp_sGRFA, @VariantDesc, ^m(s_GRFA)
			GRFA= tmp_sGRFA.ToByteArray()
			Message = s_Message
			mreturn ret
		endmethod
		;  xfnlnet method stubs
		;;; <summary>
		;;; connect to xfServerPlus
		;;; </summary>
		public method connect   ,void
		endparams
		proc
		endmethod
		;;; <summary>
		;;; xfServerPlus four parameter connect
		;;; </summary>
		;;; <param name="hostIP">IP address</param>
		;;; <param name="hostPort">port number</param>
		;;; <param name="minPort">minport number</param>
		;;; <param name="maxPort">maxport number</param>
		public method connect   ,void
		  hostIP     ,string
		  hostPort   ,int
		  minPort    ,int
		  maxPort    ,int
		endparams
		proc
		endmethod
		;;; <summary>
		;;; xfServerPlus host and port connect
		;;; </summary>
		;;; <param name="hostIP">IP address</param>
		;;; <param name="hostPort">port number</param>
		public method connect   ,void
		  hostIP     ,string
		  hostPort   ,int
		endparams
		proc
		endmethod
		;;; <summary>
		;;; disconnect from xfServerPlus
		;;; </summary>
		public method disconnect   ,void
		endparams
		proc
		endmethod
		;;; <summary>
		;;; set the call timeout in seconds
		;;; </summary>
		;;; <param name="seconds">timeout in seconds</param>
		public method setCallTimeout   ,void
		  in seconds    ,int
		endparams
		proc
		endmethod
		;;; <summary>
		;;; set the user string
		;;; </summary>
		;;; <param name="userString">The user string</param>
		public method setUserString   ,void
		  in userString    ,string
		endparams
		proc
			xcall XFPL_LOG(userString)
		endmethod
		;;; <summary>
		;;; get the user string 
		;;; </summary>
		;;; <returns>User String</returns>
		public method getUserString   ,string
		  out userString    ,string
		endparams
		proc
			mreturn('')
		endmethod
	endclass
endnamespace
